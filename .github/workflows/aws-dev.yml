name: Deploy to Amazon ECS

on:
  push:
    branches: 
      - develop

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: kilt/prototype-chain
        CACHE_IMAGE_TAG: latest-develop
        CACHE_IMAGE_BUILDER_TAG: latest-develop-builder
      run: |
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_BUILDER_TAG || true
        docker build \
          --target builder \
          --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_BUILDER_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_BUILDER_TAG \
          .
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_TAG || true
        docker build \
          --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_BUILDER_TAG \
          --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_TAG \
          .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_BUILDER_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$CACHE_IMAGE_TAG"

    - name: (Alice) Fill in the new image ID in the Amazon ECS task definition
      id: task-def-alice
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-alice.json
        container-name: devnet-node
        image: ${{ steps.build-image.outputs.image }}

    - name: (Alice) Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-alice.outputs.task-definition }}
        service: bootnode-alice
        cluster: kilt-devnet
        wait-for-service-stability: true

    - name: (Bob) Fill in the new image ID in the Amazon ECS task definition
      id: task-def-bob
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-bob.json
        container-name: devnet-node
        image: ${{ steps.build-image.outputs.image }}

    - name: (Bob) Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-bob.outputs.task-definition }}
        service: bootnode-bob
        cluster: kilt-devnet
        wait-for-service-stability: true

    - name: (Charlie) Fill in the new image ID in the Amazon ECS task definition
      id: task-def-charlie
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-charlie.json
        container-name: devnet-charlie
        image: ${{ steps.build-image.outputs.image }}

    - name: (Charlie) Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-charlie.outputs.task-definition }}
        service: bootnode-charlie
        cluster: kilt-devnet
        wait-for-service-stability: true

    - name: (Full) Fill in the new image ID in the Amazon ECS task definition
      id: task-def-full
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-full.json
        container-name: devnet-node
        image: ${{ steps.build-image.outputs.image }}

    - name: (Full) Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-full.outputs.task-definition }}
        service: full-nodes
        cluster: kilt-devnet
        wait-for-service-stability: true

    - name: Purge data in demo services
      env:
        SERVICES_SECRET: ${{ secrets.SERVICES_SECRET }}
      run: |
        curl -X DELETE -H "Authorization: ${SERVICES_SECRET}" https://services.devnet.kilt.io/ctype
        curl -X DELETE -H "Authorization: ${SERVICES_SECRET}" https://services.devnet.kilt.io/messaging
        curl -X DELETE -H "Authorization: ${SERVICES_SECRET}" https://services.devnet.kilt.io/contacts
