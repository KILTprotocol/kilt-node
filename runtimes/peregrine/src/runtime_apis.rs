use core::str;

use ::xcm::{
	v4::{Asset, AssetId, Location},
	VersionedAssetId, VersionedLocation, VersionedXcm,
};
use cumulus_primitives_aura::Slot;
use cumulus_primitives_core::CollationInfo;
use frame_support::{
	genesis_builder_helper::{build_config, create_default_config},
	pallet_prelude::{TransactionSource, TransactionValidity},
	traits::{
		fungibles::{metadata::Inspect as MetadataInspect, Inspect},
		PalletInfoAccess,
	},
	weights::Weight,
};
use kilt_runtime_api_did::RawDidLinkedInfo;
use kilt_support::traits::ItemFilter;
use pallet_asset_switch::xcm::AccountId32ToAccountId32JunctionConverter;
use pallet_bonded_coins::{
	curves::{
		balance_to_fixed, fixed_to_balance, lmsr::LMSRParameters, polynomial::PolynomialParameters,
		square_root::SquareRootParameters, BondingFunction, Curve,
	},
	PoolDetailsOf, Pools, Round,
};
use pallet_bonded_coins_runtime_api::{
	BondedCurrencyDetails, Coefficient, CollateralDetails, PoolDetailsOf as PoolDetails,
};
use pallet_did_lookup::{linkable_account::LinkableAccountId, ConnectionRecord};
use pallet_dip_provider::traits::IdentityProvider;
use pallet_transaction_payment::{FeeDetails, RuntimeDispatchInfo};
use pallet_web3_names::{web3_name::Web3NameOwnership, Web3NameOf};
use parity_scale_codec::alloc::string::{String, ToString};
use public_credentials::CredentialEntry;
use runtime_common::{
	asset_switch::runtime_api::Error as AssetSwitchApiError,
	assets::{AssetDid, PublicCredentialsFilter},
	authorization::AuthorizationId,
	bonded_coins::{
		runtime_api::{Error as BondedCurrencyError, Operation},
		AssetId as BondedAssetId, FixedPoint, FixedPointUnderlyingType,
	},
	constants::SLOT_DURATION,
	dip::merkle::{CompleteMerkleProof, DidMerkleProofOf, DidMerkleRootGenerator},
	errors::PublicCredentialsApiError,
	AccountId, AuthorityId, Balance, BlockNumber, DidIdentifier, Hash, Nonce,
};
use sp_api::impl_runtime_apis;
use sp_core::OpaqueMetadata;
use sp_inherents::{CheckInherentsResult, InherentData};
use sp_metadata_ir::RuntimeApiMetadataIR;
use sp_runtime::{
	traits::{Block as BlockT, TryConvert},
	ApplyExtrinsicResult, KeyTypeId, SaturatedConversion,
};
use sp_std::{prelude::*, str::FromStr, vec::Vec};
use sp_version::{ApisVec, RuntimeVersion};
use unique_linking_runtime_api::{AddressResult, NameResult};

use crate::{
	kilt::{DipProofError, DipProofRequest, DotName, NativeAndForeignAssets, UniqueLinkingDeployment},
	parachain::ConsensusHook,
	xcm::UniversalLocation,
	AssetSwitchPool1, Aura, Block, BondedFungibles, DotNames, Executive, InherentDataExt, ParachainStaking,
	ParachainSystem, Runtime, RuntimeCall, RuntimeGenesisConfig, SessionKeys, TransactionPayment, UniqueLinking,
	VERSION,
};

// This is necessary since by default `RUNTIME_API_VERSIONS` generated by
// `impl_runtime_apis` is private.
pub(crate) const RUNTIME_API_VERSION: ApisVec = RUNTIME_API_VERSIONS;

// Workaround for runtime API impls not exposed in metadata if implemented in a
// different file than the runtime's `lib.rs`. Related issue (subxt) -> https://github.com/paritytech/subxt/issues/1873.
pub(crate) trait _InternalImplRuntimeApis {
	fn runtime_metadata(&self) -> Vec<RuntimeApiMetadataIR>;
}

impl<T> _InternalImplRuntimeApis for T
where
	T: InternalImplRuntimeApis,
{
	#[inline(always)]
	fn runtime_metadata(&self) -> Vec<RuntimeApiMetadataIR> {
		<T as InternalImplRuntimeApis>::runtime_metadata(self)
	}
}

impl_runtime_apis! {
	impl sp_api::Core<Block> for Runtime {
		fn version() -> RuntimeVersion {
			VERSION
		}

		fn execute_block(block: Block) {
			Executive::execute_block(block);
		}

		fn initialize_block(header: &<Block as BlockT>::Header) {
			Executive::initialize_block(header)
		}
	}

	impl sp_api::Metadata<Block> for Runtime {
		fn metadata() -> OpaqueMetadata {
			OpaqueMetadata::new(Runtime::metadata().into())
		}

		fn metadata_at_version(version: u32) -> Option<OpaqueMetadata> {
			Runtime::metadata_at_version(version)
		}

		fn metadata_versions() -> Vec<u32> {
			Runtime::metadata_versions()
		}
	}

	impl frame_system_rpc_runtime_api::AccountNonceApi<Block, AccountId, Nonce> for Runtime {
		fn account_nonce(account: AccountId) -> Nonce {
			frame_system::Pallet::<Runtime>::account_nonce(account)
		}
	}

	impl pallet_transaction_payment_rpc_runtime_api::TransactionPaymentApi<Block, Balance> for Runtime {
		fn query_info(
			uxt: <Block as BlockT>::Extrinsic,
			len: u32,
		) -> RuntimeDispatchInfo<Balance> {
			TransactionPayment::query_info(uxt, len)
		}

		fn query_fee_details(uxt: <Block as BlockT>::Extrinsic, len: u32) -> FeeDetails<Balance> {
			TransactionPayment::query_fee_details(uxt, len)
		}

		fn query_weight_to_fee(weight: Weight) -> Balance {
			TransactionPayment::weight_to_fee(weight)
		}
		fn query_length_to_fee(length: u32) -> Balance {
			TransactionPayment::length_to_fee(length)
		}
	}

	impl pallet_transaction_payment_rpc_runtime_api::TransactionPaymentCallApi<Block, Balance, RuntimeCall>
	for Runtime
	{
		fn query_call_info(
			call: RuntimeCall,
			len: u32,
		) -> RuntimeDispatchInfo<Balance> {
			TransactionPayment::query_call_info(call, len)
		}
		fn query_call_fee_details(
			call: RuntimeCall,
			len: u32,
		) -> FeeDetails<Balance> {
			TransactionPayment::query_call_fee_details(call, len)
		}
		fn query_weight_to_fee(weight: Weight) -> Balance {
			TransactionPayment::weight_to_fee(weight)
		}
		fn query_length_to_fee(length: u32) -> Balance {
			TransactionPayment::length_to_fee(length)
		}
	}

	impl sp_block_builder::BlockBuilder<Block> for Runtime {
		fn apply_extrinsic(
			extrinsic: <Block as BlockT>::Extrinsic,
		) -> ApplyExtrinsicResult {
			Executive::apply_extrinsic(extrinsic)
		}

		fn finalize_block() -> <Block as BlockT>::Header {
			Executive::finalize_block()
		}

		fn inherent_extrinsics(data: InherentData) -> Vec<<Block as BlockT>::Extrinsic> {
			data.create_extrinsics()
		}

		fn check_inherents(block: Block, data: InherentData) -> CheckInherentsResult {
			data.check_extrinsics(&block)
		}
	}

	impl sp_transaction_pool::runtime_api::TaggedTransactionQueue<Block> for Runtime {
		fn validate_transaction(
			source: TransactionSource,
			tx: <Block as BlockT>::Extrinsic,
			block_hash: <Block as BlockT>::Hash,
		) -> TransactionValidity {
			Executive::validate_transaction(source, tx, block_hash)
		}
	}

	impl sp_offchain::OffchainWorkerApi<Block> for Runtime {
		fn offchain_worker(header: &<Block as BlockT>::Header) {
			Executive::offchain_worker(header)
		}
	}

	impl sp_session::SessionKeys<Block> for Runtime {
		fn decode_session_keys(
			encoded: Vec<u8>,
		) -> Option<Vec<(Vec<u8>, KeyTypeId)>> {
			SessionKeys::decode_into_raw_public_keys(&encoded)
		}

		fn generate_session_keys(seed: Option<Vec<u8>>) -> Vec<u8> {
			SessionKeys::generate(seed)
		}
	}

	impl sp_consensus_aura::AuraApi<Block, AuthorityId> for Runtime {
		fn slot_duration() -> sp_consensus_aura::SlotDuration {
			sp_consensus_aura::SlotDuration::from_millis(SLOT_DURATION)
		}

		fn authorities() -> Vec<AuthorityId> {
			Aura::authorities().into_inner()
		}
	}

	impl cumulus_primitives_aura::AuraUnincludedSegmentApi<Block> for Runtime {
		fn can_build_upon(
			included_hash: <Block as BlockT>::Hash,
			slot: Slot,
			) -> bool {
				ConsensusHook::can_build_upon(included_hash, slot)
			}
	}

	impl cumulus_primitives_core::CollectCollationInfo<Block> for Runtime {
		fn collect_collation_info(header: &<Block as BlockT>::Header) -> CollationInfo {
			ParachainSystem::collect_collation_info(header)
		}
	}

	impl sp_genesis_builder::GenesisBuilder<Block> for Runtime {

		fn create_default_config() -> Vec<u8> {
			create_default_config::<RuntimeGenesisConfig>()
		}

		fn build_config(config: Vec<u8>) -> sp_genesis_builder::Result {
			build_config::<RuntimeGenesisConfig>(config)
		}

	}

	impl kilt_runtime_api_did::Did<
		Block,
		DidIdentifier,
		AccountId,
		LinkableAccountId,
		Balance,
		Hash,
		BlockNumber
	> for Runtime {
		fn query_by_web3_name(name: Vec<u8>) -> Option<RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		> {
			let parsed_name: Web3NameOf<Runtime> = name.try_into().ok()?;
			pallet_web3_names::Owner::<Runtime>::get(&parsed_name)
				.and_then(|owner_info| {
					did::Did::<Runtime>::get(&owner_info.owner).map(|details| (owner_info, details))
				})
				.map(|(owner_info, details)| {
					let accounts = pallet_did_lookup::ConnectedAccounts::<Runtime>::iter_key_prefix(
						&owner_info.owner,
					).collect();
					let service_endpoints = did::ServiceEndpoints::<Runtime>::iter_prefix(&owner_info.owner).map(|e| From::from(e.1)).collect();

					RawDidLinkedInfo{
						identifier: owner_info.owner,
						w3n: Some(parsed_name.into()),
						accounts,
						service_endpoints,
						details: details.into(),
					}
			})
		}

		fn batch_query_by_web3_name(names: Vec<Vec<u8>>) -> Vec<Option<RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		>> {
			names.into_iter().map(Self::query_by_web3_name).collect()
		}

		fn query_by_account(account: LinkableAccountId) -> Option<
			RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		> {
			pallet_did_lookup::ConnectedDids::<Runtime>::get(account)
				.and_then(|owner_info| {
					did::Did::<Runtime>::get(&owner_info.did).map(|details| (owner_info, details))
				})
				.map(|(connection_record, details)| {
					let w3n = pallet_web3_names::Names::<Runtime>::get(&connection_record.did).map(Into::into);
					let accounts = pallet_did_lookup::ConnectedAccounts::<Runtime>::iter_key_prefix(&connection_record.did).collect();
					let service_endpoints = did::ServiceEndpoints::<Runtime>::iter_prefix(&connection_record.did).map(|e| From::from(e.1)).collect();

					RawDidLinkedInfo {
						identifier: connection_record.did,
						w3n,
						accounts,
						service_endpoints,
						details: details.into(),
					}
				})
		}

		fn batch_query_by_account(accounts: Vec<LinkableAccountId>) -> Vec<Option<
			RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		>> {
			accounts.into_iter().map(Self::query_by_account).collect()
		}

		fn query(did: DidIdentifier) -> Option<
			RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		> {
			let details = did::Did::<Runtime>::get(&did)?;
			let w3n = pallet_web3_names::Names::<Runtime>::get(&did).map(Into::into);
			let accounts = pallet_did_lookup::ConnectedAccounts::<Runtime>::iter_key_prefix(&did).collect();
			let service_endpoints = did::ServiceEndpoints::<Runtime>::iter_prefix(&did).map(|e| From::from(e.1)).collect();

			Some(RawDidLinkedInfo {
				identifier: did,
				w3n,
				accounts,
				service_endpoints,
				details: details.into(),
			})
		}

		fn batch_query(dids: Vec<DidIdentifier>) -> Vec<Option<
			RawDidLinkedInfo<
				DidIdentifier,
				AccountId,
				LinkableAccountId,
				Balance,
				Hash,
				BlockNumber
			>
		>> {
			dids.into_iter().map(Self::query).collect()
		}
	}

	impl kilt_runtime_api_public_credentials::PublicCredentials<Block, Vec<u8>, Hash, CredentialEntry<Hash, DidIdentifier, BlockNumber, AccountId, Balance, AuthorizationId<<Runtime as delegation::Config>::DelegationNodeId>>, PublicCredentialsFilter<Hash, AccountId>, PublicCredentialsApiError> for Runtime {
		fn get_by_id(credential_id: Hash) -> Option<CredentialEntry<Hash, DidIdentifier, BlockNumber, AccountId, Balance, AuthorizationId<<Runtime as delegation::Config>::DelegationNodeId>>> {
			let subject = public_credentials::CredentialSubjects::<Runtime>::get(credential_id)?;
			public_credentials::Credentials::<Runtime>::get(subject, credential_id)
		}

		fn get_by_subject(subject: Vec<u8>, filter: Option<PublicCredentialsFilter<Hash, AccountId>>) -> Result<Vec<(Hash, CredentialEntry<Hash, DidIdentifier, BlockNumber, AccountId, Balance, AuthorizationId<<Runtime as delegation::Config>::DelegationNodeId>>)>, PublicCredentialsApiError> {
			let asset_did = AssetDid::try_from(subject).map_err(|_| PublicCredentialsApiError::InvalidSubjectId)?;
			let credentials_prefix = public_credentials::Credentials::<Runtime>::iter_prefix(asset_did);
			if let Some(credentials_filter) = filter {
				Ok(credentials_prefix.filter(|(_, entry)| credentials_filter.should_include(entry)).collect())
			} else {
				Ok(credentials_prefix.collect())
			}
		}
	}

	impl kilt_runtime_api_staking::Staking<Block, AccountId, Balance> for Runtime {
		fn get_unclaimed_staking_rewards(account: &AccountId) -> Balance {
			ParachainStaking::get_unclaimed_staking_rewards(account)
		}

		fn get_staking_rates() -> kilt_runtime_api_staking::StakingRates {
			ParachainStaking::get_staking_rates()
		}
	}

	impl kilt_runtime_api_dip_provider::DipProvider<Block, DipProofRequest, CompleteMerkleProof<Hash, DidMerkleProofOf<Runtime>>, DipProofError> for Runtime {
		fn generate_proof(request: DipProofRequest) -> Result<CompleteMerkleProof<Hash, DidMerkleProofOf<Runtime>>, DipProofError> {
			let identity_details = pallet_dip_provider::IdentityProviderOf::<Runtime>::retrieve(&request.identifier).map_err(DipProofError::IdentityProvider)?;
			log::info!(target: "runtime_api::dip_provider", "Identity details retrieved for request {:#?}: {:#?}", request, identity_details);

			DidMerkleRootGenerator::<Runtime>::generate_proof(&identity_details, request.version, request.keys.iter(), request.should_include_web3_name, request.accounts.iter()).map_err(DipProofError::MerkleProof)
		}
	}

	impl pallet_asset_switch_runtime_api::AssetSwitch<Block, VersionedAssetId, AccountId, u128, VersionedLocation, AssetSwitchApiError, VersionedXcm<()>> for Runtime {
		fn pool_account_id(pair_id: Vec<u8>, asset_id: VersionedAssetId) -> Result<AccountId, AssetSwitchApiError> {
			let Ok(pair_id_as_string) = str::from_utf8(pair_id.as_slice()) else {
				return Err(AssetSwitchApiError::InvalidInput);
			};
			match pair_id_as_string {
				kilt_to_ekilt if kilt_to_ekilt == AssetSwitchPool1::name() => {
					AssetSwitchPool1::pool_account_id_for_remote_asset(&asset_id).map_err(|e| {
						log::error!("Failed to calculate pool account address for asset ID {:?} with error: {:?}", asset_id, e);
						AssetSwitchApiError::Internal
					})
				},
				_ => Err(AssetSwitchApiError::SwitchPoolNotFound)
			}
		}

		fn xcm_for_switch(pair_id: Vec<u8>, from: AccountId, to: VersionedLocation, amount: u128) -> Result<VersionedXcm<()>, AssetSwitchApiError> {
			let Ok(pair_id_as_string) = str::from_utf8(pair_id.as_slice()) else {
				return Err(AssetSwitchApiError::InvalidInput);
			};

			if pair_id_as_string != AssetSwitchPool1::name() {
				return Err(AssetSwitchApiError::SwitchPoolNotFound);
			}

			let Some(switch_pair) = AssetSwitchPool1::switch_pair() else {
				return Err(AssetSwitchApiError::SwitchPoolNotSet);
			};

			let from_v4 = AccountId32ToAccountId32JunctionConverter::try_convert(from).map_err(|_| AssetSwitchApiError::Internal)?;
			let to_v4 = Location::try_from(to).map_err(|_| AssetSwitchApiError::Internal)?;
			let our_location_for_destination = {
				let universal_location = UniversalLocation::get();
				universal_location.invert_target(&to_v4)
			}.map_err(|_| AssetSwitchApiError::Internal)?;
			let asset_id_v4 = AssetId::try_from(switch_pair.remote_asset_id).map_err(|_| AssetSwitchApiError::Internal)?;
			let remote_asset_fee_v4 = Asset::try_from(switch_pair.remote_xcm_fee).map_err(|_| AssetSwitchApiError::Internal)?;

			Ok(VersionedXcm::V4(AssetSwitchPool1::compute_xcm_for_switch(&our_location_for_destination, &from_v4.into(), &to_v4, amount, &asset_id_v4, &remote_asset_fee_v4)))
		}
	}

	impl unique_linking_runtime_api::UniqueLinking<Block, LinkableAccountId, DotName, DidIdentifier> for Runtime {
		fn address_for_name(name: DotName) -> Option<AddressResult<LinkableAccountId, DidIdentifier>> {
			let Web3NameOwnership { owner, .. } = DotNames::owner(name)?;

			let (first_account, second_account) = {
				let mut owner_linked_accounts = pallet_did_lookup::ConnectedAccounts::<Runtime, UniqueLinkingDeployment>::iter_key_prefix(&owner);
				(owner_linked_accounts.next(), owner_linked_accounts.next())
			};
			let linked_account = match (first_account, second_account) {
				#[allow(clippy::panic)]
				(Some(_), Some(_)) => { panic!("More than a single account found for DID {:?}.", owner) },
				(first, _) => first
			}?;

			Some(AddressResult::new(linked_account, Some(owner)))
		}

		fn batch_address_for_name(names: Vec<DotName>) -> Vec<Option<AddressResult<LinkableAccountId, DidIdentifier>>> {
			names.into_iter().map(Self::address_for_name).collect()
		}

		fn name_for_address(address: LinkableAccountId) -> Option<NameResult<DotName, DidIdentifier>> {
			let ConnectionRecord { did, .. } = UniqueLinking::connected_dids(address)?;
			let name = DotNames::names(&did)?;

			Some(NameResult::new(name, Some(did)))
		}

		fn batch_name_for_address(addresses: Vec<LinkableAccountId>) -> Vec<Option<NameResult<DotName, DidIdentifier>>> {
			addresses.into_iter().map(Self::name_for_address).collect()
		}
	}

	impl pallet_bonded_coins_runtime_api::BondedCurrency<Block, Balance, AccountId, Operation<Balance>, AccountId, BondedAssetId, AssetId, FixedPointUnderlyingType, BondedCurrencyError> for Runtime {
		fn quote_for(
			pool_id: AccountId,
			currency_idx: u8,
			operation: Operation<Balance>,
		) -> Result<Balance, BondedCurrencyError> {
			let pool = Pools::<Runtime>::get(&pool_id).ok_or(BondedCurrencyError::PoolNotFound)?;
			let PoolDetailsOf::<Runtime> { bonded_currencies, .. } = pool;
			let currency_id = bonded_currencies.get(currency_idx.saturated_into::<usize>()).ok_or(BondedCurrencyError::CurrencyNotFound)?;


			let currency_supply = BondedFungibles::total_issuance(currency_id.to_owned());

			let (low, high, _) = match operation {
				Operation::Mint(amount) => (currency_supply, currency_supply.saturating_add(amount), Round::Up),
				Operation::Burn(amount) => (currency_supply.saturating_sub(amount), currency_supply, Round::Down),
			};

			Self::quote_for_low_and_high_bounds(pool_id, currency_idx, low, high)
		}

		fn quote_for_low_and_high_bounds(
			pool_id: AccountId,
			currency_idx: u8,
			low: Balance,
			high: Balance,
		) -> Result<Balance, BondedCurrencyError> {
			let pool = Pools::<Runtime>::get(pool_id).ok_or(BondedCurrencyError::PoolNotFound)?;
			let PoolDetailsOf::<Runtime> { curve, bonded_currencies, denomination, collateral, .. } = pool;
			let currency_id = bonded_currencies.get(currency_idx.saturated_into::<usize>()).ok_or(BondedCurrencyError::CurrencyNotFound)?;

			let collateral_denomination = NativeAndForeignAssets::decimals(collateral);

			let normalized_low = balance_to_fixed(low, denomination, Round::Down).map_err(|_| BondedCurrencyError::BalanceConversion)?;
			let normalized_high = balance_to_fixed(high, denomination, Round::Up).map_err(|_| BondedCurrencyError::BalanceConversion)?;

			let passive_supply = bonded_currencies
				.iter()
				.filter_map(|id| (id != currency_id).then_some(BondedFungibles::total_issuance(id.to_owned())))
				.map(|supply| balance_to_fixed(supply, denomination, Round::Up).map_err(|_| BondedCurrencyError::BalanceConversion))
				.collect::<Result<Vec<FixedPoint>, BondedCurrencyError>>()?;

			let normalized_collateral = curve.calculate_costs(normalized_low, normalized_high, passive_supply).map_err(|_| BondedCurrencyError::CalculationError)?;
			fixed_to_balance(normalized_collateral, collateral_denomination, Round::Up).map_err(|_| BondedCurrencyError::BalanceConversion)
		}

		fn query_pools_by_manager(account: AccountId) -> Vec<PoolDetails<AccountId, Balance, BondedAssetId, AssetId>> {
			Pools::<Runtime>::iter().filter_map(|(pool_id, pool)| {
				(pool.manager == Some(account.clone())).then(|| {
					// we can safe unwrap here. The pool was iterated over and is guaranteed to exist.
					#[allow(clippy::unwrap_used)]
					Self::pool_info(pool_id).unwrap()
				})
			}).collect()
		}

		fn query_pools_by_owner(account: AccountId) -> Vec<PoolDetails<AccountId, Balance, BondedAssetId, AssetId>> {
			Pools::<Runtime>::iter().filter_map(|(pool_id, pool)| {
				(pool.owner == account.clone()).then(|| {
					// we can safe unwrap here. The pool was iterated over and is guaranteed to exist.
					#[allow(clippy::unwrap_used)]
					Self::pool_info(pool_id).unwrap()
				})
			}).collect()
		}

		fn encode_curve_coefficient(coefficient_input: String) -> Result<Coefficient<FixedPointUnderlyingType>, BondedCurrencyError> {
			let coefficient = FixedPoint::from_str(&coefficient_input).map_err(|_| BondedCurrencyError::InvalidInput)?;
			let actual_coefficient = coefficient.to_string();
			let coefficient_bits = coefficient.to_bits();
			Ok(Coefficient {
				representation: actual_coefficient,
				bits: coefficient_bits,
			})
		}

		fn decode_curve_coefficient(bit_representation: FixedPointUnderlyingType) -> Result<String, BondedCurrencyError> {
			let coefficient = FixedPoint::from_bits(bit_representation);
			Ok(coefficient.to_string())
		}

		fn pool_info(pool_id: AccountId) -> Result<PoolDetails<AccountId, Balance, BondedAssetId, AssetId>, BondedCurrencyError> {
			let pool = Pools::<Runtime>::get(pool_id).ok_or(BondedCurrencyError::PoolNotFound)?;
			let PoolDetailsOf::<Runtime> {
				curve,
				bonded_currencies,
				owner,
				collateral,
				denomination,
				deposit,
				min_operation_balance,
				manager,
				state,
				transferable,
			} = pool;

			let currencies = bonded_currencies.iter().map(|currency_id| -> Result<BondedCurrencyDetails<BondedAssetId, Balance>, BondedCurrencyError> {
				// String conversation should never fail.
				let symbol = String::from_utf8(BondedFungibles::symbol(currency_id.to_owned())).map_err(|_| BondedCurrencyError::Internal)?;
				let name = String::from_utf8(<BondedFungibles as MetadataInspect<AccountId>>::name(currency_id.to_owned())).map_err(|_| BondedCurrencyError::Internal)?;
				let supply = BondedFungibles::total_issuance(currency_id.to_owned());
				Ok(BondedCurrencyDetails {
					id: currency_id.to_owned(),
					symbol,
					name,
					supply,
				})
			}).collect::<Result<Vec<_>, BondedCurrencyError>>()?;

			let collateral_details = CollateralDetails {
				id: AssetId(collateral.to_owned()),
				symbol: String::from_utf8(NativeAndForeignAssets::symbol(collateral.to_owned())).map_err(|_| BondedCurrencyError::Internal)?,
				name: String::from_utf8(NativeAndForeignAssets::name(collateral.to_owned())).map_err(|_| BondedCurrencyError::Internal)?,
				denomination: NativeAndForeignAssets::decimals(collateral),
			};

			let fmt_curve = match curve {
				Curve::Polynomial(params) => Curve::Polynomial(PolynomialParameters {
					m: params.m.to_string(),
					n: params.n.to_string(),
					o: params.o.to_string(),
				}),
				Curve::SquareRoot(params) => Curve::SquareRoot(SquareRootParameters {
					m: params.m.to_string(),
					n: params.n.to_string(),
				}),
				Curve::Lmsr(params) => Curve::Lmsr(LMSRParameters {
					m: params.m.to_string(),
				}),
			};

			Ok(PoolDetails {
				bonded_currencies: currencies,
				curve: fmt_curve,
				collateral: collateral_details,
				owner,
				denomination,
				deposit,
				min_operation_balance,
				manager,
				state,
				transferable,
			})
		}

		fn pool_infos(ids: Vec<AccountId>) -> Result<Vec<PoolDetails<AccountId, Balance, BondedAssetId, AssetId>>, BondedCurrencyError> {
			ids.into_iter().map(Self::pool_info).collect()
		}
	}


	#[cfg(feature = "runtime-benchmarks")]
	impl frame_benchmarking::Benchmark<Block> for Runtime {
		fn benchmark_metadata(extra: bool) -> (
			Vec<frame_benchmarking::BenchmarkList>,
			Vec<frame_support::traits::StorageInfo>,
		) {
			crate::benchmarks::benchmark_metadata(extra)
		}

		fn dispatch_benchmark(
			config: frame_benchmarking::BenchmarkConfig
		) -> Result<Vec<frame_benchmarking::BenchmarkBatch>, sp_runtime::RuntimeString> {
			crate::benchmarks::dispatch_benchmark(config)
		}
	}

	#[cfg(feature = "try-runtime")]
	impl frame_try_runtime::TryRuntime<Block> for Runtime {
		fn on_runtime_upgrade(checks: frame_try_runtime::UpgradeCheckSelect) -> (Weight, Weight) {
			log::info!("try-runtime::on_runtime_upgrade peregrine.");
			let weight = Executive::try_runtime_upgrade(checks).unwrap();
			(weight, runtime_common::BlockWeights::get().max_block)
		}

		fn execute_block(block: Block, state_root_check: bool, sig_check: bool, select: frame_try_runtime::TryStateSelect) -> Weight {
			log::info!(
				target: "runtime::peregrine", "try-runtime: executing block #{} ({:?}) / root checks: {:?} / sig check: {:?} / sanity-checks: {:?}",
				block.header.number,
				block.header.hash(),
				state_root_check,
				sig_check,
				select,
			);
			Executive::try_execute_block(block, state_root_check, sig_check, select).expect("try_execute_block failed")
		}
	}
}
