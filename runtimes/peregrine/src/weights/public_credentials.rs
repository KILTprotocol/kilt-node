// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for public_credentials
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=public-credentials
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/public_credentials.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `public_credentials`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> public_credentials::WeightInfo for WeightInfo<T> {
	// Storage: Ctype Ctypes (r:1 w:0)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: PublicCredentials CredentialSubjects (r:0 w:1)
	fn add(c: u32, ) -> Weight {
		Weight::from_ref_time(72_896_000 as u64)
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:0)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	fn revoke() -> Weight {
		Weight::from_ref_time(44_712_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:0)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	fn unrevoke() -> Weight {
		Weight::from_ref_time(45_216_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:1)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn remove() -> Weight {
		Weight::from_ref_time(70_155_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:1)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn reclaim_deposit() -> Weight {
		Weight::from_ref_time(69_197_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:0)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn change_deposit_owner() -> Weight {
		Weight::from_ref_time(87_565_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PublicCredentials CredentialSubjects (r:1 w:0)
	// Storage: PublicCredentials Credentials (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn update_deposit() -> Weight {
		Weight::from_ref_time(82_619_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
