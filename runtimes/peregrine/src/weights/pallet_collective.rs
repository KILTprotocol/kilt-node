// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-17, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// --chain
// dev
// --heap-pages
// 4096
// --extrinsic
// *
// --pallet
// pallet_collective
// --steps
// 50
// --repeat
// 20
// --execution
// wasm
// --wasm-execution
// Compiled
// --output
// runtimes/parachain/src/weights/pallet_collective.rs
// --template
// .maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for pallet_collective using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		0_u64
			// Standard Error: 9_000
			.saturating_add(22_047_000_u64.saturating_mul(m as Weight))
			// Standard Error: 9_000
			.saturating_add(30_782_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads(1_u64.saturating_mul(p as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64.saturating_mul(p as Weight)))
	}
	fn execute(b: u32, m: u32, ) -> Weight {
		32_788_000_u64
			// Standard Error: 0
			.saturating_add(3_000_u64.saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add(125_000_u64.saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		39_555_000_u64
			// Standard Error: 0
			.saturating_add(4_000_u64.saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add(253_000_u64.saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		63_419_000_u64
			// Standard Error: 0
			.saturating_add(8_000_u64.saturating_mul(b as Weight))
			// Standard Error: 1_000
			.saturating_add(127_000_u64.saturating_mul(m as Weight))
			// Standard Error: 1_000
			.saturating_add(673_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn vote(m: u32, ) -> Weight {
		60_438_000_u64
			// Standard Error: 4_000
			.saturating_add(195_000_u64.saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		63_084_000_u64
			// Standard Error: 1_000
			.saturating_add(259_000_u64.saturating_mul(m as Weight))
			// Standard Error: 1_000
			.saturating_add(638_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_early_approved(_b: u32, m: u32, p: u32, ) -> Weight {
		97_262_000_u64
			// Standard Error: 2_000
			.saturating_add(230_000_u64.saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add(600_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		69_824_000_u64
			// Standard Error: 0
			.saturating_add(267_000_u64.saturating_mul(m as Weight))
			// Standard Error: 0
			.saturating_add(646_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		93_197_000_u64
			// Standard Error: 0
			.saturating_add(5_000_u64.saturating_mul(b as Weight))
			// Standard Error: 1_000
			.saturating_add(263_000_u64.saturating_mul(m as Weight))
			// Standard Error: 1_000
			.saturating_add(656_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn disapprove_proposal(p: u32, ) -> Weight {
		38_898_000_u64
			// Standard Error: 1_000
			.saturating_add(651_000_u64.saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
