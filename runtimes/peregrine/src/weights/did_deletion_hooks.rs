// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `did_deletion_hooks`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2025-01-16, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=did-deletion-hooks
// --extrinsic=*
// --steps=2
// --repeat=1
// --default-pov-mode=ignored
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `did_deletion_hooks`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> did_deletion_hooks::WeightInfo for WeightInfo<T> {
	/// Storage: `Web3Names::Names` (r:1 w:0)
	/// Proof: `Web3Names::Names` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `Ignored`)
	fn read_web3_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2095`
		//  Estimated: `990`
		// Minimum execution time: 400_556_000 picoseconds.
		Weight::from_parts(400_556_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `DotNames::Names` (r:1 w:0)
	/// Proof: `DotNames::Names` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `Ignored`)
	fn read_dot_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2099`
		//  Estimated: `990`
		// Minimum execution time: 198_704_000 picoseconds.
		Weight::from_parts(198_704_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `DidLookup::ConnectedAccounts` (r:1 w:0)
	/// Proof: `DidLookup::ConnectedAccounts` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Ignored`)
	fn read_web3_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2102`
		//  Estimated: `990`
		// Minimum execution time: 219_041_000 picoseconds.
		Weight::from_parts(219_041_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `UniqueLinking::ConnectedAccounts` (r:1 w:0)
	/// Proof: `UniqueLinking::ConnectedAccounts` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `Ignored`)
	fn read_dot_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `165`
		//  Estimated: `990`
		// Minimum execution time: 90_472_000 picoseconds.
		Weight::from_parts(90_472_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_read_web3_name() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_read_dot_name() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_read_web3_account() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_read_dot_account() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
}
