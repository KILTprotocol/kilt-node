// TODO: UPDATE BEFORE RELEASE

// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `delegation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-05, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=2
// --repeat=1
// --chain=dev
// --pallet=delegation
// --extrinsic=*
// --output=./runtimes/peregrine/src/weights/delegation.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `delegation`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> delegation::WeightInfo for WeightInfo<T> {
	/// Storage: Delegation DelegationHierarchies (r:1 w:1)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Ctype Ctypes (r:1 w:0)
	/// Proof: Ctype Ctypes (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationNodes (r:0 w:1)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	fn create_hierarchy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `896`
		//  Estimated: `7725`
		// Minimum execution time: 47_954_000 picoseconds.
		Weight::from_parts(47_954_000, 0)
			.saturating_add(Weight::from_parts(0, 7725))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Delegation DelegationNodes (r:2 w:2)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn add_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1048`
		//  Estimated: `71957`
		// Minimum execution time: 29_016_000 picoseconds.
		Weight::from_parts(29_016_000, 0)
			.saturating_add(Weight::from_parts(0, 71957))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Delegation DelegationNodes (r:5 w:5)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationHierarchies (r:1 w:0)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_root_child(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234 + r * (272 ±0)`
		//  Estimated: `2555 + r * (34675 ±0)`
		// Minimum execution time: 55_112_000 picoseconds.
		Weight::from_parts(45_610_000, 0)
			.saturating_add(Weight::from_parts(0, 2555))
			// Standard Error: 1_405_342
			.saturating_add(Weight::from_parts(1_973_875, 0).saturating_mul(r.into()))
			// Standard Error: 1_405_342
			.saturating_add(Weight::from_parts(1_505_625, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: Delegation DelegationNodes (r:6 w:1)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationHierarchies (r:1 w:0)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_leaf(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439 + c * (272 ±0)`
		//  Estimated: `37230 + c * (34675 ±0)`
		// Minimum execution time: 23_670_000 picoseconds.
		Weight::from_parts(19_243_500, 0)
			.saturating_add(Weight::from_parts(0, 37230))
			// Standard Error: 36_806
			.saturating_add(Weight::from_parts(4_780_250, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: Delegation DelegationNodes (r:6 w:6)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationHierarchies (r:1 w:1)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 5]`.
	fn remove_delegation(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1117 + r * (272 ±0)`
		//  Estimated: `213212`
		// Minimum execution time: 45_358_000 picoseconds.
		Weight::from_parts(98_271_000, 0)
			.saturating_add(Weight::from_parts(0, 213212))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Delegation DelegationNodes (r:6 w:6)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationHierarchies (r:0 w:1)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 5]`.
	fn reclaim_deposit(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1049 + r * (272 ±0)`
		//  Estimated: `210657`
		// Minimum execution time: 39_837_000 picoseconds.
		Weight::from_parts(93_924_000, 0)
			.saturating_add(Weight::from_parts(0, 210657))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Delegation DelegationNodes (r:1 w:0)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: Delegation DelegationHierarchies (r:1 w:0)
	/// Proof: Delegation DelegationHierarchies (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	fn can_attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `645`
		//  Estimated: `37230`
		// Minimum execution time: 9_557_000 picoseconds.
		Weight::from_parts(9_557_000, 0)
			.saturating_add(Weight::from_parts(0, 37230))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: Delegation DelegationNodes (r:6 w:0)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 5]`.
	fn can_revoke(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371 + c * (272 ±0)`
		//  Estimated: `208050`
		// Minimum execution time: 9_070_000 picoseconds.
		Weight::from_parts(19_885_000, 0)
			.saturating_add(Weight::from_parts(0, 208050))
			.saturating_add(T::DbWeight::get().reads(6))
	}
	/// Storage: Delegation DelegationNodes (r:6 w:0)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 5]`.
	fn can_remove(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371 + c * (272 ±0)`
		//  Estimated: `208050`
		// Minimum execution time: 7_917_000 picoseconds.
		Weight::from_parts(21_239_000, 0)
			.saturating_add(Weight::from_parts(0, 208050))
			.saturating_add(T::DbWeight::get().reads(6))
	}
	/// Storage: Delegation DelegationNodes (r:1 w:1)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn change_deposit_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1696`
		//  Estimated: `39889`
		// Minimum execution time: 37_144_000 picoseconds.
		Weight::from_parts(37_144_000, 0)
			.saturating_add(Weight::from_parts(0, 39889))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Delegation DelegationNodes (r:1 w:1)
	/// Proof: Delegation DelegationNodes (max_values: None, max_size: Some(32200), added: 34675, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn update_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1117`
		//  Estimated: `37282`
		// Minimum execution time: 30_540_000 picoseconds.
		Weight::from_parts(30_540_000, 0)
			.saturating_add(Weight::from_parts(0, 37282))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_hierarchy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7725
		);
	}
	#[test]
	fn test_add_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 71957
		);
	}
	#[test]
	fn test_revoke_delegation_root_child() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2555
		);
	}
	#[test]
	fn test_revoke_delegation_leaf() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 37230
		);
	}
	#[test]
	fn test_remove_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 213212
		);
	}
	#[test]
	fn test_reclaim_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 210657
		);
	}
	#[test]
	fn test_can_attest() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 37230
		);
	}
	#[test]
	fn test_can_revoke() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 208050
		);
	}
	#[test]
	fn test_can_remove() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 208050
		);
	}
	#[test]
	fn test_change_deposit_owner() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 39889
		);
	}
	#[test]
	fn test_update_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 37282
		);
	}
}
