// KILT Blockchain – <https://kilt.io>
// Copyright (C) 2025, KILT Foundation

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at <hello@kilt.org>

//! Autogenerated weights for `delegation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2025-02-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=delegation
// --extrinsic=*
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `delegation`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> delegation::WeightInfo for WeightInfo<T> {
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Ctype::Ctypes` (r:1 w:0)
	/// Proof: `Ctype::Ctypes` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationNodes` (r:0 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:0 w:1)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn create_hierarchy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `363`
		//  Estimated: `3712`
		// Minimum execution time: 54_401_000 picoseconds.
		Weight::from_parts(55_252_000, 0)
			.saturating_add(Weight::from_parts(0, 3712))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:2 w:2)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:0 w:1)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502`
		//  Estimated: `70340`
		// Minimum execution time: 58_779_000 picoseconds.
		Weight::from_parts(59_946_000, 0)
			.saturating_add(Weight::from_parts(0, 70340))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:5 w:5)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_root_child(r: u32, _c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `241 + r * (239 ±0)`
		//  Estimated: `3545 + r * (34675 ±0)`
		// Minimum execution time: 24_281_000 picoseconds.
		Weight::from_parts(16_453_214, 0)
			.saturating_add(Weight::from_parts(0, 3545))
			// Standard Error: 16_113
			.saturating_add(Weight::from_parts(9_242_660, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_leaf(_r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `414 + c * (239 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 27_841_000 picoseconds.
		Weight::from_parts(25_856_371, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 15_622
			.saturating_add(Weight::from_parts(4_060_541, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:6)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:6 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	fn remove_delegation(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `651 + r * (294 ±0)`
		//  Estimated: `35665 + r * (34675 ±0)`
		// Minimum execution time: 95_968_000 picoseconds.
		Weight::from_parts(62_272_054, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 56_702
			.saturating_add(Weight::from_parts(36_374_988, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:6)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:6 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:0 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	fn reclaim_deposit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `583 + r * (294 ±0)`
		//  Estimated: `35665 + r * (34675 ±0)`
		// Minimum execution time: 90_905_000 picoseconds.
		Weight::from_parts(57_503_275, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 59_017
			.saturating_add(Weight::from_parts(36_498_975, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn can_attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `35665`
		// Minimum execution time: 11_900_000 picoseconds.
		Weight::from_parts(12_175_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn can_revoke(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (240 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(8_060_263, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 18_332
			.saturating_add(Weight::from_parts(3_573_677, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn can_remove(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (240 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 11_191_000 picoseconds.
		Weight::from_parts(8_046_738, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 16_728
			.saturating_add(Weight::from_parts(3_577_328, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:1 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn change_deposit_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829`
		//  Estimated: `35665`
		// Minimum execution time: 86_703_000 picoseconds.
		Weight::from_parts(87_804_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:1 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	fn update_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `685`
		//  Estimated: `35665`
		// Minimum execution time: 75_848_000 picoseconds.
		Weight::from_parts(76_875_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_hierarchy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3712
		);
	}
	#[test]
	fn test_add_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 70340
		);
	}
	#[test]
	fn test_revoke_delegation_root_child() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3545
		);
	}
	#[test]
	fn test_revoke_delegation_leaf() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_remove_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_reclaim_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_attest() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_revoke() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_remove() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_change_deposit_owner() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_update_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
}
