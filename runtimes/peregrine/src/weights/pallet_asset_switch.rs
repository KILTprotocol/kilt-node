// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `pallet_asset_switch`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 27.0.0
//! DATE: 2024-07-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/debug/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=50
// --repeat=20
// --chain
// dev
// --pallet
// pallet-asset-switch
// --extrinsic=*
// --output
// ./runtimes/peregrine/src/weights/pallet_asset_switch.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_asset_switch`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_asset_switch::WeightInfo for WeightInfo<T> {
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	fn set_switch_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `3597`
		// Minimum execution time: 193_704_000 picoseconds.
		Weight::from_parts(195_448_000, 0)
			.saturating_add(Weight::from_parts(0, 3597))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:0 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_set_switch_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 120_801_000 picoseconds.
		Weight::from_parts(122_925_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_unset_switch_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 142_021_000 picoseconds.
		Weight::from_parts(146_796_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn pause_switch_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 97_794_000 picoseconds.
		Weight::from_parts(101_416_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn resume_switch_pair() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 146_330_000 picoseconds.
		Weight::from_parts(150_553_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_remote_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 101_832_000 picoseconds.
		Weight::from_parts(105_532_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetSwitchPool1::SwitchPair` (r:1 w:1)
	/// Proof: `AssetSwitchPool1::SwitchPair` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::VersionDiscoveryQueue` (r:1 w:1)
	/// Proof: `PolkadotXcm::VersionDiscoveryQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SafeXcmVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SafeXcmVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	fn switch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `837`
		//  Estimated: `6204`
		// Minimum execution time: 1_247_566_000 picoseconds.
		Weight::from_parts(1_263_575_000, 0)
			.saturating_add(Weight::from_parts(0, 6204))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(6))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_set_switch_pair() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3597
		);
	}
	#[test]
	fn test_force_unset_switch_pair() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1657
		);
	}
	#[test]
	fn test_pause_switch_pair() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1657
		);
	}
	#[test]
	fn test_resume_switch_pair() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1657
		);
	}
	#[test]
	fn test_update_remote_fee() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1657
		);
	}
	#[test]
	fn test_switch() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6204
		);
	}
}
