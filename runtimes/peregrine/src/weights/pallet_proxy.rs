// TODO: UPDATE BEFORE RELEASE

// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-05, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=2
// --repeat=1
// --chain=dev
// --pallet=pallet-proxy
// --extrinsic=*
// --output=./runtimes/peregrine/src/weights/pallet_proxy.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 9]`.
	fn proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157 + p * (41 ±0)`
		//  Estimated: `2942`
		// Minimum execution time: 12_704_000 picoseconds.
		Weight::from_parts(29_948_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(777), added: 3252, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn proxy_announced(a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1030 + a * (72 ±0) + p * (36 ±0)`
		//  Estimated: `8801`
		// Minimum execution time: 24_956_000 picoseconds.
		Weight::from_parts(27_782_000, 0)
			.saturating_add(Weight::from_parts(0, 8801))
			// Standard Error: 135_484
			.saturating_add(Weight::from_parts(91_444, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(777), added: 3252, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn remove_announcement(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `914 + a * (72 ±0)`
		//  Estimated: `5859`
		// Minimum execution time: 15_305_000 picoseconds.
		Weight::from_parts(6_257_750, 0)
			.saturating_add(Weight::from_parts(0, 5859))
			// Standard Error: 1_442_028
			.saturating_add(Weight::from_parts(1_233_222, 0).saturating_mul(a.into()))
			// Standard Error: 1_622_282
			.saturating_add(Weight::from_parts(1_005_250, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(777), added: 3252, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn reject_announcement(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `914 + a * (72 ±0)`
		//  Estimated: `5859`
		// Minimum execution time: 16_251_000 picoseconds.
		Weight::from_parts(15_515_250, 0)
			.saturating_add(Weight::from_parts(0, 5859))
			// Standard Error: 226_898
			.saturating_add(Weight::from_parts(167_444, 0).saturating_mul(a.into()))
			// Standard Error: 255_260
			.saturating_add(Weight::from_parts(81_750, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(777), added: 3252, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn announce(a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845 + a * (84 ±0) + p * (36 ±0)`
		//  Estimated: `8801`
		// Minimum execution time: 21_923_000 picoseconds.
		Weight::from_parts(23_891_750, 0)
			.saturating_add(Weight::from_parts(0, 8801))
			// Standard Error: 29_829
			.saturating_add(Weight::from_parts(56_333, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 9]`.
	fn add_proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157 + p * (41 ±0)`
		//  Estimated: `2942`
		// Minimum execution time: 16_324_000 picoseconds.
		Weight::from_parts(17_500_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 9]`.
	fn remove_proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157 + p * (41 ±0)`
		//  Estimated: `2942`
		// Minimum execution time: 16_361_000 picoseconds.
		Weight::from_parts(17_081_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 9]`.
	fn remove_proxies(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `157 + p * (41 ±0)`
		//  Estimated: `2942`
		// Minimum execution time: 13_751_000 picoseconds.
		Weight::from_parts(13_935_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 9]`.
	fn create_pure(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `2942`
		// Minimum execution time: 17_166_000 picoseconds.
		Weight::from_parts(17_340_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(467), added: 2942, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 8]`.
	fn kill_pure(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `199 + p * (41 ±0)`
		//  Estimated: `2942`
		// Minimum execution time: 13_311_000 picoseconds.
		Weight::from_parts(14_085_000, 0)
			.saturating_add(Weight::from_parts(0, 2942))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
	#[test]
	fn test_proxy_announced() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 8801
		);
	}
	#[test]
	fn test_remove_announcement() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5859
		);
	}
	#[test]
	fn test_reject_announcement() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5859
		);
	}
	#[test]
	fn test_announce() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 8801
		);
	}
	#[test]
	fn test_add_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
	#[test]
	fn test_remove_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
	#[test]
	fn test_remove_proxies() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
	#[test]
	fn test_create_pure() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
	#[test]
	fn test_kill_pure() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 2942
		);
	}
}
