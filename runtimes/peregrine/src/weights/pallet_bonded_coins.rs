// KILT Blockchain – <https://kilt.io>
// Copyright (C) 2025, KILT Foundation

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at <hello@kilt.org>

//! Autogenerated weights for `pallet_bonded_coins`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2025-02-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=pallet-bonded-coins
// --extrinsic=*
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bonded_coins`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bonded_coins::WeightInfo for WeightInfo<T> {
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:1)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 82_782_000 picoseconds.
		Weight::from_parts(74_589_175, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 5_075
			.saturating_add(Weight::from_parts(9_887_972, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:1)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 82_530_000 picoseconds.
		Weight::from_parts(73_527_345, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 48_221
			.saturating_add(Weight::from_parts(9_967_477, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:1)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 82_413_000 picoseconds.
		Weight::from_parts(76_013_997, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 44_915
			.saturating_add(Weight::from_parts(9_858_124, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `4459`
		// Minimum execution time: 22_809_000 picoseconds.
		Weight::from_parts(23_130_000, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `4459`
		// Minimum execution time: 14_310_000 picoseconds.
		Weight::from_parts(14_550_000, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `4459`
		// Minimum execution time: 14_142_000 picoseconds.
		Weight::from_parts(14_379_000, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273`
		//  Estimated: `4459`
		// Minimum execution time: 13_957_000 picoseconds.
		Weight::from_parts(14_362_000, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 86_345_000 picoseconds.
		Weight::from_parts(85_905_344, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 5_433
			.saturating_add(Weight::from_parts(2_671_401, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 147_517_000 picoseconds.
		Weight::from_parts(147_622_666, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 5_955
			.saturating_add(Weight::from_parts(2_659_426, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `904 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 88_034_000 picoseconds.
		Weight::from_parts(64_253_807, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 38_531
			.saturating_add(Weight::from_parts(40_527_526, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 105_462_000 picoseconds.
		Weight::from_parts(105_869_669, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 5_171
			.saturating_add(Weight::from_parts(2_656_484, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 223_148_000 picoseconds.
		Weight::from_parts(227_304_638, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 48_368
			.saturating_add(Weight::from_parts(2_604_185, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `935 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 107_219_000 picoseconds.
		Weight::from_parts(55_631_118, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 183_977
			.saturating_add(Weight::from_parts(105_531_702, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347 + c * (221 ±0)`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 29_354_000 picoseconds.
		Weight::from_parts(27_462_185, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 7_254
			.saturating_add(Weight::from_parts(6_129_077, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273 + c * (221 ±0)`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 25_098_000 picoseconds.
		Weight::from_parts(22_429_750, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 7_401
			.saturating_add(Weight::from_parts(6_156_103, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:0)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:1)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(247), added: 2722, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `664 + c * (221 ±0)`
		//  Estimated: `4459 + c * (2685 ±0)`
		// Minimum execution time: 71_509_000 picoseconds.
		Weight::from_parts(67_710_484, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 8_701
			.saturating_add(Weight::from_parts(7_374_140, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `983 + c * (12 ±0)`
		//  Estimated: `4459`
		// Minimum execution time: 26_153_000 picoseconds.
		Weight::from_parts(28_347_980, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 1_163
			.saturating_add(Weight::from_parts(55_144, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `918 + c * (12 ±0)`
		//  Estimated: `4459`
		// Minimum execution time: 26_673_000 picoseconds.
		Weight::from_parts(28_656_570, 0)
			.saturating_add(Weight::from_parts(0, 4459))
			// Standard Error: 1_154
			.saturating_add(Weight::from_parts(47_769, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(994), added: 3469, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn refund_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `935 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 109_265_000 picoseconds.
		Weight::from_parts(109_100_578, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 5_670
			.saturating_add(Weight::from_parts(2_609_751, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_pool_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_create_pool_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_create_pool_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_reset_team() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_reset_manager() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_set_lock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_unlock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_mint_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_force_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_finish_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_force_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4459
		);
	}
	#[test]
	fn test_refund_account() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
}
