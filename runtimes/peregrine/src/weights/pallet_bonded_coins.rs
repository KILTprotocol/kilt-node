// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `pallet_bonded_coins`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-11-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=pallet-bonded-coins
// --extrinsic=*
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bonded_coins`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bonded_coins::WeightInfo for WeightInfo<T> {
	/// Storage: `BondedCurrencies::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCurrencies::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Pools` (r:0 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `4273 + c * (2685 ±0)`
		// Minimum execution time: 43_873_000 picoseconds.
		Weight::from_parts(39_421_152, 0)
			.saturating_add(Weight::from_parts(0, 4273))
			// Standard Error: 14_474
			.saturating_add(Weight::from_parts(6_295_882, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCurrencies::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Pools` (r:0 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `4273 + c * (2685 ±0)`
		// Minimum execution time: 43_983_000 picoseconds.
		Weight::from_parts(40_277_345, 0)
			.saturating_add(Weight::from_parts(0, 4273))
			// Standard Error: 14_567
			.saturating_add(Weight::from_parts(6_239_888, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCurrencies::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Pools` (r:0 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `4273 + c * (2685 ±0)`
		// Minimum execution time: 42_177_000 picoseconds.
		Weight::from_parts(42_240_143, 0)
			.saturating_add(Weight::from_parts(0, 4273))
			// Standard Error: 36_961
			.saturating_add(Weight::from_parts(6_287_254, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `535`
		//  Estimated: `4443`
		// Minimum execution time: 10_928_000 picoseconds.
		Weight::from_parts(11_491_000, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `4443`
		// Minimum execution time: 6_171_000 picoseconds.
		Weight::from_parts(6_652_000, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `4443`
		// Minimum execution time: 6_336_000 picoseconds.
		Weight::from_parts(6_662_000, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `257`
		//  Estimated: `4443`
		// Minimum execution time: 6_670_000 picoseconds.
		Weight::from_parts(6_959_000, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 50_842_000 picoseconds.
		Weight::from_parts(49_324_659, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 6_548
			.saturating_add(Weight::from_parts(1_841_027, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `904 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 85_145_000 picoseconds.
		Weight::from_parts(86_694_260, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 8_592
			.saturating_add(Weight::from_parts(1_789_314, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `888 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 50_361_000 picoseconds.
		Weight::from_parts(40_047_834, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 40_577
			.saturating_add(Weight::from_parts(21_995_638, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `951 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 62_249_000 picoseconds.
		Weight::from_parts(64_914_622, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 7_210
			.saturating_add(Weight::from_parts(1_757_444, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `935 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 121_427_000 picoseconds.
		Weight::from_parts(129_487_545, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 11_788
			.saturating_add(Weight::from_parts(1_730_380, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 61_435_000 picoseconds.
		Weight::from_parts(59_579_661, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 119_625
			.saturating_add(Weight::from_parts(54_327_998, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331 + c * (221 ±0)`
		//  Estimated: `4443 + c * (2685 ±0)`
		// Minimum execution time: 14_314_000 picoseconds.
		Weight::from_parts(13_371_473, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			// Standard Error: 8_501
			.saturating_add(Weight::from_parts(3_998_524, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `257 + c * (221 ±0)`
		//  Estimated: `4443 + c * (2685 ±0)`
		// Minimum execution time: 11_754_000 picoseconds.
		Weight::from_parts(10_155_072, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			// Standard Error: 8_562
			.saturating_add(Weight::from_parts(3_986_961, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:0)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462 + c * (221 ±0)`
		//  Estimated: `4443 + c * (2685 ±0)`
		// Minimum execution time: 32_123_000 picoseconds.
		Weight::from_parts(29_869_399, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			// Standard Error: 12_268
			.saturating_add(Weight::from_parts(4_934_515, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967 + c * (12 ±0)`
		//  Estimated: `4443`
		// Minimum execution time: 13_364_000 picoseconds.
		Weight::from_parts(14_713_024, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			// Standard Error: 1_227
			.saturating_add(Weight::from_parts(54_572, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `902 + c * (12 ±0)`
		//  Estimated: `4443`
		// Minimum execution time: 13_807_000 picoseconds.
		Weight::from_parts(15_020_098, 0)
			.saturating_add(Weight::from_parts(0, 4443))
			// Standard Error: 1_489
			.saturating_add(Weight::from_parts(57_029, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(978), added: 3453, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn refund_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 64_612_000 picoseconds.
		Weight::from_parts(67_254_926, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 7_576
			.saturating_add(Weight::from_parts(1_730_580, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_pool_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4273
		);
	}
	#[test]
	fn test_create_pool_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4273
		);
	}
	#[test]
	fn test_create_pool_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4273
		);
	}
	#[test]
	fn test_reset_team() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_reset_manager() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_set_lock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_unlock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_mint_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_force_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_finish_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_force_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4443
		);
	}
	#[test]
	fn test_refund_account() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
}
