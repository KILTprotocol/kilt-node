// KILT Blockchain – <https://kilt.io>
// Copyright (C) 2025, KILT Foundation

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at <hello@kilt.io>

//! Autogenerated weights for `pallet_bonded_coins`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --pallet=pallet-bonded-coins
// --extrinsic=*
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/peregrine-runtime/peregrine_runtime.compact.compressed.wasm
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bonded_coins`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bonded_coins::WeightInfo for WeightInfo<T> {
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:0)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::NextAssetId` (r:1 w:0)
	/// Proof: `BondedFungibles::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 101_571_000 picoseconds.
		Weight::from_parts(90_655_196, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 10_808
			.saturating_add(Weight::from_parts(16_055_119, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:0)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::NextAssetId` (r:1 w:0)
	/// Proof: `BondedFungibles::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 101_555_000 picoseconds.
		Weight::from_parts(88_995_398, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 14_441
			.saturating_add(Weight::from_parts(16_121_364, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x674f0d0209e669dc31e0072641931150641315ccb80c166ca75d4dea3e9be88c` (r:1 w:1)
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:0)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:1)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::NextAssetId` (r:1 w:0)
	/// Proof: `BondedFungibles::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:50)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 102_528_000 picoseconds.
		Weight::from_parts(89_309_328, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 12_049
			.saturating_add(Weight::from_parts(16_135_757, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:0)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn reset_team(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `338 + c * (221 ±0)`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 51_198_000 picoseconds.
		Weight::from_parts(42_886_705, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 37_253
			.saturating_add(Weight::from_parts(21_223_852, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272`
		//  Estimated: `4460`
		// Minimum execution time: 22_679_000 picoseconds.
		Weight::from_parts(22_986_000, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272`
		//  Estimated: `4460`
		// Minimum execution time: 22_681_000 picoseconds.
		Weight::from_parts(23_019_000, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274`
		//  Estimated: `4460`
		// Minimum execution time: 22_383_000 picoseconds.
		Weight::from_parts(22_833_000, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `971 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 121_505_000 picoseconds.
		Weight::from_parts(121_499_606, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 6_200
			.saturating_add(Weight::from_parts(3_892_831, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `955 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 148_339_000 picoseconds.
		Weight::from_parts(147_778_268, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 7_553
			.saturating_add(Weight::from_parts(3_899_766, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 122_450_000 picoseconds.
		Weight::from_parts(117_489_973, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 19_224
			.saturating_add(Weight::from_parts(17_101_695, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1002 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 149_039_000 picoseconds.
		Weight::from_parts(148_258_263, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 6_478
			.saturating_add(Weight::from_parts(3_913_426, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `986 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 198_738_000 picoseconds.
		Weight::from_parts(197_321_848, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 8_675
			.saturating_add(Weight::from_parts(3_941_452, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Metadata` (r:1 w:0)
	/// Proof: `Fungibles::Metadata` (`max_values`: None, `max_size`: Some(646), added: 3121, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 150_406_000 picoseconds.
		Weight::from_parts(124_519_022, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 35_406
			.saturating_add(Weight::from_parts(53_718_531, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `382 + c * (221 ±0)`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 45_599_000 picoseconds.
		Weight::from_parts(41_207_981, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 5_951
			.saturating_add(Weight::from_parts(9_450_453, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274 + c * (221 ±0)`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 40_117_000 picoseconds.
		Weight::from_parts(36_232_747, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 8_078
			.saturating_add(Weight::from_parts(9_372_228, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:50)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Metadata` (r:50 w:0)
	/// Proof: `BondedFungibles::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `DepositStorage::SystemDeposits` (r:1 w:1)
	/// Proof: `DepositStorage::SystemDeposits` (`max_values`: None, `max_size`: Some(119), added: 2594, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `499 + c * (221 ±0)`
		//  Estimated: `4460 + c * (2685 ±0)`
		// Minimum execution time: 63_656_000 picoseconds.
		Weight::from_parts(60_155_264, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 12_485
			.saturating_add(Weight::from_parts(11_436_238, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1018 + c * (12 ±0)`
		//  Estimated: `4460`
		// Minimum execution time: 40_526_000 picoseconds.
		Weight::from_parts(43_404_498, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 4_683
			.saturating_add(Weight::from_parts(65_690, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:1)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:1 w:0)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:1 w:0)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `953 + c * (12 ±0)`
		//  Estimated: `4460`
		// Minimum execution time: 40_976_000 picoseconds.
		Weight::from_parts(43_830_653, 0)
			.saturating_add(Weight::from_parts(0, 4460))
			// Standard Error: 1_475
			.saturating_add(Weight::from_parts(56_425, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `BondedCurrencies::Pools` (r:1 w:0)
	/// Proof: `BondedCurrencies::Pools` (`max_values`: None, `max_size`: Some(995), added: 3470, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Account` (r:2 w:2)
	/// Proof: `Fungibles::Account` (`max_values`: None, `max_size`: Some(732), added: 3207, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Asset` (r:50 w:1)
	/// Proof: `BondedFungibles::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedFungibles::Account` (r:1 w:1)
	/// Proof: `BondedFungibles::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Fungibles::Asset` (r:1 w:1)
	/// Proof: `Fungibles::Asset` (`max_values`: None, `max_size`: Some(808), added: 3283, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn refund_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970 + c * (221 ±0)`
		//  Estimated: `7404 + c * (2685 ±0)`
		// Minimum execution time: 157_344_000 picoseconds.
		Weight::from_parts(156_804_747, 0)
			.saturating_add(Weight::from_parts(0, 7404))
			// Standard Error: 5_368
			.saturating_add(Weight::from_parts(3_828_001, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_pool_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_create_pool_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_create_pool_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_reset_team() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_reset_manager() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_set_lock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_unlock() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_mint_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_mint_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_polynomial() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_square_root() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_burn_into_lmsr() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
	#[test]
	fn test_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_force_start_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_finish_destroy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_force_start_refund() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4460
		);
	}
	#[test]
	fn test_refund_account() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7404
		);
	}
}
