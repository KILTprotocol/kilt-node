// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-04, STEPS: `[1, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=did
// --steps=1
// --repeat=20
// --output
// runtimes/peregrine/src/weights/did.rs
// --template
// .maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for did using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> did::WeightInfo for WeightInfo<T> {
	fn create_ed25519_keys(n: u32, u: u32, ) -> Weight {
		(125_979_000_u64)
			// Standard Error: 84_000
			.saturating_add((2_372_000_u64).saturating_mul(n as Weight))
			// Standard Error: 3_000
			.saturating_add((8_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn create_sr25519_keys(n: u32, u: u32, ) -> Weight {
		(124_731_000_u64)
			// Standard Error: 57_000
			.saturating_add((2_682_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_000
			.saturating_add((13_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn create_ecdsa_keys(n: u32, u: u32, ) -> Weight {
		(262_279_000_u64)
			// Standard Error: 209_000
			.saturating_add((1_404_000_u64).saturating_mul(n as Weight))
			// Standard Error: 9_000
			.saturating_add((2_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_ed25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(39_215_000_u64)
			// Standard Error: 46_000
			.saturating_add((4_467_000_u64).saturating_mul(n as Weight))
			// Standard Error: 46_000
			.saturating_add((2_842_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_sr25519_keys(n: u32, m: u32, u: u32, ) -> Weight {
		(32_203_000_u64)
			// Standard Error: 145_000
			.saturating_add((4_900_000_u64).saturating_mul(n as Weight))
			// Standard Error: 145_000
			.saturating_add((3_101_000_u64).saturating_mul(m as Weight))
			// Standard Error: 6_000
			.saturating_add((18_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_ecdsa_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(48_996_000_u64)
			// Standard Error: 128_000
			.saturating_add((4_504_000_u64).saturating_mul(n as Weight))
			// Standard Error: 128_000
			.saturating_add((2_235_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn delete() -> Weight {
		(32_491_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ed25519_key() -> Weight {
		(112_430_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_sr25519_key() -> Weight {
		(114_584_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ecdsa_key() -> Weight {
		(234_789_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}