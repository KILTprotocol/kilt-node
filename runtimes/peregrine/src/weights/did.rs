// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-05, STEPS: `[1, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=did
// --steps=1
// --repeat=20
// --output
// runtimes/peregrine/src/weights/did.rs
// --template
// .maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for did using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> did::WeightInfo for WeightInfo<T> {
	fn create_ed25519_keys(n: u32, u: u32, c: u32, ) -> Weight {
		(119_310_000_u64)
			// Standard Error: 23_000
			.saturating_add((2_712_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_000
			.saturating_add((22_000_u64).saturating_mul(u as Weight))
			// Standard Error: 104_000
			.saturating_add((2_170_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn create_sr25519_keys(n: u32, u: u32, _c: u32, ) -> Weight {
		(135_322_000_u64)
			// Standard Error: 96_000
			.saturating_add((2_885_000_u64).saturating_mul(n as Weight))
			// Standard Error: 4_000
			.saturating_add((26_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn create_ecdsa_keys(n: u32, u: u32, c: u32, ) -> Weight {
		(252_507_000_u64)
			// Standard Error: 111_000
			.saturating_add((2_516_000_u64).saturating_mul(n as Weight))
			// Standard Error: 5_000
			.saturating_add((4_000_u64).saturating_mul(u as Weight))
			// Standard Error: 502_000
			.saturating_add((1_663_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_ed25519_keys(n: u32, m: u32, u: u32, c: u32, ) -> Weight {
		(46_422_000_u64)
			// Standard Error: 52_000
			.saturating_add((4_590_000_u64).saturating_mul(n as Weight))
			// Standard Error: 52_000
			.saturating_add((2_147_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add((2_000_u64).saturating_mul(u as Weight))
			// Standard Error: 237_000
			.saturating_add((1_038_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_sr25519_keys(n: u32, m: u32, u: u32, c: u32, ) -> Weight {
		(43_904_000_u64)
			// Standard Error: 47_000
			.saturating_add((4_510_000_u64).saturating_mul(n as Weight))
			// Standard Error: 47_000
			.saturating_add((2_511_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add((2_000_u64).saturating_mul(u as Weight))
			// Standard Error: 213_000
			.saturating_add((893_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn update_ecdsa_keys(n: u32, m: u32, u: u32, _c: u32, ) -> Weight {
		(47_917_000_u64)
			// Standard Error: 79_000
			.saturating_add((4_531_000_u64).saturating_mul(n as Weight))
			// Standard Error: 79_000
			.saturating_add((2_648_000_u64).saturating_mul(m as Weight))
			// Standard Error: 3_000
			.saturating_add((6_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn delete() -> Weight {
		(33_142_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ed25519_key() -> Weight {
		(113_963_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_sr25519_key() -> Weight {
		(117_320_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ecdsa_key() -> Weight {
		(241_051_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}