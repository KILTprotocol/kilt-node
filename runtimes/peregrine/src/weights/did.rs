// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-23, STEPS: `[1, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=did
// --steps=1
// --repeat=20
// --output
// runtimes/peregrine/src/weights/did.rs
// --template
// .maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for did using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> did::WeightInfo for WeightInfo<T> {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32, ) -> Weight {
		(125_019_000_u64)
			// Standard Error: 238_000
			.saturating_add((3_633_000_u64).saturating_mul(n as Weight))
			// Standard Error: 11_000
			.saturating_add((22_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32, ) -> Weight {
		(135_504_000_u64)
			// Standard Error: 229_000
			.saturating_add((3_162_000_u64).saturating_mul(n as Weight))
			// Standard Error: 10_000
			.saturating_add((23_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_ecdsa_keys(n: u32, u: u32, ) -> Weight {
		(271_370_000_u64)
			// Standard Error: 293_000
			.saturating_add((3_211_000_u64).saturating_mul(n as Weight))
			// Standard Error: 13_000
			.saturating_add((43_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(131_919_000_u64)
			// Standard Error: 316_000
			.saturating_add((4_751_000_u64).saturating_mul(n as Weight))
			// Standard Error: 316_000
			.saturating_add((4_037_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(161_713_000_u64)
			// Standard Error: 318_000
			.saturating_add((4_679_000_u64).saturating_mul(n as Weight))
			// Standard Error: 318_000
			.saturating_add((2_747_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ecdsa_keys(n: u32, m: u32, u: u32, ) -> Weight {
		(234_806_000_u64)
			// Standard Error: 517_000
			.saturating_add((5_536_000_u64).saturating_mul(n as Weight))
			// Standard Error: 517_000
			.saturating_add((4_204_000_u64).saturating_mul(m as Weight))
			// Standard Error: 24_000
			.saturating_add((72_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_delete_operation() -> Weight {
		(111_799_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ed25519_key() -> Weight {
		(117_500_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_sr25519_key() -> Weight {
		(128_541_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ecdsa_key() -> Weight {
		(255_939_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}