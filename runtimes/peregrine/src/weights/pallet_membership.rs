// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-membership
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/pallet_membership.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Proposals (r:1 w:0)
	// Proof Skipped: TechnicalCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Members (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn add_member(m: u32, ) -> Weight {
		Weight::from_ref_time(23_197_344 as u64)
			// Standard Error: 7_059
			.saturating_add(Weight::from_ref_time(50_856 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Proposals (r:1 w:0)
	// Proof Skipped: TechnicalCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Members (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_member(m: u32, ) -> Weight {
		Weight::from_ref_time(25_991_288 as u64)
			// Standard Error: 7_969
			.saturating_add(Weight::from_ref_time(43_946 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Proposals (r:1 w:0)
	// Proof Skipped: TechnicalCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Members (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn swap_member(m: u32, ) -> Weight {
		Weight::from_ref_time(25_040_379 as u64)
			// Standard Error: 7_408
			.saturating_add(Weight::from_ref_time(61_495 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Proposals (r:1 w:0)
	// Proof Skipped: TechnicalCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalMembership Prime (r:1 w:0)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Members (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn reset_member(m: u32, ) -> Weight {
		Weight::from_ref_time(24_983_917 as u64)
			// Standard Error: 10_214
			.saturating_add(Weight::from_ref_time(245_946 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: TechnicalMembership Members (r:1 w:1)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Proposals (r:1 w:0)
	// Proof Skipped: TechnicalCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalMembership Prime (r:1 w:1)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Members (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn change_key(m: u32, ) -> Weight {
		Weight::from_ref_time(31_028_415 as u64)
			// Standard Error: 9_152
			.saturating_add(Weight::from_ref_time(10_354 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: TechnicalMembership Members (r:1 w:0)
	// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	// Storage: TechnicalMembership Prime (r:0 w:1)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn set_prime(m: u32, ) -> Weight {
		Weight::from_ref_time(10_884_242 as u64)
			// Standard Error: 3_029
			.saturating_add(Weight::from_ref_time(28_843 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: TechnicalMembership Prime (r:0 w:1)
	// Proof: TechnicalMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: TechnicalCommittee Prime (r:0 w:1)
	// Proof Skipped: TechnicalCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn clear_prime(m: u32, ) -> Weight {
		Weight::from_ref_time(5_054_192 as u64)
			// Standard Error: 1_457
			.saturating_add(Weight::from_ref_time(509 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
