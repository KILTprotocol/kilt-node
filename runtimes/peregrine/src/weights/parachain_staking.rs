// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(9_317_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(13_291_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(37_765_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(5_216_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(686_764_000 as u64)
			// Standard Error: 4_700_784
			.saturating_add(Weight::from_ref_time(148_374_298 as u64).saturating_mul(n as u64))
			// Standard Error: 10_092_481
			.saturating_add(Weight::from_ref_time(278_471_830 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(152 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(145 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:59 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(35_774_000 as u64)
			// Standard Error: 22_455
			.saturating_add(Weight::from_ref_time(3_233_811 as u64).saturating_mul(n as u64))
			// Standard Error: 49_702
			.saturating_add(Weight::from_ref_time(170_745 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(15_776_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(134_960_000 as u64)
			// Standard Error: 23_414
			.saturating_add(Weight::from_ref_time(865_428 as u64).saturating_mul(n as u64))
			// Standard Error: 51_943
			.saturating_add(Weight::from_ref_time(25_317_814 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(61_103_481 as u64)
			// Standard Error: 9_794
			.saturating_add(Weight::from_ref_time(446_073 as u64).saturating_mul(n as u64))
			// Standard Error: 20_339
			.saturating_add(Weight::from_ref_time(786_253 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(87_155_413 as u64)
			// Standard Error: 9_442
			.saturating_add(Weight::from_ref_time(532_494 as u64).saturating_mul(n as u64))
			// Standard Error: 15_313
			.saturating_add(Weight::from_ref_time(1_253_390 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(41_890_876 as u64)
			// Standard Error: 6_379
			.saturating_add(Weight::from_ref_time(237_835 as u64).saturating_mul(n as u64))
			// Standard Error: 10_346
			.saturating_add(Weight::from_ref_time(542_859 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(68_172_000 as u64)
			// Standard Error: 20_222
			.saturating_add(Weight::from_ref_time(731_242 as u64).saturating_mul(n as u64))
			// Standard Error: 44_286
			.saturating_add(Weight::from_ref_time(25_355_621 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(57_003_457 as u64)
			// Standard Error: 9_232
			.saturating_add(Weight::from_ref_time(498_382 as u64).saturating_mul(n as u64))
			// Standard Error: 19_164
			.saturating_add(Weight::from_ref_time(977_030 as u64).saturating_mul(m as u64))
			// Standard Error: 70_988
			.saturating_add(Weight::from_ref_time(1_087_402 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(48_042_654 as u64)
			// Standard Error: 10_136
			.saturating_add(Weight::from_ref_time(464_692 as u64).saturating_mul(n as u64))
			// Standard Error: 21_048
			.saturating_add(Weight::from_ref_time(874_050 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_712_019 as u64)
			// Standard Error: 10_528
			.saturating_add(Weight::from_ref_time(594_556 as u64).saturating_mul(n as u64))
			// Standard Error: 23_399
			.saturating_add(Weight::from_ref_time(1_221_138 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(68_005_183 as u64)
			// Standard Error: 8_721
			.saturating_add(Weight::from_ref_time(507_407 as u64).saturating_mul(n as u64))
			// Standard Error: 19_376
			.saturating_add(Weight::from_ref_time(958_191 as u64).saturating_mul(m as u64))
			// Standard Error: 75_151
			.saturating_add(Weight::from_ref_time(988_545 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(57_528_207 as u64)
			// Standard Error: 10_306
			.saturating_add(Weight::from_ref_time(488_160 as u64).saturating_mul(n as u64))
			// Standard Error: 22_905
			.saturating_add(Weight::from_ref_time(948_829 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(63_504_670 as u64)
			// Standard Error: 10_257
			.saturating_add(Weight::from_ref_time(494_077 as u64).saturating_mul(n as u64))
			// Standard Error: 22_796
			.saturating_add(Weight::from_ref_time(910_951 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(36_343_013 as u64)
			// Standard Error: 24_438
			.saturating_add(Weight::from_ref_time(450_205 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(9_619_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(28_714_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(25_196_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(32_797_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(684_130_000 as u64)
			// Standard Error: 4_532_652
			.saturating_add(Weight::from_ref_time(141_194_559 as u64).saturating_mul(n as u64))
			// Standard Error: 9_731_504
			.saturating_add(Weight::from_ref_time(272_885_109 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(153 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(146 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}
