// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain-staking
// --steps=50
// --repeat=20
// --output
// ../../runtimes/peregrine/src/weights/parachain_staking.rs
// --template
// ../../.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(4_746_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(21_489_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(40_519_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(2_660_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(19_174_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((18_486_000_u64).saturating_mul(n as Weight))
			// Standard Error: 41_000
			.saturating_add((13_574_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(22_500_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(142_400_000_u64)
			// Standard Error: 19_000
			.saturating_add((3_133_000_u64).saturating_mul(n as Weight))
			// Standard Error: 54_000
			.saturating_add((29_429_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(25_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(101_607_000_u64)
			// Standard Error: 63_000
			.saturating_add((4_158_000_u64).saturating_mul(n as Weight))
			// Standard Error: 231_000
			.saturating_add((9_598_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(178_596_000_u64)
			// Standard Error: 17_000
			.saturating_add((2_500_000_u64).saturating_mul(n as Weight))
			// Standard Error: 47_000
			.saturating_add((8_164_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(166_573_000_u64)
			// Standard Error: 15_000
			.saturating_add((2_574_000_u64).saturating_mul(n as Weight))
			// Standard Error: 42_000
			.saturating_add((8_321_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((3_235_000_u64).saturating_mul(n as Weight))
			// Standard Error: 43_000
			.saturating_add((29_816_000_u64).saturating_mul(m as Weight))
			// Standard Error: 190_000
			.saturating_add((1_217_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 69_000
			.saturating_add((4_984_000_u64).saturating_mul(n as Weight))
			// Standard Error: 255_000
			.saturating_add((12_002_000_u64).saturating_mul(m as Weight))
			// Standard Error: 973_000
			.saturating_add((6_582_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 74_000
			.saturating_add((4_926_000_u64).saturating_mul(n as Weight))
			// Standard Error: 272_000
			.saturating_add((12_018_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(36_644_000_u64)
			// Standard Error: 74_000
			.saturating_add((5_109_000_u64).saturating_mul(n as Weight))
			// Standard Error: 308_000
			.saturating_add((13_286_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 70_000
			.saturating_add((4_936_000_u64).saturating_mul(n as Weight))
			// Standard Error: 294_000
			.saturating_add((13_160_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_176_000
			.saturating_add((8_037_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(10_243_000_u64)
			// Standard Error: 77_000
			.saturating_add((4_704_000_u64).saturating_mul(n as Weight))
			// Standard Error: 320_000
			.saturating_add((12_345_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(43_334_000_u64)
			// Standard Error: 73_000
			.saturating_add((4_443_000_u64).saturating_mul(n as Weight))
			// Standard Error: 304_000
			.saturating_add((11_627_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(35_986_000_u64)
			// Standard Error: 72_000
			.saturating_add((4_505_000_u64).saturating_mul(n as Weight))
			// Standard Error: 298_000
			.saturating_add((11_701_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(47_664_000_u64)
			// Standard Error: 19_000
			.saturating_add((368_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(17_765_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}