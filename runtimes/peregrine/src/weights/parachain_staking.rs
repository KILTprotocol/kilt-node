// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(8_930_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(26_359_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(69_470_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(5_810_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(679_357_000 as u64)
			// Standard Error: 4_259_270
			.saturating_add(Weight::from_ref_time(135_100_188 as u64).saturating_mul(n as u64))
			// Standard Error: 9_144_560
			.saturating_add(Weight::from_ref_time(257_569_695 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(152 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(145 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(58_759_000 as u64)
			// Standard Error: 25_349
			.saturating_add(Weight::from_ref_time(3_027_356 as u64).saturating_mul(n as u64))
			// Standard Error: 56_107
			.saturating_add(Weight::from_ref_time(443_060 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(21_555_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(138_880_000 as u64)
			// Standard Error: 32_894
			.saturating_add(Weight::from_ref_time(1_121_610 as u64).saturating_mul(n as u64))
			// Standard Error: 72_973
			.saturating_add(Weight::from_ref_time(25_791_146 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(57_859_987 as u64)
			// Standard Error: 12_763
			.saturating_add(Weight::from_ref_time(754_394 as u64).saturating_mul(n as u64))
			// Standard Error: 26_504
			.saturating_add(Weight::from_ref_time(1_445_050 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(78_534_718 as u64)
			// Standard Error: 12_897
			.saturating_add(Weight::from_ref_time(800_944 as u64).saturating_mul(n as u64))
			// Standard Error: 20_915
			.saturating_add(Weight::from_ref_time(1_807_247 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(49_285_919 as u64)
			// Standard Error: 9_843
			.saturating_add(Weight::from_ref_time(422_421 as u64).saturating_mul(n as u64))
			// Standard Error: 15_963
			.saturating_add(Weight::from_ref_time(969_928 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(84_700_000 as u64)
			// Standard Error: 30_129
			.saturating_add(Weight::from_ref_time(913_872 as u64).saturating_mul(n as u64))
			// Standard Error: 65_984
			.saturating_add(Weight::from_ref_time(25_681_108 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(53_618_580 as u64)
			// Standard Error: 11_161
			.saturating_add(Weight::from_ref_time(841_324 as u64).saturating_mul(n as u64))
			// Standard Error: 23_169
			.saturating_add(Weight::from_ref_time(1_690_919 as u64).saturating_mul(m as u64))
			// Standard Error: 85_825
			.saturating_add(Weight::from_ref_time(1_583_109 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(47_618_331 as u64)
			// Standard Error: 13_245
			.saturating_add(Weight::from_ref_time(760_569 as u64).saturating_mul(n as u64))
			// Standard Error: 27_504
			.saturating_add(Weight::from_ref_time(1_503_137 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(55_757_031 as u64)
			// Standard Error: 11_751
			.saturating_add(Weight::from_ref_time(960_202 as u64).saturating_mul(n as u64))
			// Standard Error: 26_116
			.saturating_add(Weight::from_ref_time(2_024_591 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(63_567_733 as u64)
			// Standard Error: 10_254
			.saturating_add(Weight::from_ref_time(881_656 as u64).saturating_mul(n as u64))
			// Standard Error: 22_782
			.saturating_add(Weight::from_ref_time(1_757_651 as u64).saturating_mul(m as u64))
			// Standard Error: 88_360
			.saturating_add(Weight::from_ref_time(1_416_230 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(56_501_681 as u64)
			// Standard Error: 11_850
			.saturating_add(Weight::from_ref_time(804_957 as u64).saturating_mul(n as u64))
			// Standard Error: 26_336
			.saturating_add(Weight::from_ref_time(1_606_910 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(60_145_446 as u64)
			// Standard Error: 12_301
			.saturating_add(Weight::from_ref_time(827_538 as u64).saturating_mul(n as u64))
			// Standard Error: 27_339
			.saturating_add(Weight::from_ref_time(1_621_525 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(43_408_061 as u64)
			// Standard Error: 67_082
			.saturating_add(Weight::from_ref_time(377_957 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(24_806_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(33_473_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(42_218_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(43_491_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(669_552_000 as u64)
			// Standard Error: 4_185_287
			.saturating_add(Weight::from_ref_time(130_693_711 as u64).saturating_mul(n as u64))
			// Standard Error: 8_985_721
			.saturating_add(Weight::from_ref_time(258_837_552 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(153 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(146 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}
