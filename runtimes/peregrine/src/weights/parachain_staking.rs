// TODO: UPDATE BEFORE RELEASE

// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-05, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=2
// --repeat=1
// --chain=dev
// --pallet=parachain-staking
// --extrinsic=*
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `515`
		// Minimum execution time: 4_572_000 picoseconds.
		Weight::from_parts(4_572_000, 0)
			.saturating_add(Weight::from_parts(0, 515))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `515`
		// Minimum execution time: 12_371_000 picoseconds.
		Weight::from_parts(12_371_000, 0)
			.saturating_add(Weight::from_parts(0, 515))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `881`
		//  Estimated: `4723`
		// Minimum execution time: 52_932_000 picoseconds.
		Weight::from_parts(52_932_000, 0)
			.saturating_add(Weight::from_parts(0, 4723))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_626_000 picoseconds.
		Weight::from_parts(8_626_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:76 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:2700 w:2700)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (3647 ±0) + m * (7587 ±0)`
		//  Estimated: `383346 + n * (77565 ±30_589) + m * (151620 ±65_549)`
		// Minimum execution time: 749_094_000 picoseconds.
		Weight::from_parts(749_094_000, 0)
			.saturating_add(Weight::from_parts(0, 383346))
			// Standard Error: 86_792_174
			.saturating_add(Weight::from_parts(100_338_066, 0).saturating_mul(n.into()))
			// Standard Error: 185_983_231
			.saturating_add(Weight::from_parts(214_452_085, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(152))
			.saturating_add(T::DbWeight::get().reads((30_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((60_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(145))
			.saturating_add(T::DbWeight::get().writes((28_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((60_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 77565).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 151620).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:59 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (1883 ±0) + m * (2832 ±0)`
		//  Estimated: `5168 + n * (3355 ±0)`
		// Minimum execution time: 23_081_000 picoseconds.
		Weight::from_parts(23_081_000, 0)
			.saturating_add(Weight::from_parts(0, 5168))
			// Standard Error: 459_002
			.saturating_add(Weight::from_parts(2_023_254, 0).saturating_mul(n.into()))
			// Standard Error: 991_008
			.saturating_add(Weight::from_parts(204_663, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3355).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `515`
		// Minimum execution time: 18_585_000 picoseconds.
		Weight::from_parts(18_585_000, 0)
			.saturating_add(Weight::from_parts(0, 515))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:17 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:36 w:36)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:36 w:36)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:35 w:35)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (435 ±0) + m * (2388 ±0)`
		//  Estimated: `116721 + m * (16221 ±0) + n * (372 ±138)`
		// Minimum execution time: 92_957_000 picoseconds.
		Weight::from_parts(92_957_000, 0)
			.saturating_add(Weight::from_parts(0, 116721))
			// Standard Error: 679_179
			.saturating_add(Weight::from_parts(603_826, 0).saturating_mul(n.into()))
			// Standard Error: 1_467_794
			.saturating_add(Weight::from_parts(16_308_990, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(10))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 16221).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 372).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `78 + n * (83 ±0) + m * (85 ±0)`
		//  Estimated: `22098`
		// Minimum execution time: 50_697_000 picoseconds.
		Weight::from_parts(4_904_178, 0)
			.saturating_add(Weight::from_parts(0, 22098))
			// Standard Error: 95_903
			.saturating_add(Weight::from_parts(618_821, 0).saturating_mul(n.into()))
			// Standard Error: 200_027
			.saturating_add(Weight::from_parts(1_353_228, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking CandidatePool (r:17 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2447 + n * (72 ±0) + m * (818 ±0)`
		//  Estimated: `78143`
		// Minimum execution time: 91_929_000 picoseconds.
		Weight::from_parts(86_361_105, 0)
			.saturating_add(Weight::from_parts(0, 78143))
			// Standard Error: 123_416
			.saturating_add(Weight::from_parts(492_552, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846 + n * (53 ±0) + m * (96 ±0)`
		//  Estimated: `13653`
		// Minimum execution time: 34_969_000 picoseconds.
		Weight::from_parts(5_322_543, 0)
			.saturating_add(Weight::from_parts(0, 13653))
			// Standard Error: 114_619
			.saturating_add(Weight::from_parts(403_438, 0).saturating_mul(n.into()))
			// Standard Error: 186_665
			.saturating_add(Weight::from_parts(651_085, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:36 w:36)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:36 w:36)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:35 w:35)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (368 ±0) + m * (1611 ±0)`
		//  Estimated: `25299 + m * (14112 ±0) + n * (312 ±117)`
		// Minimum execution time: 48_603_000 picoseconds.
		Weight::from_parts(48_603_000, 0)
			.saturating_add(Weight::from_parts(0, 25299))
			// Standard Error: 599_572
			.saturating_add(Weight::from_parts(479_149, 0).saturating_mul(n.into()))
			// Standard Error: 1_278_769
			.saturating_add(Weight::from_parts(15_930_155, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 14112).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 312).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510 + n * (83 ±0) + m * (128 ±0) + u * (27 ±0)`
		//  Estimated: `27204`
		// Minimum execution time: 57_740_000 picoseconds.
		Weight::from_parts(1_978_780, 0)
			.saturating_add(Weight::from_parts(0, 27204))
			// Standard Error: 104_528
			.saturating_add(Weight::from_parts(655_552, 0).saturating_mul(n.into()))
			// Standard Error: 218_015
			.saturating_add(Weight::from_parts(1_264_552, 0).saturating_mul(m.into()))
			// Standard Error: 847_839
			.saturating_add(Weight::from_parts(1_205_148, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `49 + n * (72 ±0) + m * (103 ±0)`
		//  Estimated: `20312`
		// Minimum execution time: 44_572_000 picoseconds.
		Weight::from_parts(16_172_013, 0)
			.saturating_add(Weight::from_parts(0, 20312))
			// Standard Error: 48_260
			.saturating_add(Weight::from_parts(513_986, 0).saturating_mul(n.into()))
			// Standard Error: 100_656
			.saturating_add(Weight::from_parts(796_742, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `929 + n * (97 ±0) + m * (135 ±0)`
		//  Estimated: `30914`
		// Minimum execution time: 58_247_000 picoseconds.
		Weight::from_parts(28_773_576, 0)
			.saturating_add(Weight::from_parts(0, 30914))
			// Standard Error: 51_294
			.saturating_add(Weight::from_parts(603_817, 0).saturating_mul(n.into()))
			// Standard Error: 115_023
			.saturating_add(Weight::from_parts(849_106, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1515 + n * (94 ±0) + m * (114 ±0) + u * (28 ±0)`
		//  Estimated: `29256`
		// Minimum execution time: 62_490_000 picoseconds.
		Weight::from_parts(33_402_121, 0)
			.saturating_add(Weight::from_parts(0, 29256))
			// Standard Error: 44_620
			.saturating_add(Weight::from_parts(606_783, 0).saturating_mul(n.into()))
			// Standard Error: 100_057
			.saturating_add(Weight::from_parts(1_189_969, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1244 + n * (80 ±0) + m * (91 ±0)`
		//  Estimated: `22875`
		// Minimum execution time: 51_678_000 picoseconds.
		Weight::from_parts(14_393_305, 0)
			.saturating_add(Weight::from_parts(0, 22875))
			// Standard Error: 11_562
			.saturating_add(Weight::from_parts(516_270, 0).saturating_mul(n.into()))
			// Standard Error: 25_928
			.saturating_add(Weight::from_parts(1_081_424, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1244 + n * (80 ±0) + m * (91 ±0)`
		//  Estimated: `22875`
		// Minimum execution time: 56_485_000 picoseconds.
		Weight::from_parts(20_483_674, 0)
			.saturating_add(Weight::from_parts(0, 22875))
			// Standard Error: 104_239
			.saturating_add(Weight::from_parts(498_628, 0).saturating_mul(n.into()))
			// Standard Error: 233_748
			.saturating_add(Weight::from_parts(1_044_196, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1449 + u * (28 ±0)`
		//  Estimated: `9137`
		// Minimum execution time: 29_489_000 picoseconds.
		Weight::from_parts(36_332_000, 0)
			.saturating_add(Weight::from_parts(0, 9137))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_555_000 picoseconds.
		Weight::from_parts(8_555_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `739`
		//  Estimated: `11258`
		// Minimum execution time: 16_914_000 picoseconds.
		Weight::from_parts(16_914_000, 0)
			.saturating_add(Weight::from_parts(0, 11258))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_collator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `654`
		//  Estimated: `12960`
		// Minimum execution time: 17_807_000 picoseconds.
		Weight::from_parts(17_807_000, 0)
			.saturating_add(Weight::from_parts(0, 12960))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `950`
		//  Estimated: `5138`
		// Minimum execution time: 28_715_000 picoseconds.
		Weight::from_parts(28_715_000, 0)
			.saturating_add(Weight::from_parts(0, 5138))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	/// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:76 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:2700 w:2700)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (3587 ±0) + m * (7587 ±0)`
		//  Estimated: `383849 + n * (77565 ±0) + m * (151620 ±65_549)`
		// Minimum execution time: 449_942_000 picoseconds.
		Weight::from_parts(449_942_000, 0)
			.saturating_add(Weight::from_parts(0, 383849))
			// Standard Error: 84_159_623
			.saturating_add(Weight::from_parts(100_410_008, 0).saturating_mul(n.into()))
			// Standard Error: 180_342_051
			.saturating_add(Weight::from_parts(208_232_902, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(153))
			.saturating_add(T::DbWeight::get().reads((30_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((60_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(146))
			.saturating_add(T::DbWeight::get().writes((28_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((60_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 77565).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 151620).saturating_mul(m.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_on_initialize_no_action() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 515
		);
	}
	#[test]
	fn test_on_initialize_round_update() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 515
		);
	}
	#[test]
	fn test_on_initialize_network_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4723
		);
	}
	#[test]
	fn test_set_inflation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 383346
		);
	}
	#[test]
	fn test_set_max_selected_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5168
		);
	}
	#[test]
	fn test_set_blocks_per_round() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 515
		);
	}
	#[test]
	fn test_force_remove_candidate() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 116721
		);
	}
	#[test]
	fn test_join_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 22098
		);
	}
	#[test]
	fn test_init_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 78143
		);
	}
	#[test]
	fn test_cancel_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 13653
		);
	}
	#[test]
	fn test_execute_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 25299
		);
	}
	#[test]
	fn test_candidate_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 27204
		);
	}
	#[test]
	fn test_candidate_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 20312
		);
	}
	#[test]
	fn test_join_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 30914
		);
	}
	#[test]
	fn test_delegator_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 29256
		);
	}
	#[test]
	fn test_delegator_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 22875
		);
	}
	#[test]
	fn test_leave_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 22875
		);
	}
	#[test]
	fn test_unlock_unstaked() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 9137
		);
	}
	#[test]
	fn test_increment_delegator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 11258
		);
	}
	#[test]
	fn test_increment_collator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 12960
		);
	}
	#[test]
	fn test_claim_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5138
		);
	}
	#[test]
	fn test_execute_scheduled_reward_change() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 383849
		);
	}
}
