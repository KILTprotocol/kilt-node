// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(4_578_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(20_683_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(37_865_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(2_776_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(18_322_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((17_251_000_u64).saturating_mul(n as Weight))
			// Standard Error: 40_000
			.saturating_add((12_934_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(21_253_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(126_175_000_u64)
			// Standard Error: 19_000
			.saturating_add((2_982_000_u64).saturating_mul(n as Weight))
			// Standard Error: 54_000
			.saturating_add((28_539_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(25_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(82_299_000_u64)
			// Standard Error: 58_000
			.saturating_add((4_041_000_u64).saturating_mul(n as Weight))
			// Standard Error: 212_000
			.saturating_add((9_375_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(160_942_000_u64)
			// Standard Error: 17_000
			.saturating_add((2_414_000_u64).saturating_mul(n as Weight))
			// Standard Error: 45_000
			.saturating_add((7_744_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(147_266_000_u64)
			// Standard Error: 14_000
			.saturating_add((2_477_000_u64).saturating_mul(n as Weight))
			// Standard Error: 38_000
			.saturating_add((8_093_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((3_257_000_u64).saturating_mul(n as Weight))
			// Standard Error: 45_000
			.saturating_add((29_068_000_u64).saturating_mul(m as Weight))
			// Standard Error: 199_000
			.saturating_add((1_167_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 62_000
			.saturating_add((4_775_000_u64).saturating_mul(n as Weight))
			// Standard Error: 229_000
			.saturating_add((11_633_000_u64).saturating_mul(m as Weight))
			// Standard Error: 873_000
			.saturating_add((6_648_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 68_000
			.saturating_add((4_629_000_u64).saturating_mul(n as Weight))
			// Standard Error: 248_000
			.saturating_add((11_526_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(39_519_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_799_000_u64).saturating_mul(n as Weight))
			// Standard Error: 275_000
			.saturating_add((12_598_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 68_000
			.saturating_add((4_763_000_u64).saturating_mul(n as Weight))
			// Standard Error: 284_000
			.saturating_add((12_435_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_137_000
			.saturating_add((8_397_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(20_353_000_u64)
			// Standard Error: 69_000
			.saturating_add((4_333_000_u64).saturating_mul(n as Weight))
			// Standard Error: 286_000
			.saturating_add((11_394_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(35_968_000_u64)
			// Standard Error: 68_000
			.saturating_add((4_234_000_u64).saturating_mul(n as Weight))
			// Standard Error: 283_000
			.saturating_add((11_018_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(27_228_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_321_000_u64).saturating_mul(n as Weight))
			// Standard Error: 278_000
			.saturating_add((11_147_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(46_835_000_u64)
			// Standard Error: 21_000
			.saturating_add((429_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(16_504_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}