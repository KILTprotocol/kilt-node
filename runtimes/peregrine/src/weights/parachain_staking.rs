// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(15_416_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(21_888_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(55_752_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(8_317_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(875_145_000 as u64)
			// Standard Error: 5_299_322
			.saturating_add(Weight::from_ref_time(170_956_626 as u64).saturating_mul(n as u64))
			// Standard Error: 11_377_529
			.saturating_add(Weight::from_ref_time(326_239_282 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(152 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(145 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(72_087_000 as u64)
			// Standard Error: 28_205
			.saturating_add(Weight::from_ref_time(3_571_094 as u64).saturating_mul(n as u64))
			// Standard Error: 62_429
			.saturating_add(Weight::from_ref_time(399_246 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(28_489_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(168_253_000 as u64)
			// Standard Error: 35_111
			.saturating_add(Weight::from_ref_time(1_274_199 as u64).saturating_mul(n as u64))
			// Standard Error: 77_891
			.saturating_add(Weight::from_ref_time(31_993_356 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(76_286_351 as u64)
			// Standard Error: 15_995
			.saturating_add(Weight::from_ref_time(837_995 as u64).saturating_mul(n as u64))
			// Standard Error: 33_215
			.saturating_add(Weight::from_ref_time(1_637_780 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(101_593_616 as u64)
			// Standard Error: 16_165
			.saturating_add(Weight::from_ref_time(902_145 as u64).saturating_mul(n as u64))
			// Standard Error: 26_216
			.saturating_add(Weight::from_ref_time(1_971_623 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_158_723 as u64)
			// Standard Error: 12_285
			.saturating_add(Weight::from_ref_time(480_541 as u64).saturating_mul(n as u64))
			// Standard Error: 19_923
			.saturating_add(Weight::from_ref_time(1_140_844 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(101_492_000 as u64)
			// Standard Error: 33_053
			.saturating_add(Weight::from_ref_time(1_085_158 as u64).saturating_mul(n as u64))
			// Standard Error: 72_387
			.saturating_add(Weight::from_ref_time(32_098_821 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(72_993_566 as u64)
			// Standard Error: 13_600
			.saturating_add(Weight::from_ref_time(924_637 as u64).saturating_mul(n as u64))
			// Standard Error: 28_232
			.saturating_add(Weight::from_ref_time(1_825_569 as u64).saturating_mul(m as u64))
			// Standard Error: 104_577
			.saturating_add(Weight::from_ref_time(1_832_598 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_285_477 as u64)
			// Standard Error: 16_246
			.saturating_add(Weight::from_ref_time(856_801 as u64).saturating_mul(n as u64))
			// Standard Error: 33_737
			.saturating_add(Weight::from_ref_time(1_677_444 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(78_554_718 as u64)
			// Standard Error: 15_120
			.saturating_add(Weight::from_ref_time(1_074_361 as u64).saturating_mul(n as u64))
			// Standard Error: 33_604
			.saturating_add(Weight::from_ref_time(2_150_600 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(83_097_910 as u64)
			// Standard Error: 12_550
			.saturating_add(Weight::from_ref_time(977_930 as u64).saturating_mul(n as u64))
			// Standard Error: 27_881
			.saturating_add(Weight::from_ref_time(1_938_416 as u64).saturating_mul(m as u64))
			// Standard Error: 108_137
			.saturating_add(Weight::from_ref_time(1_659_555 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(73_436_463 as u64)
			// Standard Error: 14_697
			.saturating_add(Weight::from_ref_time(912_018 as u64).saturating_mul(n as u64))
			// Standard Error: 32_665
			.saturating_add(Weight::from_ref_time(1_780_062 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(78_234_816 as u64)
			// Standard Error: 15_039
			.saturating_add(Weight::from_ref_time(919_909 as u64).saturating_mul(n as u64))
			// Standard Error: 33_424
			.saturating_add(Weight::from_ref_time(1_806_001 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(53_722_447 as u64)
			// Standard Error: 21_424
			.saturating_add(Weight::from_ref_time(264_299 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(21_167_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(39_789_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(35_640_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(113_068_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(862_056_000 as u64)
			// Standard Error: 5_102_687
			.saturating_add(Weight::from_ref_time(164_232_513 as u64).saturating_mul(n as u64))
			// Standard Error: 10_955_357
			.saturating_add(Weight::from_ref_time(318_222_620 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(153 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(146 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}
