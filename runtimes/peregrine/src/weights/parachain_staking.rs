// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2025-01-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=parachain-staking
// --extrinsic=*
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 4_743_000 picoseconds.
		Weight::from_parts(4_914_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 7_953_000 picoseconds.
		Weight::from_parts(8_186_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `482`
		//  Estimated: `3597`
		// Minimum execution time: 30_745_000 picoseconds.
		Weight::from_parts(31_116_000, 0)
			.saturating_add(Weight::from_parts(0, 3597))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::ForceNewRound` (r:0 w:1)
	/// Proof: `ParachainStaking::ForceNewRound` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_758_000 picoseconds.
		Weight::from_parts(2_970_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:76 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:75 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:2700 w:2700)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:2700 w:2700)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (7573 ±0) + n * (3709 ±0)`
		//  Estimated: `183222 + m * (64823 ±2_167) + n * (31965 ±0)`
		// Minimum execution time: 687_227_000 picoseconds.
		Weight::from_parts(688_616_000, 0)
			.saturating_add(Weight::from_parts(0, 183222))
			// Standard Error: 4_712_788
			.saturating_add(Weight::from_parts(145_167_299, 0).saturating_mul(n.into()))
			// Standard Error: 10_118_253
			.saturating_add(Weight::from_parts(281_849_985, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(152))
			.saturating_add(T::DbWeight::get().reads((27_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((51_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(145))
			.saturating_add(T::DbWeight::get().writes((25_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((51_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 64823).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 31965).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:59 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2832 ±0) + n * (1843 ±0)`
		//  Estimated: `5255 + n * (3554 ±9)`
		// Minimum execution time: 27_334_000 picoseconds.
		Weight::from_parts(27_698_000, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 21_663
			.saturating_add(Weight::from_parts(3_094_212, 0).saturating_mul(n.into()))
			// Standard Error: 47_949
			.saturating_add(Weight::from_parts(232_800, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3554).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 10_874_000 picoseconds.
		Weight::from_parts(11_421_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:17 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:36 w:36)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:36 w:36)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:36 w:36)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:35 w:35)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (2303 ±0) + n * (397 ±0)`
		//  Estimated: `73495 + m * (2756 ±8) + n * (136 ±3)`
		// Minimum execution time: 119_580_000 picoseconds.
		Weight::from_parts(120_692_000, 0)
			.saturating_add(Weight::from_parts(0, 73495))
			// Standard Error: 22_640
			.saturating_add(Weight::from_parts(818_847, 0).saturating_mul(n.into()))
			// Standard Error: 50_225
			.saturating_add(Weight::from_parts(24_648_510, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(10))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2756).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 136).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2617 + m * (37 ±0) + n * (76 ±0)`
		//  Estimated: `5255 + m * (43 ±0)`
		// Minimum execution time: 69_301_000 picoseconds.
		Weight::from_parts(50_991_837, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 10_464
			.saturating_add(Weight::from_parts(484_667, 0).saturating_mul(n.into()))
			// Standard Error: 21_729
			.saturating_add(Weight::from_parts(915_463, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(m.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:17 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2007 + m * (816 ±0) + n * (71 ±0)`
		//  Estimated: `73495`
		// Minimum execution time: 94_556_000 picoseconds.
		Weight::from_parts(71_411_021, 0)
			.saturating_add(Weight::from_parts(0, 73495))
			// Standard Error: 9_190
			.saturating_add(Weight::from_parts(518_859, 0).saturating_mul(n.into()))
			// Standard Error: 14_903
			.saturating_add(Weight::from_parts(1_256_711, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780 + m * (96 ±0) + n * (53 ±0)`
		//  Estimated: `9520`
		// Minimum execution time: 36_175_000 picoseconds.
		Weight::from_parts(30_044_644, 0)
			.saturating_add(Weight::from_parts(0, 9520))
			// Standard Error: 6_250
			.saturating_add(Weight::from_parts(227_699, 0).saturating_mul(n.into()))
			// Standard Error: 10_137
			.saturating_add(Weight::from_parts(573_087, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:36 w:36)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:36 w:36)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:36 w:36)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:35 w:35)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::DisabledValidators` (r:1 w:1)
	/// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1534 ±0) + n * (335 ±0)`
		//  Estimated: `5255 + m * (2756 ±0) + n * (118 ±3)`
		// Minimum execution time: 59_106_000 picoseconds.
		Weight::from_parts(59_883_000, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 19_623
			.saturating_add(Weight::from_parts(666_321, 0).saturating_mul(n.into()))
			// Standard Error: 42_976
			.saturating_add(Weight::from_parts(24_712_741, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2756).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 118).saturating_mul(n.into()))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3030 + m * (92 ±0) + n * (65 ±0) + u * (24 ±0)`
		//  Estimated: `5255`
		// Minimum execution time: 80_398_000 picoseconds.
		Weight::from_parts(51_933_927, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 9_989
			.saturating_add(Weight::from_parts(524_075, 0).saturating_mul(n.into()))
			// Standard Error: 20_736
			.saturating_add(Weight::from_parts(1_044_861, 0).saturating_mul(m.into()))
			// Standard Error: 76_814
			.saturating_add(Weight::from_parts(1_148_706, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2099 + m * (70 ±0) + n * (60 ±0)`
		//  Estimated: `5255`
		// Minimum execution time: 54_141_000 picoseconds.
		Weight::from_parts(36_950_474, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 9_885
			.saturating_add(Weight::from_parts(459_552, 0).saturating_mul(n.into()))
			// Standard Error: 20_528
			.saturating_add(Weight::from_parts(876_321, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:2 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::LastDelegation` (r:1 w:1)
	/// Proof: `ParachainStaking::LastDelegation` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:0 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3558 + m * (93 ±0) + n * (84 ±0)`
		//  Estimated: `9520`
		// Minimum execution time: 84_273_000 picoseconds.
		Weight::from_parts(58_578_993, 0)
			.saturating_add(Weight::from_parts(0, 9520))
			// Standard Error: 10_734
			.saturating_add(Weight::from_parts(628_020, 0).saturating_mul(n.into()))
			// Standard Error: 23_856
			.saturating_add(Weight::from_parts(1_291_469, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4166 + m * (88 ±0) + n * (72 ±0) + u * (24 ±0)`
		//  Estimated: `5255`
		// Minimum execution time: 86_880_000 picoseconds.
		Weight::from_parts(59_672_570, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 9_649
			.saturating_add(Weight::from_parts(564_356, 0).saturating_mul(n.into()))
			// Standard Error: 21_438
			.saturating_add(Weight::from_parts(1_084_640, 0).saturating_mul(m.into()))
			// Standard Error: 83_148
			.saturating_add(Weight::from_parts(1_168_883, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2952 + m * (71 ±0) + n * (67 ±0)`
		//  Estimated: `5255`
		// Minimum execution time: 63_108_000 picoseconds.
		Weight::from_parts(41_194_025, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 9_908
			.saturating_add(Weight::from_parts(526_412, 0).saturating_mul(n.into()))
			// Standard Error: 22_022
			.saturating_add(Weight::from_parts(1_049_919, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopCandidates` (r:1 w:1)
	/// Proof: `ParachainStaking::TopCandidates` (`max_values`: Some(1), `max_size`: Some(3602), added: 4097, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MaxSelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::MaxSelectedCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2952 + m * (71 ±0) + n * (67 ±0)`
		//  Estimated: `5255`
		// Minimum execution time: 64_821_000 picoseconds.
		Weight::from_parts(46_837_102, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			// Standard Error: 10_155
			.saturating_add(Weight::from_parts(510_666, 0).saturating_mul(n.into()))
			// Standard Error: 22_569
			.saturating_add(Weight::from_parts(977_726, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `ParachainStaking::Unstaking` (r:1 w:1)
	/// Proof: `ParachainStaking::Unstaking` (`max_values`: None, `max_size`: Some(281), added: 2756, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `709 + u * (24 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 35_501_000 picoseconds.
		Weight::from_parts(35_991_179, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 2_875
			.saturating_add(Weight::from_parts(103_684, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `ParachainStaking::MaxCollatorCandidateStake` (r:0 w:1)
	/// Proof: `ParachainStaking::MaxCollatorCandidateStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_674_000 picoseconds.
		Weight::from_parts(5_879_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `3553`
		// Minimum execution time: 25_922_000 picoseconds.
		Weight::from_parts(26_247_000, 0)
			.saturating_add(Weight::from_parts(0, 3553))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:1 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:1 w:1)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn increment_collator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590`
		//  Estimated: `5255`
		// Minimum execution time: 21_919_000 picoseconds.
		Weight::from_parts(22_444_000, 0)
			.saturating_add(Weight::from_parts(0, 5255))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::Rewards` (r:1 w:1)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `3597`
		// Minimum execution time: 26_167_000 picoseconds.
		Weight::from_parts(26_675_000, 0)
			.saturating_add(Weight::from_parts(0, 3597))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::CounterForCandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CounterForCandidatePool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::LastRewardReduction` (r:1 w:1)
	/// Proof: `ParachainStaking::LastRewardReduction` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:76 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: None, `max_size`: Some(1790), added: 4265, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksAuthored` (r:75 w:0)
	/// Proof: `ParachainStaking::BlocksAuthored` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BlocksRewarded` (r:2700 w:2700)
	/// Proof: `ParachainStaking::BlocksRewarded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Rewards` (r:2700 w:2700)
	/// Proof: `ParachainStaking::Rewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TotalCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalCollatorStake` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (7573 ±0) + n * (3647 ±0)`
		//  Estimated: `183222 + m * (64823 ±2_174) + n * (31965 ±1)`
		// Minimum execution time: 675_610_000 picoseconds.
		Weight::from_parts(680_509_000, 0)
			.saturating_add(Weight::from_parts(0, 183222))
			// Standard Error: 4_566_906
			.saturating_add(Weight::from_parts(139_722_200, 0).saturating_mul(n.into()))
			// Standard Error: 9_805_048
			.saturating_add(Weight::from_parts(276_464_966, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(153))
			.saturating_add(T::DbWeight::get().reads((27_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((51_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(146))
			.saturating_add(T::DbWeight::get().writes((25_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((51_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 64823).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 31965).saturating_mul(n.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_on_initialize_no_action() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_on_initialize_round_update() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_on_initialize_network_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3597
		);
	}
	#[test]
	fn test_set_inflation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 183222
		);
	}
	#[test]
	fn test_set_max_selected_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_set_blocks_per_round() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_force_remove_candidate() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 73495
		);
	}
	#[test]
	fn test_join_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_init_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 73495
		);
	}
	#[test]
	fn test_cancel_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 9520
		);
	}
	#[test]
	fn test_execute_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_candidate_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_candidate_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_join_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 9520
		);
	}
	#[test]
	fn test_delegator_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_delegator_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_leave_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_unlock_unstaked() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4764
		);
	}
	#[test]
	fn test_increment_delegator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3553
		);
	}
	#[test]
	fn test_increment_collator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5255
		);
	}
	#[test]
	fn test_claim_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3597
		);
	}
	#[test]
	fn test_execute_scheduled_reward_change() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 183222
		);
	}
}
