// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/spiritnet/src/weights/pallet_democracy.rs
// --template=.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

// TODO: Benchbot

/// Weight functions for `pallet_democracy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_democracy::WeightInfo for WeightInfo<T> {
	fn propose() -> Weight {
		(58_488_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn second(s: u32) -> Weight {
		(39_011_000_u64)
			// Standard Error: 0
			.saturating_add((157_000_u64).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn vote_new(r: u32) -> Weight {
		(43_998_000_u64)
			// Standard Error: 0
			.saturating_add((211_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn vote_existing(r: u32) -> Weight {
		(44_219_000_u64)
			// Standard Error: 0
			.saturating_add((206_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn emergency_cancel() -> Weight {
		(28_974_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn blacklist(p: u32) -> Weight {
		(77_299_000_u64)
			// Standard Error: 4_000
			.saturating_add((541_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn external_propose(v: u32) -> Weight {
		(13_334_000_u64)
			// Standard Error: 0
			.saturating_add((80_000_u64).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn external_propose_majority() -> Weight {
		(2_650_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn external_propose_default() -> Weight {
		(2_667_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn fast_track() -> Weight {
		(27_908_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn veto_external(v: u32) -> Weight {
		(28_446_000_u64)
			// Standard Error: 0
			.saturating_add((134_000_u64).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn cancel_proposal(p: u32) -> Weight {
		(51_004_000_u64)
			// Standard Error: 0
			.saturating_add((512_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel_referendum() -> Weight {
		(17_377_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn cancel_queued(r: u32) -> Weight {
		(33_882_000_u64)
			// Standard Error: 15_000
			.saturating_add((6_070_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn on_initialize_base(r: u32) -> Weight {
		(7_295_000_u64)
			// Standard Error: 4_000
			.saturating_add((5_093_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
	}
	fn on_initialize_base_with_launch_period(r: u32) -> Weight {
		(7_295_000_u64)
			// Standard Error: 4_000
			.saturating_add((5_093_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
	}
	fn delegate(r: u32) -> Weight {
		(54_128_000_u64)
			// Standard Error: 5_000
			.saturating_add((7_209_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn undelegate(r: u32) -> Weight {
		(23_613_000_u64)
			// Standard Error: 4_000
			.saturating_add((7_196_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn clear_public_proposals() -> Weight {
		(2_607_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn note_preimage(b: u32) -> Weight {
		(42_847_000_u64)
			// Standard Error: 0
			.saturating_add((3_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn note_imminent_preimage(b: u32) -> Weight {
		(27_699_000_u64)
			// Standard Error: 0
			.saturating_add((2_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn reap_preimage(b: u32) -> Weight {
		(38_171_000_u64)
			// Standard Error: 0
			.saturating_add((2_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn unlock_remove(r: u32) -> Weight {
		(37_418_000_u64)
			// Standard Error: 0
			.saturating_add((55_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn unlock_set(r: u32) -> Weight {
		(35_077_000_u64)
			// Standard Error: 0
			.saturating_add((197_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn remove_vote(r: u32) -> Weight {
		(19_476_000_u64)
			// Standard Error: 0
			.saturating_add((183_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn remove_other_vote(r: u32) -> Weight {
		(19_518_000_u64)
			// Standard Error: 0
			.saturating_add((186_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
