// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-21, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// ../../runtimes/parachain/src/weights/parachain_staking.rs
// --template
// ../../.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(6_832_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_round_update() -> Weight {
		(30_186_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn on_initialize_new_year() -> Weight {
		(52_658_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn set_inflation() -> Weight {
		(26_109_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 118_000
			.saturating_add((25_817_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 331_000
			.saturating_add((15_863_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn set_blocks_per_round() -> Weight {
		(32_771_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(236_761_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((2_977_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 296_000
			.saturating_add((39_731_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(215_619_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((3_990_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 371_000
			.saturating_add((9_041_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(376_312_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((1_280_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 154_000
			.saturating_add((5_609_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(375_839_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((1_318_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 154_000
			.saturating_add((5_265_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(20 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 78_000
			.saturating_add((2_174_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 214_000
			.saturating_add((35_841_000 as Weight).saturating_mul(m as Weight))
			// Standard Error: 802_000
			.saturating_add((550_000 as Weight).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(145_084_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((3_884_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 349_000
			.saturating_add((8_834_000 as Weight).saturating_mul(m as Weight))
			// Standard Error: 1_158_000
			.saturating_add((7_394_000 as Weight).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(134_919_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((4_112_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 380_000
			.saturating_add((9_462_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(201_648_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((4_320_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 458_000
			.saturating_add((10_658_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(117_368_000 as Weight)
			// Standard Error: 96_000
			.saturating_add((4_156_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 403_000
			.saturating_add((9_770_000 as Weight).saturating_mul(m as Weight))
			// Standard Error: 1_378_000
			.saturating_add((8_327_000 as Weight).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(159_625_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((4_058_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 428_000
			.saturating_add((9_448_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(152_150_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((4_243_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 430_000
			.saturating_add((10_133_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(167_711_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((4_088_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 440_000
			.saturating_add((9_574_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn withdraw_unstaked(u: u32, ) -> Weight {
		(70_341_000 as Weight)
			// Standard Error: 631_000
			.saturating_add((335_000 as Weight).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(29_475_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 225_000
			.saturating_add((63_580_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 821_000
			.saturating_add((40_046_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
	}
}