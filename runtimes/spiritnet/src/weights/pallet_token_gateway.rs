// KILT Blockchain â€“ <https://kilt.io>
// Copyright (C) 2025, KILT Foundation

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at <hello@kilt.io>

//! Autogenerated weights for `pallet_token_gateway`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --pallet=pallet-token-gateway
// --extrinsic=*
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/spiritnet-runtime/spiritnet_runtime.compact.compressed.wasm
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/spiritnet/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_token_gateway`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_token_gateway::WeightInfo for WeightInfo<T> {
	/// Storage: `Hyperbridge::HostParams` (r:1 w:0)
	/// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::Precisions` (r:0 w:100)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:0 w:1)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::LocalAssets` (r:0 w:1)
	/// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::SupportedAssets` (r:0 w:1)
	/// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e74736dbf7451ee5809df8f986d7fa449` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e74736dbf7451ee5809df8f986d7fa449` (r:1 w:1)
	/// Storage: UNKNOWN KEY `0x526571756573745061796d656e746dbf7451ee5809df8f986d7fa4499b559518` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x526571756573745061796d656e746dbf7451ee5809df8f986d7fa4499b559518` (r:0 w:1)
	/// The range of component `x` is `[1, 100]`.
	fn create_erc6160_asset(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `3755`
		// Minimum execution time: 61_154_000 picoseconds.
		Weight::from_parts(64_119_112, 0)
			.saturating_add(Weight::from_parts(0, 3755))
			// Standard Error: 11_851
			.saturating_add(Weight::from_parts(2_559_158, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	/// Storage: `TokenGateway::SupportedAssets` (r:1 w:0)
	/// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `TokenGateway::Precisions` (r:1 w:0)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Hyperbridge::HostParams` (r:1 w:0)
	/// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747387c60cc3838067ec43c7c32db115` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747387c60cc3838067ec43c7c32db115` (r:1 w:1)
	/// Storage: UNKNOWN KEY `0x526571756573745061796d656e7487c60cc3838067ec43c7c32db1154880bfb2` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x526571756573745061796d656e7487c60cc3838067ec43c7c32db1154880bfb2` (r:0 w:1)
	fn teleport() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `4311`
		// Minimum execution time: 128_653_000 picoseconds.
		Weight::from_parts(129_181_000, 0)
			.saturating_add(Weight::from_parts(0, 4311))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `TokenGateway::TokenGatewayAddresses` (r:0 w:1)
	/// Proof: `TokenGateway::TokenGatewayAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn set_token_gateway_addresses(_x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_381_000 picoseconds.
		Weight::from_parts(9_865_338, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Hyperbridge::HostParams` (r:1 w:0)
	/// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473063ffee434bbc145cf1b300aac5e` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473063ffee434bbc145cf1b300aac5e` (r:1 w:1)
	/// Storage: UNKNOWN KEY `0x526571756573745061796d656e74063ffee434bbc145cf1b300aac5e8ecf4667` (r:0 w:1)
	/// Proof: UNKNOWN KEY `0x526571756573745061796d656e74063ffee434bbc145cf1b300aac5e8ecf4667` (r:0 w:1)
	fn update_erc6160_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3958`
		// Minimum execution time: 51_865_000 picoseconds.
		Weight::from_parts(52_711_000, 0)
			.saturating_add(Weight::from_parts(0, 3958))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `TokenGateway::Precisions` (r:0 w:100)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn update_asset_precision(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_298_000 picoseconds.
		Weight::from_parts(11_667_353, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 12_255
			.saturating_add(Weight::from_parts(2_519_188, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_erc6160_asset() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3755
		);
	}
	#[test]
	fn test_teleport() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4311
		);
	}
	#[test]
	fn test_update_erc6160_asset() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3958
		);
	}
}
