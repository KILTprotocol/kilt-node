// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `pallet_membership`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-11-11, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/kilt-parachain
// benchmark
// pallet
// --heap-pages=4096
// --chain=dev
// --pallet=pallet-membership
// --extrinsic=*
// --steps=2
// --repeat=1
// --default-pov-mode=ignored
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/peregrine/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_membership`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::WeightInfo for WeightInfo<T> {
	/// Storage: `TipsMembership::Members` (r:1 w:1)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// The range of component `m` is `[1, 20]`.
	fn add_member(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 353_129_000 picoseconds.
		Weight::from_parts(377_804_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TipsMembership::Members` (r:1 w:1)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// Storage: `TipsMembership::Prime` (r:1 w:0)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[2, 21]`.
	fn remove_member(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `189 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 390_037_000 picoseconds.
		Weight::from_parts(404_106_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TipsMembership::Members` (r:1 w:1)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// Storage: `TipsMembership::Prime` (r:1 w:0)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[2, 21]`.
	fn swap_member(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `189 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 393_449_000 picoseconds.
		Weight::from_parts(403_152_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TipsMembership::Members` (r:1 w:1)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// Storage: `TipsMembership::Prime` (r:1 w:0)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[1, 21]`.
	fn reset_member(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 448_047_000 picoseconds.
		Weight::from_parts(448_683_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TipsMembership::Members` (r:1 w:1)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// Storage: `TipsMembership::Prime` (r:1 w:1)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[1, 21]`.
	fn change_key(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 437_193_000 picoseconds.
		Weight::from_parts(516_613_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `TipsMembership::Members` (r:1 w:0)
	/// Proof: `TipsMembership::Members` (`max_values`: Some(1), `max_size`: Some(673), added: 1168, mode: `Ignored`)
	/// Storage: `TipsMembership::Prime` (r:0 w:1)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[1, 21]`.
	fn set_prime(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `135 + m * (32 ±0)`
		//  Estimated: `990`
		// Minimum execution time: 305_850_000 picoseconds.
		Weight::from_parts(329_866_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TipsMembership::Prime` (r:0 w:1)
	/// Proof: `TipsMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `Ignored`)
	/// The range of component `m` is `[1, 21]`.
	fn clear_prime(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 163_207_000 picoseconds.
		Weight::from_parts(171_566_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_add_member() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_remove_member() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_swap_member() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_reset_member() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_change_key() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
	#[test]
	fn test_set_prime() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 990
		);
	}
}
