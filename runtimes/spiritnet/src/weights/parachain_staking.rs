// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/peregrine/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(3_103_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(23_755_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(69_582_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(8_791_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking RewardCount (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:2 w:2)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 3_005_000
			.saturating_add(Weight::from_ref_time(216_364_000 as u64).saturating_mul(n as u64))
			// Standard Error: 6_440_000
			.saturating_add(Weight::from_ref_time(440_763_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads((37 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((75 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes((36 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((75 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 161_000
			.saturating_add(Weight::from_ref_time(19_480_000 as u64).saturating_mul(n as u64))
			// Standard Error: 270_000
			.saturating_add(Weight::from_ref_time(28_745_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(30_326_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: ParachainStaking RewardCount (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 169_000
			.saturating_add(Weight::from_ref_time(17_230_000 as u64).saturating_mul(n as u64))
			// Standard Error: 279_000
			.saturating_add(Weight::from_ref_time(46_081_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(25 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 148_000
			.saturating_add(Weight::from_ref_time(14_141_000 as u64).saturating_mul(n as u64))
			// Standard Error: 307_000
			.saturating_add(Weight::from_ref_time(28_608_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 169_000
			.saturating_add(Weight::from_ref_time(17_942_000 as u64).saturating_mul(n as u64))
			// Standard Error: 275_000
			.saturating_add(Weight::from_ref_time(32_999_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 181_000
			.saturating_add(Weight::from_ref_time(18_181_000 as u64).saturating_mul(n as u64))
			// Standard Error: 294_000
			.saturating_add(Weight::from_ref_time(33_461_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: ParachainStaking RewardCount (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 177_000
			.saturating_add(Weight::from_ref_time(20_987_000 as u64).saturating_mul(n as u64))
			// Standard Error: 288_000
			.saturating_add(Weight::from_ref_time(53_291_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn candidate_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 146_000
			.saturating_add(Weight::from_ref_time(19_044_000 as u64).saturating_mul(n as u64))
			// Standard Error: 304_000
			.saturating_add(Weight::from_ref_time(39_101_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking RewardCount (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 165_000
			.saturating_add(Weight::from_ref_time(17_769_000 as u64).saturating_mul(n as u64))
			// Standard Error: 342_000
			.saturating_add(Weight::from_ref_time(36_575_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking RewardCount (r:1 w:1)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 154_000
			.saturating_add(Weight::from_ref_time(17_571_000 as u64).saturating_mul(n as u64))
			// Standard Error: 343_000
			.saturating_add(Weight::from_ref_time(38_223_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn delegator_stake_more(n: u32, m: u32, _u: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 133_000
			.saturating_add(Weight::from_ref_time(18_815_000 as u64).saturating_mul(n as u64))
			// Standard Error: 295_000
			.saturating_add(Weight::from_ref_time(40_803_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking RewardCount (r:2 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 153_000
			.saturating_add(Weight::from_ref_time(17_715_000 as u64).saturating_mul(n as u64))
			// Standard Error: 341_000
			.saturating_add(Weight::from_ref_time(38_327_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking RewardCount (r:2 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 153_000
			.saturating_add(Weight::from_ref_time(18_270_000 as u64).saturating_mul(n as u64))
			// Standard Error: 341_000
			.saturating_add(Weight::from_ref_time(39_114_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(58_250_000 as u64)
			// Standard Error: 10_000
			.saturating_add(Weight::from_ref_time(249_000 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(23_094_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking RewardCount (r:2 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(25_796_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking RewardCount (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `m` is `[0, 35]`.
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(366_611_000 as u64)
			.saturating_add(T::DbWeight::get().reads(75 as u64))
			.saturating_add(T::DbWeight::get().writes(72 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(29_833_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking RewardCount (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:2 w:2)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(0 as u64)
			// Standard Error: 5_730_000
			.saturating_add(Weight::from_ref_time(202_623_000 as u64).saturating_mul(n as u64))
			// Standard Error: 12_280_000
			.saturating_add(Weight::from_ref_time(415_436_000 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads((37 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((75 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes((36 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((75 as u64).saturating_mul(m as u64)))
	}
}
