// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-09, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// ../../runtimes/spiritnet/src/weights/parachain_staking.rs
// --template
// ../../.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(6_623_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(25_949_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(50_535_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(11_933_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn set_inflation() -> Weight {
		(23_353_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 70_000
			.saturating_add((24_079_000_u64).saturating_mul(n as Weight))
			// Standard Error: 197_000
			.saturating_add((14_997_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(30_818_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(256_842_000_u64)
			// Standard Error: 61_000
			.saturating_add((2_473_000_u64).saturating_mul(n as Weight))
			// Standard Error: 168_000
			.saturating_add((37_184_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(179_642_000_u64)
			// Standard Error: 88_000
			.saturating_add((3_917_000_u64).saturating_mul(n as Weight))
			// Standard Error: 320_000
			.saturating_add((8_823_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(314_776_000_u64)
			// Standard Error: 24_000
			.saturating_add((1_456_000_u64).saturating_mul(n as Weight))
			// Standard Error: 65_000
			.saturating_add((5_965_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(316_316_000_u64)
			// Standard Error: 26_000
			.saturating_add((1_351_000_u64).saturating_mul(n as Weight))
			// Standard Error: 71_000
			.saturating_add((5_840_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 49_000
			.saturating_add((2_355_000_u64).saturating_mul(n as Weight))
			// Standard Error: 134_000
			.saturating_add((34_131_000_u64).saturating_mul(m as Weight))
			// Standard Error: 589_000
			.saturating_add((467_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(108_582_000_u64)
			// Standard Error: 87_000
			.saturating_add((3_870_000_u64).saturating_mul(n as Weight))
			// Standard Error: 323_000
			.saturating_add((8_787_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_070_000
			.saturating_add((6_961_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(125_060_000_u64)
			// Standard Error: 91_000
			.saturating_add((3_814_000_u64).saturating_mul(n as Weight))
			// Standard Error: 332_000
			.saturating_add((8_699_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(181_776_000_u64)
			// Standard Error: 91_000
			.saturating_add((4_046_000_u64).saturating_mul(n as Weight))
			// Standard Error: 376_000
			.saturating_add((9_952_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(90_904_000_u64)
			// Standard Error: 82_000
			.saturating_add((3_945_000_u64).saturating_mul(n as Weight))
			// Standard Error: 345_000
			.saturating_add((9_549_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_182_000
			.saturating_add((7_724_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(132_451_000_u64)
			// Standard Error: 87_000
			.saturating_add((3_822_000_u64).saturating_mul(n as Weight))
			// Standard Error: 360_000
			.saturating_add((9_176_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(140_353_000_u64)
			// Standard Error: 87_000
			.saturating_add((3_803_000_u64).saturating_mul(n as Weight))
			// Standard Error: 358_000
			.saturating_add((9_240_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(142_811_000_u64)
			// Standard Error: 86_000
			.saturating_add((3_801_000_u64).saturating_mul(n as Weight))
			// Standard Error: 356_000
			.saturating_add((9_142_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(56_092_000_u64)
			// Standard Error: 15_000
			.saturating_add((193_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(25_518_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 128_000
			.saturating_add((59_819_000_u64).saturating_mul(n as Weight))
			// Standard Error: 452_000
			.saturating_add((36_894_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}
