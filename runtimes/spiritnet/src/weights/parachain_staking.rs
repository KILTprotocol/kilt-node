// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-10, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE:
//! {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN:
//! Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// ../../runtimes/spiritnet/src/weights/parachain_staking.rs
// --template
// ../../.maintain/weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn set_inflation() -> Weight {
		(24_937_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 111_000
			.saturating_add((42_081_000_u64).saturating_mul(n as Weight))
			// Standard Error: 311_000
			.saturating_add((50_157_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(30_026_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 134_000
			.saturating_add((12_718_000_u64).saturating_mul(n as Weight))
			// Standard Error: 489_000
			.saturating_add((33_962_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn init_leave_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 59_000
			.saturating_add((9_561_000_u64).saturating_mul(n as Weight))
			// Standard Error: 159_000
			.saturating_add((31_053_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 68_000
			.saturating_add((9_300_000_u64).saturating_mul(n as Weight))
			// Standard Error: 183_000
			.saturating_add((30_478_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 66_000
			.saturating_add((9_543_000_u64).saturating_mul(n as Weight))
			// Standard Error: 179_000
			.saturating_add((56_692_000_u64).saturating_mul(m as Weight))
			// Standard Error: 674_000
			.saturating_add((3_644_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 132_000
			.saturating_add((12_500_000_u64).saturating_mul(n as Weight))
			// Standard Error: 490_000
			.saturating_add((33_759_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_626_000
			.saturating_add((8_660_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 137_000
			.saturating_add((12_873_000_u64).saturating_mul(n as Weight))
			// Standard Error: 502_000
			.saturating_add((34_035_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 142_000
			.saturating_add((12_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 585_000
			.saturating_add((36_602_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 136_000
			.saturating_add((12_365_000_u64).saturating_mul(n as Weight))
			// Standard Error: 570_000
			.saturating_add((29_517_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_698_000
			.saturating_add((8_980_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 138_000
			.saturating_add((12_254_000_u64).saturating_mul(n as Weight))
			// Standard Error: 567_000
			.saturating_add((35_130_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 145_000
			.saturating_add((12_495_000_u64).saturating_mul(n as Weight))
			// Standard Error: 596_000
			.saturating_add((35_904_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 356_000
			.saturating_add((13_912_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_463_000
			.saturating_add((33_853_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(61_140_000_u64)
			// Standard Error: 66_000
			.saturating_add((138_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
