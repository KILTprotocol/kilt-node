// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-06, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// ../../runtimes/spiritnet/src/weights/parachain_staking.rs
// --template
// ../../.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(6_412_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(27_010_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(51_457_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_inflation() -> Weight {
		(23_705_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 25_000
			.saturating_add((24_475_000_u64).saturating_mul(n as Weight))
			// Standard Error: 71_000
			.saturating_add((16_212_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(27_932_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(212_069_000_u64)
			// Standard Error: 25_000
			.saturating_add((2_800_000_u64).saturating_mul(n as Weight))
			// Standard Error: 70_000
			.saturating_add((37_211_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(186_428_000_u64)
			// Standard Error: 86_000
			.saturating_add((3_899_000_u64).saturating_mul(n as Weight))
			// Standard Error: 315_000
			.saturating_add((8_897_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(317_469_000_u64)
			// Standard Error: 14_000
			.saturating_add((1_504_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((6_147_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(309_247_000_u64)
			// Standard Error: 14_000
			.saturating_add((1_503_000_u64).saturating_mul(n as Weight))
			// Standard Error: 38_000
			.saturating_add((6_144_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 22_000
			.saturating_add((2_126_000_u64).saturating_mul(n as Weight))
			// Standard Error: 61_000
			.saturating_add((33_729_000_u64).saturating_mul(m as Weight))
			// Standard Error: 270_000
			.saturating_add((1_040_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(97_085_000_u64)
			// Standard Error: 84_000
			.saturating_add((3_999_000_u64).saturating_mul(n as Weight))
			// Standard Error: 311_000
			.saturating_add((9_218_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_033_000
			.saturating_add((7_143_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(128_451_000_u64)
			// Standard Error: 89_000
			.saturating_add((3_874_000_u64).saturating_mul(n as Weight))
			// Standard Error: 326_000
			.saturating_add((8_698_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(182_344_000_u64)
			// Standard Error: 91_000
			.saturating_add((4_093_000_u64).saturating_mul(n as Weight))
			// Standard Error: 376_000
			.saturating_add((10_190_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(96_755_000_u64)
			// Standard Error: 83_000
			.saturating_add((4_010_000_u64).saturating_mul(n as Weight))
			// Standard Error: 347_000
			.saturating_add((9_758_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_190_000
			.saturating_add((7_392_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(130_120_000_u64)
			// Standard Error: 88_000
			.saturating_add((3_923_000_u64).saturating_mul(n as Weight))
			// Standard Error: 362_000
			.saturating_add((9_558_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(138_501_000_u64)
			// Standard Error: 88_000
			.saturating_add((3_925_000_u64).saturating_mul(n as Weight))
			// Standard Error: 364_000
			.saturating_add((9_641_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(145_234_000_u64)
			// Standard Error: 89_000
			.saturating_add((3_987_000_u64).saturating_mul(n as Weight))
			// Standard Error: 366_000
			.saturating_add((9_265_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(57_407_000_u64)
			// Standard Error: 64_000
			.saturating_add((314_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(25_919_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 170_000
			.saturating_add((61_014_000_u64).saturating_mul(n as Weight))
			// Standard Error: 600_000
			.saturating_add((34_491_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}
