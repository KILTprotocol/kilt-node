// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=50
// --repeat=20
// --chain=spiritnet-dev
// --pallet=parachain-staking
// --extrinsic=*
// --output=./runtimes/spiritnet/src/weights/parachain_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 5_917_000 picoseconds.
		Weight::from_parts(6_095_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 21_255_000 picoseconds.
		Weight::from_parts(21_555_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `817`
		//  Estimated: `9673`
		// Minimum execution time: 38_789_000 picoseconds.
		Weight::from_parts(39_328_000, 0)
			.saturating_add(Weight::from_parts(0, 9673))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_536_000 picoseconds.
		Weight::from_parts(7_047_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:76 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:2700 w:2700)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (3709 ±0) + m * (7573 ±0)`
		//  Estimated: `378624 + n * (70593 ±1_012) + m * (129441 ±2_174)`
		// Minimum execution time: 740_663_000 picoseconds.
		Weight::from_parts(745_258_000, 0)
			.saturating_add(Weight::from_parts(0, 378624))
			// Standard Error: 5_067_636
			.saturating_add(Weight::from_parts(156_713_671, 0).saturating_mul(n.into()))
			// Standard Error: 10_880_103
			.saturating_add(Weight::from_parts(303_105_550, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(152))
			.saturating_add(T::DbWeight::get().reads((27_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((51_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(145))
			.saturating_add(T::DbWeight::get().writes((25_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((51_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 70593).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 129441).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:59 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (1843 ±0) + m * (2832 ±0)`
		//  Estimated: `13348 + n * (3554 ±9)`
		// Minimum execution time: 36_513_000 picoseconds.
		Weight::from_parts(36_958_000, 0)
			.saturating_add(Weight::from_parts(0, 13348))
			// Standard Error: 22_930
			.saturating_add(Weight::from_parts(3_358_820, 0).saturating_mul(n.into()))
			// Standard Error: 50_753
			.saturating_add(Weight::from_parts(162_088, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 3554).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `335`
		//  Estimated: `1505`
		// Minimum execution time: 17_391_000 picoseconds.
		Weight::from_parts(17_937_000, 0)
			.saturating_add(Weight::from_parts(0, 1505))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:17 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:36 w:36)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:36 w:36)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:35 w:35)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (397 ±0) + m * (2303 ±0)`
		//  Estimated: `128588 + m * (16076 ±0) + n * (408 ±3)`
		// Minimum execution time: 140_878_000 picoseconds.
		Weight::from_parts(141_839_000, 0)
			.saturating_add(Weight::from_parts(0, 128588))
			// Standard Error: 23_270
			.saturating_add(Weight::from_parts(847_361, 0).saturating_mul(n.into()))
			// Standard Error: 51_622
			.saturating_add(Weight::from_parts(26_970_359, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(29))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(10))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 16076).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 408).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2664 + n * (75 ±0) + m * (36 ±0)`
		//  Estimated: `30482 + m * (43 ±0)`
		// Minimum execution time: 78_926_000 picoseconds.
		Weight::from_parts(62_358_498, 0)
			.saturating_add(Weight::from_parts(0, 30482))
			// Standard Error: 10_039
			.saturating_add(Weight::from_parts(476_834, 0).saturating_mul(n.into()))
			// Standard Error: 20_848
			.saturating_add(Weight::from_parts(877_525, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 43).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:17 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2007 + n * (71 ±0) + m * (816 ±0)`
		//  Estimated: `83093`
		// Minimum execution time: 114_176_000 picoseconds.
		Weight::from_parts(90_181_283, 0)
			.saturating_add(Weight::from_parts(0, 83093))
			// Standard Error: 9_540
			.saturating_add(Weight::from_parts(547_546, 0).saturating_mul(n.into()))
			// Standard Error: 15_471
			.saturating_add(Weight::from_parts(1_326_851, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(21))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `780 + n * (53 ±0) + m * (96 ±0)`
		//  Estimated: `17613`
		// Minimum execution time: 50_971_000 picoseconds.
		Weight::from_parts(43_859_826, 0)
			.saturating_add(Weight::from_parts(0, 17613))
			// Standard Error: 6_912
			.saturating_add(Weight::from_parts(259_619, 0).saturating_mul(n.into()))
			// Standard Error: 11_210
			.saturating_add(Weight::from_parts(611_351, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:36 w:36)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:36 w:36)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:35 w:35)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (335 ±0) + m * (1534 ±0)`
		//  Estimated: `37712 + m * (13982 ±0) + n * (354 ±3)`
		// Minimum execution time: 71_321_000 picoseconds.
		Weight::from_parts(72_332_000, 0)
			.saturating_add(Weight::from_parts(0, 37712))
			// Standard Error: 20_341
			.saturating_add(Weight::from_parts(695_408, 0).saturating_mul(n.into()))
			// Standard Error: 44_548
			.saturating_add(Weight::from_parts(27_111_952, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(8))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 13982).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 354).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3120 + n * (65 ±0) + m * (90 ±0) + u * (24 ±0)`
		//  Estimated: `39084`
		// Minimum execution time: 87_179_000 picoseconds.
		Weight::from_parts(58_277_952, 0)
			.saturating_add(Weight::from_parts(0, 39084))
			// Standard Error: 9_479
			.saturating_add(Weight::from_parts(530_053, 0).saturating_mul(n.into()))
			// Standard Error: 19_677
			.saturating_add(Weight::from_parts(1_041_829, 0).saturating_mul(m.into()))
			// Standard Error: 72_889
			.saturating_add(Weight::from_parts(1_259_746, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2099 + n * (60 ±0) + m * (70 ±0)`
		//  Estimated: `29222`
		// Minimum execution time: 66_711_000 picoseconds.
		Weight::from_parts(49_353_960, 0)
			.saturating_add(Weight::from_parts(0, 29222))
			// Standard Error: 10_074
			.saturating_add(Weight::from_parts(481_765, 0).saturating_mul(n.into()))
			// Standard Error: 20_919
			.saturating_add(Weight::from_parts(917_097, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3747 + n * (83 ±0) + m * (92 ±0)`
		//  Estimated: `41804`
		// Minimum execution time: 91_495_000 picoseconds.
		Weight::from_parts(65_726_386, 0)
			.saturating_add(Weight::from_parts(0, 41804))
			// Standard Error: 10_391
			.saturating_add(Weight::from_parts(629_847, 0).saturating_mul(n.into()))
			// Standard Error: 23_093
			.saturating_add(Weight::from_parts(1_274_132, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4180 + n * (72 ±0) + m * (88 ±0) + u * (24 ±0)`
		//  Estimated: `41136`
		// Minimum execution time: 93_748_000 picoseconds.
		Weight::from_parts(65_991_357, 0)
			.saturating_add(Weight::from_parts(0, 41136))
			// Standard Error: 8_793
			.saturating_add(Weight::from_parts(575_335, 0).saturating_mul(n.into()))
			// Standard Error: 19_536
			.saturating_add(Weight::from_parts(1_079_595, 0).saturating_mul(m.into()))
			// Standard Error: 75_771
			.saturating_add(Weight::from_parts(1_194_580, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2952 + n * (67 ±0) + m * (71 ±0)`
		//  Estimated: `32775`
		// Minimum execution time: 76_554_000 picoseconds.
		Weight::from_parts(58_251_021, 0)
			.saturating_add(Weight::from_parts(0, 32775))
			// Standard Error: 9_940
			.saturating_add(Weight::from_parts(511_854, 0).saturating_mul(n.into()))
			// Standard Error: 22_091
			.saturating_add(Weight::from_parts(1_000_790, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2952 + n * (67 ±0) + m * (71 ±0)`
		//  Estimated: `32775`
		// Minimum execution time: 81_613_000 picoseconds.
		Weight::from_parts(64_907_942, 0)
			.saturating_add(Weight::from_parts(0, 32775))
			// Standard Error: 10_321
			.saturating_add(Weight::from_parts(522_995, 0).saturating_mul(n.into()))
			// Standard Error: 22_939
			.saturating_add(Weight::from_parts(962_744, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1424 + u * (24 ±0)`
		//  Estimated: `12107`
		// Minimum execution time: 35_578_000 picoseconds.
		Weight::from_parts(38_956_496, 0)
			.saturating_add(Weight::from_parts(0, 12107))
			// Standard Error: 63_027
			.saturating_add(Weight::from_parts(545_294, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_651_000 picoseconds.
		Weight::from_parts(17_415_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `17198`
		// Minimum execution time: 29_070_000 picoseconds.
		Weight::from_parts(29_508_000, 0)
			.saturating_add(Weight::from_parts(0, 17198))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_collator_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590`
		//  Estimated: `18900`
		// Minimum execution time: 28_110_000 picoseconds.
		Weight::from_parts(28_739_000, 0)
			.saturating_add(Weight::from_parts(0, 18900))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking Rewards (r:1 w:1)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `918`
		//  Estimated: `7118`
		// Minimum execution time: 60_901_000 picoseconds.
		Weight::from_parts(61_463_000, 0)
			.saturating_add(Weight::from_parts(0, 7118))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	/// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainStaking InflationConfig (r:1 w:1)
	/// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:76 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	/// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	/// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Rewards (r:2700 w:2700)
	/// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (3647 ±0) + m * (7573 ±0)`
		//  Estimated: `380117 + n * (70593 ±1) + m * (129441 ±2_167)`
		// Minimum execution time: 739_097_000 picoseconds.
		Weight::from_parts(747_544_000, 0)
			.saturating_add(Weight::from_parts(0, 380117))
			// Standard Error: 4_878_992
			.saturating_add(Weight::from_parts(149_830_014, 0).saturating_mul(n.into()))
			// Standard Error: 10_475_089
			.saturating_add(Weight::from_parts(295_709_181, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(153))
			.saturating_add(T::DbWeight::get().reads((27_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((51_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(146))
			.saturating_add(T::DbWeight::get().writes((25_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((51_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 70593).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 129441).saturating_mul(m.into()))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_on_initialize_no_action() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_on_initialize_round_update() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_on_initialize_network_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 9673
		);
	}
	#[test]
	fn test_set_inflation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 378624
		);
	}
	#[test]
	fn test_set_max_selected_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 13348
		);
	}
	#[test]
	fn test_set_blocks_per_round() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1505
		);
	}
	#[test]
	fn test_force_remove_candidate() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 128588
		);
	}
	#[test]
	fn test_join_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 30482
		);
	}
	#[test]
	fn test_init_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 83093
		);
	}
	#[test]
	fn test_cancel_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 17613
		);
	}
	#[test]
	fn test_execute_leave_candidates() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 37712
		);
	}
	#[test]
	fn test_candidate_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 39084
		);
	}
	#[test]
	fn test_candidate_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 29222
		);
	}
	#[test]
	fn test_join_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 41804
		);
	}
	#[test]
	fn test_delegator_stake_more() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 41136
		);
	}
	#[test]
	fn test_delegator_stake_less() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 32775
		);
	}
	#[test]
	fn test_leave_delegators() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 32775
		);
	}
	#[test]
	fn test_unlock_unstaked() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 12107
		);
	}
	#[test]
	fn test_increment_delegator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 17198
		);
	}
	#[test]
	fn test_increment_collator_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 18900
		);
	}
	#[test]
	fn test_claim_rewards() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7118
		);
	}
	#[test]
	fn test_execute_scheduled_reward_change() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 380117
		);
	}
}
