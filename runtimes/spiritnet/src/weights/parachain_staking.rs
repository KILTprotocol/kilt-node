// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-30, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/ubuntu/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// runtimes/spiritnet/src/weights/parachain_staking.rs
// --template
// .maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_new_year() -> Weight;
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn revoke_delegation(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn increase_max_candidate_stake_by() -> Weight;
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_no_action() -> Weight {
		(9_310_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(40_601_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(78_491_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_inflation() -> Weight {
		(36_101_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 52_000
			.saturating_add((38_322_000_u64).saturating_mul(n as Weight))
			// Standard Error: 147_000
			.saturating_add((23_057_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(42_650_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(459_300_000_u64)
			// Standard Error: 47_000
			.saturating_add((3_384_000_u64).saturating_mul(n as Weight))
			// Standard Error: 130_000
			.saturating_add((55_911_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(355_455_000_u64)
			// Standard Error: 147_000
			.saturating_add((5_810_000_u64).saturating_mul(n as Weight))
			// Standard Error: 537_000
			.saturating_add((12_254_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(571_823_000_u64)
			// Standard Error: 32_000
			.saturating_add((1_927_000_u64).saturating_mul(n as Weight))
			// Standard Error: 88_000
			.saturating_add((7_885_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(22_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(572_276_000_u64)
			// Standard Error: 32_000
			.saturating_add((1_920_000_u64).saturating_mul(n as Weight))
			// Standard Error: 87_000
			.saturating_add((7_707_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 41_000
			.saturating_add((2_373_000_u64).saturating_mul(n as Weight))
			// Standard Error: 113_000
			.saturating_add((50_728_000_u64).saturating_mul(m as Weight))
			// Standard Error: 495_000
			.saturating_add((480_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(253_362_000_u64)
			// Standard Error: 141_000
			.saturating_add((5_698_000_u64).saturating_mul(n as Weight))
			// Standard Error: 522_000
			.saturating_add((12_324_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_731_000
			.saturating_add((9_019_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(247_134_000_u64)
			// Standard Error: 148_000
			.saturating_add((5_784_000_u64).saturating_mul(n as Weight))
			// Standard Error: 542_000
			.saturating_add((12_492_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(358_480_000_u64)
			// Standard Error: 154_000
			.saturating_add((5_988_000_u64).saturating_mul(n as Weight))
			// Standard Error: 634_000
			.saturating_add((14_020_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(230_135_000_u64)
			// Standard Error: 138_000
			.saturating_add((5_785_000_u64).saturating_mul(n as Weight))
			// Standard Error: 579_000
			.saturating_add((13_010_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_983_000
			.saturating_add((11_431_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(273_209_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_663_000_u64).saturating_mul(n as Weight))
			// Standard Error: 623_000
			.saturating_add((13_023_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(283_927_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_865_000_u64).saturating_mul(n as Weight))
			// Standard Error: 623_000
			.saturating_add((13_224_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(288_232_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_823_000_u64).saturating_mul(n as Weight))
			// Standard Error: 624_000
			.saturating_add((13_065_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(88_570_000_u64)
			// Standard Error: 17_000
			.saturating_add((426_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(40_291_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 134_000
			.saturating_add((95_984_000_u64).saturating_mul(n as Weight))
			// Standard Error: 490_000
			.saturating_add((56_981_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_no_action() -> Weight {
		(9_310_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(40_601_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(78_491_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_inflation() -> Weight {
		(36_101_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 52_000
			.saturating_add((38_322_000_u64).saturating_mul(n as Weight))
			// Standard Error: 147_000
			.saturating_add((23_057_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(42_650_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(459_300_000_u64)
			// Standard Error: 47_000
			.saturating_add((3_384_000_u64).saturating_mul(n as Weight))
			// Standard Error: 130_000
			.saturating_add((55_911_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(355_455_000_u64)
			// Standard Error: 147_000
			.saturating_add((5_810_000_u64).saturating_mul(n as Weight))
			// Standard Error: 537_000
			.saturating_add((12_254_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(571_823_000_u64)
			// Standard Error: 32_000
			.saturating_add((1_927_000_u64).saturating_mul(n as Weight))
			// Standard Error: 88_000
			.saturating_add((7_885_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(22_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(572_276_000_u64)
			// Standard Error: 32_000
			.saturating_add((1_920_000_u64).saturating_mul(n as Weight))
			// Standard Error: 87_000
			.saturating_add((7_707_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 41_000
			.saturating_add((2_373_000_u64).saturating_mul(n as Weight))
			// Standard Error: 113_000
			.saturating_add((50_728_000_u64).saturating_mul(m as Weight))
			// Standard Error: 495_000
			.saturating_add((480_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(253_362_000_u64)
			// Standard Error: 141_000
			.saturating_add((5_698_000_u64).saturating_mul(n as Weight))
			// Standard Error: 522_000
			.saturating_add((12_324_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_731_000
			.saturating_add((9_019_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(247_134_000_u64)
			// Standard Error: 148_000
			.saturating_add((5_784_000_u64).saturating_mul(n as Weight))
			// Standard Error: 542_000
			.saturating_add((12_492_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(358_480_000_u64)
			// Standard Error: 154_000
			.saturating_add((5_988_000_u64).saturating_mul(n as Weight))
			// Standard Error: 634_000
			.saturating_add((14_020_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(230_135_000_u64)
			// Standard Error: 138_000
			.saturating_add((5_785_000_u64).saturating_mul(n as Weight))
			// Standard Error: 579_000
			.saturating_add((13_010_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_983_000
			.saturating_add((11_431_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(273_209_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_663_000_u64).saturating_mul(n as Weight))
			// Standard Error: 623_000
			.saturating_add((13_023_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(283_927_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_865_000_u64).saturating_mul(n as Weight))
			// Standard Error: 623_000
			.saturating_add((13_224_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(288_232_000_u64)
			// Standard Error: 151_000
			.saturating_add((5_823_000_u64).saturating_mul(n as Weight))
			// Standard Error: 624_000
			.saturating_add((13_065_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(88_570_000_u64)
			// Standard Error: 17_000
			.saturating_add((426_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(40_291_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 134_000
			.saturating_add((95_984_000_u64).saturating_mul(n as Weight))
			// Standard Error: 490_000
			.saturating_add((56_981_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}
