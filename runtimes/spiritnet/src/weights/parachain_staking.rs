// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --steps=50
// --repeat=20
// --pallet=parachain_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/spiritnet/src/weights/parachain_staking.rs
// --template=.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for parachain_staking using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for WeightInfo<T> {
	fn on_initialize_no_action() -> Weight {
		(4_327_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(19_783_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(37_632_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(2_549_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(18_123_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 21_000
			.saturating_add((17_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 60_000
			.saturating_add((14_437_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(20_792_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(121_960_000_u64)
			// Standard Error: 16_000
			.saturating_add((3_009_000_u64).saturating_mul(n as Weight))
			// Standard Error: 45_000
			.saturating_add((29_321_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(25_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(98_538_000_u64)
			// Standard Error: 31_000
			.saturating_add((3_759_000_u64).saturating_mul(n as Weight))
			// Standard Error: 114_000
			.saturating_add((9_188_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(158_112_000_u64)
			// Standard Error: 7_000
			.saturating_add((2_385_000_u64).saturating_mul(n as Weight))
			// Standard Error: 20_000
			.saturating_add((7_638_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(139_578_000_u64)
			// Standard Error: 7_000
			.saturating_add((2_573_000_u64).saturating_mul(n as Weight))
			// Standard Error: 19_000
			.saturating_add((8_196_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 8_000
			.saturating_add((2_739_000_u64).saturating_mul(n as Weight))
			// Standard Error: 23_000
			.saturating_add((27_901_000_u64).saturating_mul(m as Weight))
			// Standard Error: 101_000
			.saturating_add((2_155_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 32_000
			.saturating_add((4_043_000_u64).saturating_mul(n as Weight))
			// Standard Error: 121_000
			.saturating_add((9_833_000_u64).saturating_mul(m as Weight))
			// Standard Error: 463_000
			.saturating_add((7_218_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(22_575_000_u64)
			// Standard Error: 32_000
			.saturating_add((3_998_000_u64).saturating_mul(n as Weight))
			// Standard Error: 119_000
			.saturating_add((9_658_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(95_527_000_u64)
			// Standard Error: 34_000
			.saturating_add((3_848_000_u64).saturating_mul(n as Weight))
			// Standard Error: 140_000
			.saturating_add((10_112_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(17_409_000_u64)
			// Standard Error: 30_000
			.saturating_add((3_850_000_u64).saturating_mul(n as Weight))
			// Standard Error: 127_000
			.saturating_add((9_876_000_u64).saturating_mul(m as Weight))
			// Standard Error: 508_000
			.saturating_add((6_918_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(44_100_000_u64)
			// Standard Error: 32_000
			.saturating_add((3_779_000_u64).saturating_mul(n as Weight))
			// Standard Error: 131_000
			.saturating_add((9_729_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(44_193_000_u64)
			// Standard Error: 31_000
			.saturating_add((3_847_000_u64).saturating_mul(n as Weight))
			// Standard Error: 130_000
			.saturating_add((9_942_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(51_961_000_u64)
			// Standard Error: 31_000
			.saturating_add((3_794_000_u64).saturating_mul(n as Weight))
			// Standard Error: 130_000
			.saturating_add((9_743_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(45_851_000_u64)
			// Standard Error: 7_000
			.saturating_add((509_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(16_449_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}