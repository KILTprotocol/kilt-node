// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/spiritnet/src/weights/pallet_collective.rs
// --template=.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for pallet_collective using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 13_000
			.saturating_add((16_581_000_u64).saturating_mul(m as Weight))
			// Standard Error: 13_000
			.saturating_add((205_000_u64).saturating_mul(n as Weight))
			// Standard Error: 13_000
			.saturating_add((22_426_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p as Weight)))
	}
	fn execute(b: u32, m: u32, ) -> Weight {
		(24_592_000_u64)
			// Standard Error: 0
			.saturating_add((3_000_u64).saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add((90_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(29_628_000_u64)
			// Standard Error: 0
			.saturating_add((3_000_u64).saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add((173_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(44_081_000_u64)
			// Standard Error: 0
			.saturating_add((9_000_u64).saturating_mul(b as Weight))
			// Standard Error: 2_000
			.saturating_add((97_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add((434_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn vote(m: u32, ) -> Weight {
		(42_703_000_u64)
			// Standard Error: 2_000
			.saturating_add((190_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(50_876_000_u64)
			// Standard Error: 2_000
			.saturating_add((156_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_000
			.saturating_add((375_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(58_670_000_u64)
			// Standard Error: 0
			.saturating_add((6_000_u64).saturating_mul(b as Weight))
			// Standard Error: 2_000
			.saturating_add((206_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add((425_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(54_857_000_u64)
			// Standard Error: 1_000
			.saturating_add((168_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_000
			.saturating_add((376_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(64_753_000_u64)
			// Standard Error: 0
			.saturating_add((6_000_u64).saturating_mul(b as Weight))
			// Standard Error: 2_000
			.saturating_add((195_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_000
			.saturating_add((425_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn disapprove_proposal(p: u32, ) -> Weight {
		(29_858_000_u64)
			// Standard Error: 1_000
			.saturating_add((438_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
