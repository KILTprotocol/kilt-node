// KILT Blockchain – <https://kilt.io>
// Copyright (C) 2025, KILT Foundation

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at <hello@kilt.io>

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-05-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --pallet=pallet-proxy
// --extrinsic=*
// --genesis-builder=runtime
// --runtime=./target/release/wbuild/spiritnet-runtime/spiritnet_runtime.compact.compressed.wasm
// --header=HEADER-GPL
// --template=.maintain/runtime-weight-template.hbs
// --output=./runtimes/spiritnet/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
	/// Storage: `Proxy::Proxies` (r:1 w:0)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 9]`.
	fn proxy(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161 + p * (41 ±0)`
		//  Estimated: `3932`
		// Minimum execution time: 23_655_000 picoseconds.
		Weight::from_parts(24_240_848, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 2_368
			.saturating_add(Weight::from_parts(38_586, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:0)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Announcements` (r:1 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(777), added: 3252, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn proxy_announced(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `352 + a * (72 ±0) + p * (41 ±0)`
		//  Estimated: `4242`
		// Minimum execution time: 33_240_000 picoseconds.
		Weight::from_parts(33_847_922, 0)
			.saturating_add(Weight::from_parts(0, 4242))
			// Standard Error: 2_470
			.saturating_add(Weight::from_parts(213_133, 0).saturating_mul(a.into()))
			// Standard Error: 2_742
			.saturating_add(Weight::from_parts(38_058, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Announcements` (r:1 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(777), added: 3252, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn remove_announcement(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267 + a * (72 ±0)`
		//  Estimated: `4242`
		// Minimum execution time: 15_335_000 picoseconds.
		Weight::from_parts(16_157_577, 0)
			.saturating_add(Weight::from_parts(0, 4242))
			// Standard Error: 1_990
			.saturating_add(Weight::from_parts(204_068, 0).saturating_mul(a.into()))
			// Standard Error: 2_209
			.saturating_add(Weight::from_parts(2_216, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Announcements` (r:1 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(777), added: 3252, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn reject_announcement(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267 + a * (72 ±0)`
		//  Estimated: `4242`
		// Minimum execution time: 15_173_000 picoseconds.
		Weight::from_parts(16_113_440, 0)
			.saturating_add(Weight::from_parts(0, 4242))
			// Standard Error: 2_498
			.saturating_add(Weight::from_parts(195_758, 0).saturating_mul(a.into()))
			// Standard Error: 2_774
			.saturating_add(Weight::from_parts(7_401, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:0)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// Storage: `Proxy::Announcements` (r:1 w:1)
	/// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(777), added: 3252, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 9]`.
	/// The range of component `p` is `[1, 9]`.
	fn announce(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `280 + a * (72 ±0) + p * (41 ±0)`
		//  Estimated: `4242`
		// Minimum execution time: 26_029_000 picoseconds.
		Weight::from_parts(27_733_445, 0)
			.saturating_add(Weight::from_parts(0, 4242))
			// Standard Error: 7_084
			.saturating_add(Weight::from_parts(315_719, 0).saturating_mul(a.into()))
			// Standard Error: 7_865
			.saturating_add(Weight::from_parts(70_765, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 9]`.
	fn add_proxy(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161 + p * (41 ±0)`
		//  Estimated: `3932`
		// Minimum execution time: 20_751_000 picoseconds.
		Weight::from_parts(21_357_303, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 2_516
			.saturating_add(Weight::from_parts(25_020, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 9]`.
	fn remove_proxy(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161 + p * (41 ±0)`
		//  Estimated: `3932`
		// Minimum execution time: 20_509_000 picoseconds.
		Weight::from_parts(20_986_225, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 2_326
			.saturating_add(Weight::from_parts(61_382, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 9]`.
	fn remove_proxies(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161 + p * (41 ±0)`
		//  Estimated: `3932`
		// Minimum execution time: 14_178_000 picoseconds.
		Weight::from_parts(14_792_078, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 1_963
			.saturating_add(Weight::from_parts(17_653, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 9]`.
	fn create_pure(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `3932`
		// Minimum execution time: 23_004_000 picoseconds.
		Weight::from_parts(23_796_132, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(467), added: 2942, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 8]`.
	fn kill_pure(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202 + p * (41 ±0)`
		//  Estimated: `3932`
		// Minimum execution time: 15_569_000 picoseconds.
		Weight::from_parts(16_052_027, 0)
			.saturating_add(Weight::from_parts(0, 3932))
			// Standard Error: 1_843
			.saturating_add(Weight::from_parts(36_929, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
	#[test]
	fn test_proxy_announced() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4242
		);
	}
	#[test]
	fn test_remove_announcement() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4242
		);
	}
	#[test]
	fn test_reject_announcement() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4242
		);
	}
	#[test]
	fn test_announce() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4242
		);
	}
	#[test]
	fn test_add_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
	#[test]
	fn test_remove_proxy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
	#[test]
	fn test_remove_proxies() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
	#[test]
	fn test_create_pure() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
	#[test]
	fn test_kill_pure() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3932
		);
	}
}
