// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/spiritnet/src/weights/pallet_democracy.rs
// --template=.maintain/runtime-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for pallet_democracy using the recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_democracy::WeightInfo for WeightInfo<T> {
	fn propose() -> Weight {
		(78_083_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn second(s: u32, ) -> Weight {
		(44_614_000_u64)
			// Standard Error: 1_000
			.saturating_add((219_000_u64).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn vote_new(r: u32, ) -> Weight {
		(50_372_000_u64)
			// Standard Error: 2_000
			.saturating_add((230_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn vote_existing(r: u32, ) -> Weight {
		(50_119_000_u64)
			// Standard Error: 1_000
			.saturating_add((242_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn emergency_cancel() -> Weight {
		(29_091_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn blacklist(p: u32, ) -> Weight {
		(86_859_000_u64)
			// Standard Error: 5_000
			.saturating_add((566_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn external_propose(v: u32, ) -> Weight {
		(14_495_000_u64)
			// Standard Error: 0
			.saturating_add((92_000_u64).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn external_propose_majority() -> Weight {
		(3_067_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn external_propose_default() -> Weight {
		(3_109_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn fast_track() -> Weight {
		(30_752_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn veto_external(v: u32, ) -> Weight {
		(31_660_000_u64)
			// Standard Error: 0
			.saturating_add((130_000_u64).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn cancel_proposal(p: u32, ) -> Weight {
		(58_436_000_u64)
			// Standard Error: 2_000
			.saturating_add((572_000_u64).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_referendum() -> Weight {
		(18_351_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn cancel_queued(r: u32, ) -> Weight {
		(33_945_000_u64)
			// Standard Error: 2_000
			.saturating_add((1_406_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn on_initialize_base(r: u32, ) -> Weight {
		(10_390_000_u64)
			// Standard Error: 5_000
			.saturating_add((5_678_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
	}
	fn delegate(r: u32, ) -> Weight {
		(62_684_000_u64)
			// Standard Error: 7_000
			.saturating_add((7_925_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn undelegate(r: u32, ) -> Weight {
		(28_179_000_u64)
			// Standard Error: 6_000
			.saturating_add((7_991_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn clear_public_proposals() -> Weight {
		(3_405_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn note_preimage(b: u32, ) -> Weight {
		(47_990_000_u64)
			// Standard Error: 0
			.saturating_add((3_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn note_imminent_preimage(b: u32, ) -> Weight {
		(31_304_000_u64)
			// Standard Error: 0
			.saturating_add((3_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn reap_preimage(b: u32, ) -> Weight {
		(45_473_000_u64)
			// Standard Error: 0
			.saturating_add((2_000_u64).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn unlock_remove(r: u32, ) -> Weight {
		(44_061_000_u64)
			// Standard Error: 1_000
			.saturating_add((103_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn unlock_set(r: u32, ) -> Weight {
		(42_014_000_u64)
			// Standard Error: 2_000
			.saturating_add((203_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn remove_vote(r: u32, ) -> Weight {
		(23_036_000_u64)
			// Standard Error: 2_000
			.saturating_add((201_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn remove_other_vote(r: u32, ) -> Weight {
		(22_937_000_u64)
			// Standard Error: 1_000
			.saturating_add((213_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}