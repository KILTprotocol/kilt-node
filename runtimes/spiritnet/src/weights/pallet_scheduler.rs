// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=spiritnet-dev
// --steps=50
// --repeat=20
// --pallet=pallet-scheduler
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtimes/spiritnet/src/weights/pallet_scheduler.rs
// --template=.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `pallet_scheduler`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
	// Storage: Scheduler IncompleteSince (r:1 w:1)
	// Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn service_agendas_base() -> Weight {
		Weight::from_parts(7_259_000 as u64, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(39167), added: 41642, mode: MaxEncodedLen)
	fn service_agenda_base(s: u32, ) -> Weight {
		Weight::from_parts(8_732_296 as u64, 0)
			// Standard Error: 8_385
			.saturating_add(Weight::from_parts(1_201_595 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn service_task_base() -> Weight {
		Weight::from_parts(6_936_000 as u64, 0)
	}
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: Measured)
	// Storage: Preimage StatusFor (r:1 w:1)
	// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
	fn service_task_fetched(s: u32, ) -> Weight {
		Weight::from_parts(36_011_000 as u64, 0)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(1_768 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:0 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn service_task_named() -> Weight {
		Weight::from_parts(8_568_000 as u64, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn service_task_periodic() -> Weight {
		Weight::from_parts(6_813_000 as u64, 0)
	}
	fn execute_dispatch_signed() -> Weight {
		Weight::from_parts(3_487_000 as u64, 0)
	}
	fn execute_dispatch_unsigned() -> Weight {
		Weight::from_parts(4_863_000 as u64, 0)
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(39167), added: 41642, mode: MaxEncodedLen)
	fn schedule(s: u32, ) -> Weight {
		Weight::from_parts(22_448_494 as u64, 0)
			// Standard Error: 12_694
			.saturating_add(Weight::from_parts(1_153_307 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(39167), added: 41642, mode: MaxEncodedLen)
	// Storage: Scheduler Lookup (r:0 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn cancel(s: u32, ) -> Weight {
		Weight::from_parts(24_096_800 as u64, 0)
			// Standard Error: 13_060
			.saturating_add(Weight::from_parts(2_096_283 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(39167), added: 41642, mode: MaxEncodedLen)
	fn schedule_named(s: u32, ) -> Weight {
		Weight::from_parts(28_799_568 as u64, 0)
			// Standard Error: 15_283
			.saturating_add(Weight::from_parts(1_110_018 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	// Storage: Scheduler Agenda (r:1 w:1)
	// Proof: Scheduler Agenda (max_values: None, max_size: Some(39167), added: 41642, mode: MaxEncodedLen)
	fn cancel_named(s: u32, ) -> Weight {
		Weight::from_parts(26_672_036 as u64, 0)
			// Standard Error: 15_001
			.saturating_add(Weight::from_parts(2_108_784 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
