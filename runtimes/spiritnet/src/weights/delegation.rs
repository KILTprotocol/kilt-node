// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for `delegation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-23, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `eyrie-7`, CPU: `Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --template=.maintain/runtime-weight-template.hbs
// --header=HEADER-GPL
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=50
// --repeat=20
// --chain=spiritnet-dev
// --pallet=delegation
// --extrinsic=*
// --output=./runtimes/spiritnet/src/weights/delegation.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `delegation`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> delegation::WeightInfo for WeightInfo<T> {
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Ctype::Ctypes` (r:1 w:0)
	/// Proof: `Ctype::Ctypes` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationNodes` (r:0 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:0 w:1)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn create_hierarchy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `831`
		//  Estimated: `4414`
		// Minimum execution time: 59_533_000 picoseconds.
		Weight::from_parts(60_303_000, 0)
			.saturating_add(Weight::from_parts(0, 4414))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:2 w:2)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:0 w:1)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1008`
		//  Estimated: `70340`
		// Minimum execution time: 64_390_000 picoseconds.
		Weight::from_parts(65_022_000, 0)
			.saturating_add(Weight::from_parts(0, 70340))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:5 w:5)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_root_child(r: u32, _c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + r * (239 ±0)`
		//  Estimated: `3545 + r * (34675 ±0)`
		// Minimum execution time: 28_633_000 picoseconds.
		Weight::from_parts(19_097_805, 0)
			.saturating_add(Weight::from_parts(0, 3545))
			// Standard Error: 22_500
			.saturating_add(Weight::from_parts(12_368_883, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	/// The range of component `c` is `[1, 5]`.
	fn revoke_delegation_leaf(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `381 + c * (239 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 32_335_000 picoseconds.
		Weight::from_parts(27_546_500, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 16_625
			.saturating_add(Weight::from_parts(92_864, 0).saturating_mul(r.into()))
			// Standard Error: 16_625
			.saturating_add(Weight::from_parts(4_724_123, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:6)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:6 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	fn remove_delegation(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1157 + r * (294 ±0)`
		//  Estimated: `35665 + r * (34675 ±0)`
		// Minimum execution time: 112_075_000 picoseconds.
		Weight::from_parts(76_355_350, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 33_451
			.saturating_add(Weight::from_parts(37_872_450, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:6)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:6 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:0 w:1)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 5]`.
	fn reclaim_deposit(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1089 + r * (294 ±0)`
		//  Estimated: `35665 + r * (34675 ±0)`
		// Minimum execution time: 105_506_000 picoseconds.
		Weight::from_parts(69_755_215, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 25_827
			.saturating_add(Weight::from_parts(37_808_346, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(r.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Delegation::DelegationHierarchies` (r:1 w:0)
	/// Proof: `Delegation::DelegationHierarchies` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn can_attest() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580`
		//  Estimated: `35665`
		// Minimum execution time: 12_256_000 picoseconds.
		Weight::from_parts(12_734_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn can_revoke(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + c * (240 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 11_790_000 picoseconds.
		Weight::from_parts(8_588_458, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 16_987
			.saturating_add(Weight::from_parts(3_783_399, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:6 w:0)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn can_remove(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + c * (240 ±0)`
		//  Estimated: `35665 + c * (34675 ±0)`
		// Minimum execution time: 11_757_000 picoseconds.
		Weight::from_parts(8_488_516, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			// Standard Error: 16_641
			.saturating_add(Weight::from_parts(3_845_437, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 34675).saturating_mul(c.into()))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:1 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	fn change_deposit_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1738`
		//  Estimated: `35665`
		// Minimum execution time: 92_613_000 picoseconds.
		Weight::from_parts(93_736_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Delegation::DelegationNodes` (r:1 w:1)
	/// Proof: `Delegation::DelegationNodes` (`max_values`: None, `max_size`: Some(32200), added: 34675, mode: `MaxEncodedLen`)
	/// Storage: `Migration::MigratedKeys` (r:1 w:0)
	/// Proof: `Migration::MigratedKeys` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(949), added: 3424, mode: `MaxEncodedLen`)
	fn update_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1191`
		//  Estimated: `35665`
		// Minimum execution time: 78_911_000 picoseconds.
		Weight::from_parts(79_677_000, 0)
			.saturating_add(Weight::from_parts(0, 35665))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

#[cfg(test)]
mod tests {
	#[test]
	fn test_create_hierarchy() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4414
		);
	}
	#[test]
	fn test_add_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 70340
		);
	}
	#[test]
	fn test_revoke_delegation_root_child() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 3545
		);
	}
	#[test]
	fn test_revoke_delegation_leaf() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_remove_delegation() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_reclaim_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_attest() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_revoke() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_can_remove() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_change_deposit_owner() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
	#[test]
	fn test_update_deposit() {
		assert!(
			<crate::Runtime as frame_system::Config>::BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<sp_weights::Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 35665
		);
	}
}
