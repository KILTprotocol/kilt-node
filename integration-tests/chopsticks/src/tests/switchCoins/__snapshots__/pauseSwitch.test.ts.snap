// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Send ROCs while switch paused > sender events Balances 1`] = `
[
  {
    "data": {
      "amount": "(rounded 8100000)",
      "who": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
    },
    "method": "Withdraw",
    "section": "balances",
  },
]
`;

exports[`Send ROCs while switch paused > sender events xcm pallet 1`] = `
[
  {
    "data": {
      "outcome": {
        "Complete": {
          "used": {
            "proofSize": "(rounded 6200)",
            "refTime": "(rounded 290000000)",
          },
        },
      },
    },
    "method": "Attempted",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "fees": [
        {
          "fun": {
            "Fungible": "(rounded 100000000)",
          },
          "id": {
            "interior": "Here",
            "parents": 1,
          },
        },
      ],
      "paying": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "FeesPaid",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": "(rounded 2100)",
            },
          ],
        },
        "parents": 1,
      },
      "message": [
        {
          "ReserveAssetDeposited": [
            {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
          ],
        },
        "ClearOrigin",
        {
          "BuyExecution": {
            "fees": {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
            "weightLimit": "Unlimited",
          },
        },
        {
          "DepositAsset": {
            "assets": {
              "Wild": {
                "AllCounted": 1,
              },
            },
            "beneficiary": {
              "interior": {
                "X1": [
                  {
                    "AccountId32": {
                      "id": "(hash)",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "polkadotXcm",
  },
]
`;

exports[`Send ROCs while switch paused > sender events xcm queue pallet 1`] = `
[
  {
    "data": {
      "messageHash": "(hash)",
    },
    "method": "XcmpMessageSent",
    "section": "xcmpQueue",
  },
]
`;

exports[`Switch PILTs against ePILTs while paused > sender events Balances 1`] = `
[
  {
    "data": {
      "amount": "(rounded 8100000)",
      "who": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
    },
    "method": "Withdraw",
    "section": "balances",
  },
]
`;

exports[`Switch PILTs against ePILTs while paused > sender events xcm pallet 1`] = `
[
  {
    "data": {
      "outcome": {
        "Complete": {
          "used": {
            "proofSize": "(rounded 6200)",
            "refTime": "(rounded 290000000)",
          },
        },
      },
    },
    "method": "Attempted",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "fees": [
        {
          "fun": {
            "Fungible": "(rounded 100000000)",
          },
          "id": {
            "interior": "Here",
            "parents": 1,
          },
        },
      ],
      "paying": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "FeesPaid",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": "(rounded 2100)",
            },
          ],
        },
        "parents": 1,
      },
      "message": [
        {
          "ReserveAssetDeposited": [
            {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
          ],
        },
        "ClearOrigin",
        {
          "BuyExecution": {
            "fees": {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
            "weightLimit": "Unlimited",
          },
        },
        {
          "DepositAsset": {
            "assets": {
              "Wild": {
                "AllCounted": 1,
              },
            },
            "beneficiary": {
              "interior": {
                "X1": [
                  {
                    "AccountId32": {
                      "id": "(hash)",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "polkadotXcm",
  },
]
`;

exports[`Switch PILTs against ePILTs while paused > sender events xcm queue pallet 1`] = `
[
  {
    "data": {
      "messageHash": "(hash)",
    },
    "method": "XcmpMessageSent",
    "section": "xcmpQueue",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > PolkadotXCM Sending eKILTs back while switch is paused 1`] = `
[
  {
    "data": {
      "assets": {
        "V3": [
          {
            "fun": {
              "Fungible": "(rounded 7200)",
            },
            "id": {
              "Concrete": {
                "interior": {
                  "X2": [
                    {
                      "GlobalConsensus": {
                        "Ethereum": {
                          "chainId": "(rounded 11000000)",
                        },
                      },
                    },
                    {
                      "AccountKey20": {
                        "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                        "network": null,
                      },
                    },
                  ],
                },
                "parents": 2,
              },
            },
          },
        ],
      },
      "hash_": "(hash)",
      "origin": {
        "interior": {
          "X1": {
            "Parachain": 1000,
          },
        },
        "parents": 1,
      },
    },
    "method": "AssetsTrapped",
    "section": "polkadotXcm",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > Sending eKILTs back 1`] = `
[
  {
    "data": {
      "amount": 25000000000000000,
      "assetId": {
        "interior": {
          "X2": [
            {
              "GlobalConsensus": {
                "Ethereum": {
                  "chainId": "(rounded 11000000)",
                },
              },
            },
            {
              "AccountKey20": {
                "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                "network": null,
              },
            },
          ],
        },
        "parents": 2,
      },
      "from": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
      "to": "5Eg2fnshxV9kofpcNEFE7azHLAjcCtpNkbsH3kkWZasYUVKs",
    },
    "method": "Transferred",
    "section": "foreignAssets",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > Switch events assetSwitchPool pallet 1`] = `
[
  {
    "data": {
      "amount": 50000000000000000,
      "from": "4seWojfEHrk5YKPahdErazQ3CWEHZYi6NV4gKz5AaejWbRPJ",
      "to": {
        "V3": {
          "interior": {
            "X1": {
              "AccountId32": {
                "id": "(hash)",
                "network": null,
              },
            },
          },
          "parents": 0,
        },
      },
    },
    "method": "LocalToRemoteSwitchExecuted",
    "section": "assetSwitchPool1",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > sender events Balances 1`] = `
[
  {
    "data": {
      "amount": "(rounded 8100000)",
      "who": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
    },
    "method": "Withdraw",
    "section": "balances",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > sender events xcm pallet 1`] = `
[
  {
    "data": {
      "outcome": {
        "Complete": {
          "used": {
            "proofSize": "(rounded 6200)",
            "refTime": "(rounded 290000000)",
          },
        },
      },
    },
    "method": "Attempted",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "fees": [
        {
          "fun": {
            "Fungible": "(rounded 100000000)",
          },
          "id": {
            "interior": "Here",
            "parents": 1,
          },
        },
      ],
      "paying": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "FeesPaid",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": "(rounded 2100)",
            },
          ],
        },
        "parents": 1,
      },
      "message": [
        {
          "ReserveAssetDeposited": [
            {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
          ],
        },
        "ClearOrigin",
        {
          "BuyExecution": {
            "fees": {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
            "weightLimit": "Unlimited",
          },
        },
        {
          "DepositAsset": {
            "assets": {
              "Wild": {
                "AllCounted": 1,
              },
            },
            "beneficiary": {
              "interior": {
                "X1": [
                  {
                    "AccountId32": {
                      "id": "(hash)",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "polkadotXcm",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > sender events xcm queue pallet 1`] = `
[
  {
    "data": {
      "messageHash": "(hash)",
    },
    "method": "XcmpMessageSent",
    "section": "xcmpQueue",
  },
]
`;

exports[`Switch ePILTs agains PILTs while paused > xcmpQueue Sending eKILTs back while switch is paused 1`] = `
[
  {
    "data": {
      "error": "FailedToTransactAsset",
      "messageHash": "(hash)",
      "messageId": "(hash)",
      "weight": {
        "proofSize": 0,
        "refTime": 800000000,
      },
    },
    "method": "Fail",
    "section": "xcmpQueue",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > PolkadotXCM Sending eKILTs back while switch is paused 1`] = `
[
  {
    "data": {
      "assets": {
        "V3": [
          {
            "fun": {
              "Fungible": "(rounded 7200)",
            },
            "id": {
              "Concrete": {
                "interior": {
                  "X2": [
                    {
                      "GlobalConsensus": {
                        "Ethereum": {
                          "chainId": "(rounded 11000000)",
                        },
                      },
                    },
                    {
                      "AccountKey20": {
                        "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                        "network": null,
                      },
                    },
                  ],
                },
                "parents": 2,
              },
            },
          },
        ],
      },
      "hash_": "(hash)",
      "origin": {
        "interior": {
          "X1": {
            "Parachain": 1000,
          },
        },
        "parents": 1,
      },
    },
    "method": "AssetsTrapped",
    "section": "polkadotXcm",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > Sending eKILTs back 1`] = `
[
  {
    "data": {
      "amount": 25000000000000000,
      "assetId": {
        "interior": {
          "X2": [
            {
              "GlobalConsensus": {
                "Ethereum": {
                  "chainId": "(rounded 11000000)",
                },
              },
            },
            {
              "AccountKey20": {
                "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                "network": null,
              },
            },
          ],
        },
        "parents": 2,
      },
      "from": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
      "to": "5Eg2fnshxV9kofpcNEFE7azHLAjcCtpNkbsH3kkWZasYUVKs",
    },
    "method": "Transferred",
    "section": "foreignAssets",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > Switch events assetSwitchPool pallet 1`] = `
[
  {
    "data": {
      "amount": 50000000000000000,
      "from": "4seWojfEHrk5YKPahdErazQ3CWEHZYi6NV4gKz5AaejWbRPJ",
      "to": {
        "V3": {
          "interior": {
            "X1": {
              "AccountId32": {
                "id": "(hash)",
                "network": null,
              },
            },
          },
          "parents": 0,
        },
      },
    },
    "method": "LocalToRemoteSwitchExecuted",
    "section": "assetSwitchPool1",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > sender events Balances 1`] = `
[
  {
    "data": {
      "amount": "(rounded 8100000)",
      "who": "5Go9qhpqq2EzAZ1SKkkx6bTjnSoTnHEB8FHCnieNS57TimEF",
    },
    "method": "Withdraw",
    "section": "balances",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > sender events xcm pallet 1`] = `
[
  {
    "data": {
      "outcome": {
        "Complete": {
          "used": {
            "proofSize": "(rounded 6200)",
            "refTime": "(rounded 290000000)",
          },
        },
      },
    },
    "method": "Attempted",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "fees": [
        {
          "fun": {
            "Fungible": "(rounded 100000000)",
          },
          "id": {
            "interior": "Here",
            "parents": 1,
          },
        },
      ],
      "paying": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "FeesPaid",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": "(rounded 2100)",
            },
          ],
        },
        "parents": 1,
      },
      "message": [
        {
          "ReserveAssetDeposited": [
            {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
          ],
        },
        "ClearOrigin",
        {
          "BuyExecution": {
            "fees": {
              "fun": {
                "Fungible": 1000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 1,
              },
            },
            "weightLimit": "Unlimited",
          },
        },
        {
          "DepositAsset": {
            "assets": {
              "Wild": {
                "AllCounted": 1,
              },
            },
            "beneficiary": {
              "interior": {
                "X1": [
                  {
                    "AccountId32": {
                      "id": "(hash)",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "AccountId32": {
                "id": "(hash)",
                "network": "Rococo",
              },
            },
          ],
        },
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "polkadotXcm",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > sender events xcm queue pallet 1`] = `
[
  {
    "data": {
      "messageHash": "(hash)",
    },
    "method": "XcmpMessageSent",
    "section": "xcmpQueue",
  },
]
`;

exports[`Switch ePILTs against PILTs while paused > xcmpQueue Sending eKILTs back while switch is paused 1`] = `
[
  {
    "data": {
      "error": "FailedToTransactAsset",
      "messageHash": "(hash)",
      "messageId": "(hash)",
      "weight": {
        "proofSize": 0,
        "refTime": 800000000,
      },
    },
    "method": "Fail",
    "section": "xcmpQueue",
  },
]
`;
