// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Trapped assets > receiver Peregrine::assetSwitchPool1::[RemoteToLocalSwitchExecuted] 1`] = `
[
  {
    "data": {
      "amount": 1000000000000000,
      "to": "4seWojfEHrk5YKPahdErazQ3CWEHZYi6NV4gKz5AaejWbRPJ",
    },
    "method": "RemoteToLocalSwitchExecuted",
    "section": "assetSwitchPool1",
  },
]
`;

exports[`Trapped assets > receiver Peregrine::messageQueue::[Processed] 1`] = `
[
  {
    "data": {
      "id": "(hash)",
      "origin": {
        "Sibling": 1000,
      },
      "success": false,
      "weightUsed": {
        "proofSize": 0,
        "refTime": 600000000,
      },
    },
    "method": "Processed",
    "section": "messageQueue",
  },
]
`;

exports[`Trapped assets > receiver Peregrine::messageQueue::[Processed] 2`] = `
[
  {
    "data": {
      "id": "(hash)",
      "origin": {
        "Sibling": 1000,
      },
      "success": true,
      "weightUsed": {
        "proofSize": 0,
        "refTime": 400000000,
      },
    },
    "method": "Processed",
    "section": "messageQueue",
  },
  {
    "data": {
      "id": "(hash)",
      "origin": {
        "Sibling": 1000,
      },
      "success": true,
      "weightUsed": {
        "proofSize": 0,
        "refTime": 1000000000,
      },
    },
    "method": "Processed",
    "section": "messageQueue",
  },
]
`;

exports[`Trapped assets > receiver Peregrine::polkadotXcm::[AssetsClaimed] 1`] = `
[
  {
    "data": {
      "cost": [],
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": 1000,
            },
          ],
        },
        "parents": 1,
      },
      "messageId": "(hash)",
    },
    "method": "VersionNotifyStarted",
    "section": "polkadotXcm",
  },
  {
    "data": {
      "assets": {
        "V4": [
          {
            "fun": {
              "Fungible": 1000000000000000,
            },
            "id": {
              "interior": {
                "X2": [
                  {
                    "GlobalConsensus": {
                      "Ethereum": {
                        "chainId": "(rounded 11000000)",
                      },
                    },
                  },
                  {
                    "AccountKey20": {
                      "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 2,
            },
          },
        ],
      },
      "hash_": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "Parachain": 1000,
            },
          ],
        },
        "parents": 1,
      },
    },
    "method": "AssetsClaimed",
    "section": "polkadotXcm",
  },
]
`;

exports[`Trapped assets > receiver Peregrine::polkadotXcm::[AssetsTrapped] 1`] = `
[
  {
    "data": {
      "assets": {
        "V4": [
          {
            "fun": {
              "Fungible": 1000000000000000,
            },
            "id": {
              "interior": {
                "X2": [
                  {
                    "GlobalConsensus": {
                      "Ethereum": {
                        "chainId": "(rounded 11000000)",
                      },
                    },
                  },
                  {
                    "AccountKey20": {
                      "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 2,
            },
          },
        ],
      },
      "hash_": "(hash)",
      "origin": {
        "interior": {
          "X1": [
            {
              "Parachain": 1000,
            },
          ],
        },
        "parents": 1,
      },
    },
    "method": "AssetsTrapped",
    "section": "polkadotXcm",
  },
]
`;

exports[`Trapped assets > relayer rococo::sudo::[Sudid] 1`] = `
[
  {
    "data": {
      "sudoResult": "Ok",
    },
    "method": "Sudid",
    "section": "sudo",
  },
]
`;

exports[`Trapped assets > relayer rococo::xcmPallet::[Sent] 1`] = `
[
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": 1000,
            },
          ],
        },
        "parents": 0,
      },
      "message": [
        {
          "UnpaidExecution": {
            "checkOrigin": null,
            "weightLimit": "Unlimited",
          },
        },
        {
          "Transact": {
            "call": {
              "encoded": "(hash)",
            },
            "originKind": "Superuser",
            "requireWeightAtMost": {
              "proofSize": "(rounded 66000)",
              "refTime": 1000000000,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": "Here",
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "xcmPallet",
  },
]
`;

exports[`Trapped assets > sender AssetHub::messageQueue::[Processed] 1`] = `
[
  {
    "data": {
      "id": "(hash)",
      "origin": "Parent",
      "success": true,
      "weightUsed": {
        "proofSize": "(rounded 66000)",
        "refTime": "(rounded 1000000000)",
      },
    },
    "method": "Processed",
    "section": "messageQueue",
  },
]
`;

exports[`Trapped assets > sender AssetHub::polkadotXcm::[Sent] 1`] = `
[
  {
    "data": {
      "destination": {
        "interior": {
          "X1": [
            {
              "Parachain": "(rounded 2100)",
            },
          ],
        },
        "parents": 1,
      },
      "message": [
        {
          "WithdrawAsset": [
            {
              "fun": {
                "Fungible": 1000000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 0,
              },
            },
          ],
        },
        {
          "BuyExecution": {
            "fees": {
              "fun": {
                "Fungible": 1000000000000000,
              },
              "id": {
                "interior": "Here",
                "parents": 0,
              },
            },
            "weightLimit": "Unlimited",
          },
        },
        {
          "ClaimAsset": {
            "assets": [
              {
                "fun": {
                  "Fungible": 1000000000000000,
                },
                "id": {
                  "interior": {
                    "X2": [
                      {
                        "GlobalConsensus": {
                          "Ethereum": {
                            "chainId": "(rounded 11000000)",
                          },
                        },
                      },
                      {
                        "AccountKey20": {
                          "key": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                          "network": null,
                        },
                      },
                    ],
                  },
                  "parents": 2,
                },
              },
            ],
            "ticket": {
              "interior": {
                "X1": [
                  {
                    "GeneralIndex": 4,
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
        {
          "DepositAsset": {
            "assets": {
              "Wild": "All",
            },
            "beneficiary": {
              "interior": {
                "X1": [
                  {
                    "AccountId32": {
                      "id": "(hash)",
                      "network": null,
                    },
                  },
                ],
              },
              "parents": 0,
            },
          },
        },
      ],
      "messageId": "(hash)",
      "origin": {
        "interior": "Here",
        "parents": 0,
      },
    },
    "method": "Sent",
    "section": "polkadotXcm",
  },
]
`;

exports[`Trapped assets > sender AssetHub::xcmpQueue::[XcmpMessageSent] 1`] = `
[
  {
    "data": {
      "messageHash": "(hash)",
    },
    "method": "XcmpMessageSent",
    "section": "xcmpQueue",
  },
]
`;
