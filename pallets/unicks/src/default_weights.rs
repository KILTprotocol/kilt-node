// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2022 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for kilt_unicks
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-26, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain
// dev
// --steps
// --repeat
// 20
// --pallet
// kilt-unicks
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// pallets/unicks/src/default_weights.rs
// --template
// .maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for kilt_unicks.
pub trait WeightInfo {
	fn claim(n: u32, ) -> Weight;
	fn release_by_owner(n: u32, ) -> Weight;
	fn release_by_payer(n: u32, ) -> Weight;
	fn blacklist(n: u32, ) -> Weight;
	fn unblacklist(n: u32, ) -> Weight;
}

/// Weights for kilt_unicks using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Unicks Unicks (r:1 w:1)
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: Unicks Blacklist (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn claim(n: u32, ) -> Weight {
		(28_781_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((14_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn release_by_owner(_n: u32, ) -> Weight {
		(22_983_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn release_by_payer(n: u32, ) -> Weight {
		(23_082_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((10_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Blacklist (r:1 w:1)
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn blacklist(n: u32, ) -> Weight {
		(24_980_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((24_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Unicks Blacklist (r:1 w:1)
	fn unblacklist(n: u32, ) -> Weight {
		(10_320_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((16_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Unicks Unicks (r:1 w:1)
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: Unicks Blacklist (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn claim(n: u32, ) -> Weight {
		(28_781_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((14_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn release_by_owner(_n: u32, ) -> Weight {
		(22_983_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn release_by_payer(n: u32, ) -> Weight {
		(23_082_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((10_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Unicks Blacklist (r:1 w:1)
	// Storage: Unicks Owner (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Unicks Unicks (r:0 w:1)
	fn blacklist(n: u32, ) -> Weight {
		(24_980_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((24_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Unicks Blacklist (r:1 w:1)
	fn unblacklist(n: u32, ) -> Weight {
		(10_320_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((16_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
