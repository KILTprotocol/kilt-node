// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-11, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=../../pallets/parachain-staking/src/default_weights.rs
// --template=../../.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_new_year() -> Weight;
	fn force_new_round() -> Weight;
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn revoke_delegation(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn set_max_candidate_stake() -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_no_action() -> Weight {
		(6_853_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(30_216_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(56_085_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(3_847_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(28_523_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 61_000
			.saturating_add((25_089_000_u64).saturating_mul(n as Weight))
			// Standard Error: 172_000
			.saturating_add((16_276_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(30_918_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(206_999_000_u64)
			// Standard Error: 74_000
			.saturating_add((3_498_000_u64).saturating_mul(n as Weight))
			// Standard Error: 205_000
			.saturating_add((40_964_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(192_349_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_159_000_u64).saturating_mul(n as Weight))
			// Standard Error: 340_000
			.saturating_add((9_366_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(336_470_000_u64)
			// Standard Error: 27_000
			.saturating_add((1_636_000_u64).saturating_mul(n as Weight))
			// Standard Error: 74_000
			.saturating_add((6_236_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(338_223_000_u64)
			// Standard Error: 29_000
			.saturating_add((1_468_000_u64).saturating_mul(n as Weight))
			// Standard Error: 78_000
			.saturating_add((6_225_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 35_000
			.saturating_add((2_270_000_u64).saturating_mul(n as Weight))
			// Standard Error: 96_000
			.saturating_add((36_246_000_u64).saturating_mul(m as Weight))
			// Standard Error: 422_000
			.saturating_add((1_090_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(115_540_000_u64)
			// Standard Error: 90_000
			.saturating_add((4_227_000_u64).saturating_mul(n as Weight))
			// Standard Error: 335_000
			.saturating_add((9_456_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_113_000
			.saturating_add((6_654_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(140_434_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_100_000_u64).saturating_mul(n as Weight))
			// Standard Error: 341_000
			.saturating_add((8_914_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(193_909_000_u64)
			// Standard Error: 101_000
			.saturating_add((4_337_000_u64).saturating_mul(n as Weight))
			// Standard Error: 417_000
			.saturating_add((10_629_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(116_048_000_u64)
			// Standard Error: 91_000
			.saturating_add((4_135_000_u64).saturating_mul(n as Weight))
			// Standard Error: 382_000
			.saturating_add((9_973_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_308_000
			.saturating_add((7_593_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(144_889_000_u64)
			// Standard Error: 99_000
			.saturating_add((4_048_000_u64).saturating_mul(n as Weight))
			// Standard Error: 408_000
			.saturating_add((9_997_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(152_499_000_u64)
			// Standard Error: 92_000
			.saturating_add((4_120_000_u64).saturating_mul(n as Weight))
			// Standard Error: 381_000
			.saturating_add((9_819_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(153_615_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_178_000_u64).saturating_mul(n as Weight))
			// Standard Error: 385_000
			.saturating_add((9_744_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(60_311_000_u64)
			// Standard Error: 50_000
			.saturating_add((413_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(29_014_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_no_action() -> Weight {
		(6_853_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(30_216_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(56_085_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(3_847_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(28_523_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 61_000
			.saturating_add((25_089_000_u64).saturating_mul(n as Weight))
			// Standard Error: 172_000
			.saturating_add((16_276_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(30_918_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(206_999_000_u64)
			// Standard Error: 74_000
			.saturating_add((3_498_000_u64).saturating_mul(n as Weight))
			// Standard Error: 205_000
			.saturating_add((40_964_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(24_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(192_349_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_159_000_u64).saturating_mul(n as Weight))
			// Standard Error: 340_000
			.saturating_add((9_366_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(336_470_000_u64)
			// Standard Error: 27_000
			.saturating_add((1_636_000_u64).saturating_mul(n as Weight))
			// Standard Error: 74_000
			.saturating_add((6_236_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(338_223_000_u64)
			// Standard Error: 29_000
			.saturating_add((1_468_000_u64).saturating_mul(n as Weight))
			// Standard Error: 78_000
			.saturating_add((6_225_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 35_000
			.saturating_add((2_270_000_u64).saturating_mul(n as Weight))
			// Standard Error: 96_000
			.saturating_add((36_246_000_u64).saturating_mul(m as Weight))
			// Standard Error: 422_000
			.saturating_add((1_090_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(115_540_000_u64)
			// Standard Error: 90_000
			.saturating_add((4_227_000_u64).saturating_mul(n as Weight))
			// Standard Error: 335_000
			.saturating_add((9_456_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_113_000
			.saturating_add((6_654_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(140_434_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_100_000_u64).saturating_mul(n as Weight))
			// Standard Error: 341_000
			.saturating_add((8_914_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(193_909_000_u64)
			// Standard Error: 101_000
			.saturating_add((4_337_000_u64).saturating_mul(n as Weight))
			// Standard Error: 417_000
			.saturating_add((10_629_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(116_048_000_u64)
			// Standard Error: 91_000
			.saturating_add((4_135_000_u64).saturating_mul(n as Weight))
			// Standard Error: 382_000
			.saturating_add((9_973_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_308_000
			.saturating_add((7_593_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(144_889_000_u64)
			// Standard Error: 99_000
			.saturating_add((4_048_000_u64).saturating_mul(n as Weight))
			// Standard Error: 408_000
			.saturating_add((9_997_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(152_499_000_u64)
			// Standard Error: 92_000
			.saturating_add((4_120_000_u64).saturating_mul(n as Weight))
			// Standard Error: 381_000
			.saturating_add((9_819_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(153_615_000_u64)
			// Standard Error: 93_000
			.saturating_add((4_178_000_u64).saturating_mul(n as Weight))
			// Standard Error: 385_000
			.saturating_add((9_744_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(60_311_000_u64)
			// Standard Error: 50_000
			.saturating_add((413_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(29_014_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
