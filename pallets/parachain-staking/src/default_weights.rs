// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-13, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/parachain-staking/src/default_weights.rs
// --template=.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_network_rewards() -> Weight;
	fn force_new_round() -> Weight;
	fn set_inflation(n: u32, m: u32, ) -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn set_max_candidate_stake() -> Weight;
	fn increment_delegator_rewards() -> Weight;
	fn increment_collator_rewards() -> Weight;
	fn claim_rewards() -> Weight;
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(6_666_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(19_703_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(37_292_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(3_498_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(668_430_000 as u64)
			// Standard Error: 4_595_103
			.saturating_add(Weight::from_ref_time(144_697_559 as u64).saturating_mul(n as u64))
			// Standard Error: 9_865_586
			.saturating_add(Weight::from_ref_time(271_717_410 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(152 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(145 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:59 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(35_621_000 as u64)
			// Standard Error: 22_454
			.saturating_add(Weight::from_ref_time(3_126_576 as u64).saturating_mul(n as u64))
			// Standard Error: 49_700
			.saturating_add(Weight::from_ref_time(263_952 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(16_493_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(133_595_000 as u64)
			// Standard Error: 23_147
			.saturating_add(Weight::from_ref_time(854_671 as u64).saturating_mul(n as u64))
			// Standard Error: 51_351
			.saturating_add(Weight::from_ref_time(24_668_268 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(57_651_700 as u64)
			// Standard Error: 9_767
			.saturating_add(Weight::from_ref_time(473_360 as u64).saturating_mul(n as u64))
			// Standard Error: 20_281
			.saturating_add(Weight::from_ref_time(847_956 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(82_560_481 as u64)
			// Standard Error: 9_520
			.saturating_add(Weight::from_ref_time(560_130 as u64).saturating_mul(n as u64))
			// Standard Error: 15_439
			.saturating_add(Weight::from_ref_time(1_314_685 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(42_150_973 as u64)
			// Standard Error: 6_861
			.saturating_add(Weight::from_ref_time(238_991 as u64).saturating_mul(n as u64))
			// Standard Error: 11_127
			.saturating_add(Weight::from_ref_time(580_312 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(67_294_000 as u64)
			// Standard Error: 19_698
			.saturating_add(Weight::from_ref_time(729_949 as u64).saturating_mul(n as u64))
			// Standard Error: 43_139
			.saturating_add(Weight::from_ref_time(24_708_382 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(55_894_618 as u64)
			// Standard Error: 9_776
			.saturating_add(Weight::from_ref_time(511_025 as u64).saturating_mul(n as u64))
			// Standard Error: 20_295
			.saturating_add(Weight::from_ref_time(984_580 as u64).saturating_mul(m as u64))
			// Standard Error: 75_177
			.saturating_add(Weight::from_ref_time(1_100_501 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(46_325_047 as u64)
			// Standard Error: 10_563
			.saturating_add(Weight::from_ref_time(484_832 as u64).saturating_mul(n as u64))
			// Standard Error: 21_935
			.saturating_add(Weight::from_ref_time(911_713 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(60_291_840 as u64)
			// Standard Error: 10_778
			.saturating_add(Weight::from_ref_time(616_383 as u64).saturating_mul(n as u64))
			// Standard Error: 23_955
			.saturating_add(Weight::from_ref_time(1_254_520 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(64_250_852 as u64)
			// Standard Error: 9_213
			.saturating_add(Weight::from_ref_time(539_536 as u64).saturating_mul(n as u64))
			// Standard Error: 20_469
			.saturating_add(Weight::from_ref_time(1_003_402 as u64).saturating_mul(m as u64))
			// Standard Error: 79_389
			.saturating_add(Weight::from_ref_time(1_116_672 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(55_985_660 as u64)
			// Standard Error: 10_182
			.saturating_add(Weight::from_ref_time(500_491 as u64).saturating_mul(n as u64))
			// Standard Error: 22_631
			.saturating_add(Weight::from_ref_time(982_928 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(61_674_835 as u64)
			// Standard Error: 10_947
			.saturating_add(Weight::from_ref_time(518_575 as u64).saturating_mul(n as u64))
			// Standard Error: 24_330
			.saturating_add(Weight::from_ref_time(967_986 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(36_945_605 as u64)
			// Standard Error: 74_612
			.saturating_add(Weight::from_ref_time(303_511 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(13_575_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(28_520_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(36_352_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(48_169_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(666_150_000 as u64)
			// Standard Error: 4_437_362
			.saturating_add(Weight::from_ref_time(138_178_327 as u64).saturating_mul(n as u64))
			// Standard Error: 9_526_919
			.saturating_add(Weight::from_ref_time(267_024_505 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(153 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(146 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(6_666_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(19_703_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(37_292_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(3_498_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(668_430_000 as u64)
			// Standard Error: 4_595_103
			.saturating_add(Weight::from_ref_time(144_697_559 as u64).saturating_mul(n as u64))
			// Standard Error: 9_865_586
			.saturating_add(Weight::from_ref_time(271_717_410 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(152 as u64))
			.saturating_add(RocksDbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(145 as u64))
			.saturating_add(RocksDbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:59 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(35_621_000 as u64)
			// Standard Error: 22_454
			.saturating_add(Weight::from_ref_time(3_126_576 as u64).saturating_mul(n as u64))
			// Standard Error: 49_700
			.saturating_add(Weight::from_ref_time(263_952 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(16_493_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(133_595_000 as u64)
			// Standard Error: 23_147
			.saturating_add(Weight::from_ref_time(854_671 as u64).saturating_mul(n as u64))
			// Standard Error: 51_351
			.saturating_add(Weight::from_ref_time(24_668_268 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(29 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
			.saturating_add(RocksDbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(57_651_700 as u64)
			// Standard Error: 9_767
			.saturating_add(Weight::from_ref_time(473_360 as u64).saturating_mul(n as u64))
			// Standard Error: 20_281
			.saturating_add(Weight::from_ref_time(847_956 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(82_560_481 as u64)
			// Standard Error: 9_520
			.saturating_add(Weight::from_ref_time(560_130 as u64).saturating_mul(n as u64))
			// Standard Error: 15_439
			.saturating_add(Weight::from_ref_time(1_314_685 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(21 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(42_150_973 as u64)
			// Standard Error: 6_861
			.saturating_add(Weight::from_ref_time(238_991 as u64).saturating_mul(n as u64))
			// Standard Error: 11_127
			.saturating_add(Weight::from_ref_time(580_312 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: Session Validators (r:1 w:0)
	// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Digest (r:1 w:1)
	// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(67_294_000 as u64)
			// Standard Error: 19_698
			.saturating_add(Weight::from_ref_time(729_949 as u64).saturating_mul(n as u64))
			// Standard Error: 43_139
			.saturating_add(Weight::from_ref_time(24_708_382 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
			.saturating_add(RocksDbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(55_894_618 as u64)
			// Standard Error: 9_776
			.saturating_add(Weight::from_ref_time(511_025 as u64).saturating_mul(n as u64))
			// Standard Error: 20_295
			.saturating_add(Weight::from_ref_time(984_580 as u64).saturating_mul(m as u64))
			// Standard Error: 75_177
			.saturating_add(Weight::from_ref_time(1_100_501 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(46_325_047 as u64)
			// Standard Error: 10_563
			.saturating_add(Weight::from_ref_time(484_832 as u64).saturating_mul(n as u64))
			// Standard Error: 21_935
			.saturating_add(Weight::from_ref_time(911_713 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(20), added: 515, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(60_291_840 as u64)
			// Standard Error: 10_778
			.saturating_add(Weight::from_ref_time(616_383 as u64).saturating_mul(n as u64))
			// Standard Error: 23_955
			.saturating_add(Weight::from_ref_time(1_254_520 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(64_250_852 as u64)
			// Standard Error: 9_213
			.saturating_add(Weight::from_ref_time(539_536 as u64).saturating_mul(n as u64))
			// Standard Error: 20_469
			.saturating_add(Weight::from_ref_time(1_003_402 as u64).saturating_mul(m as u64))
			// Standard Error: 79_389
			.saturating_add(Weight::from_ref_time(1_116_672 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(55_985_660 as u64)
			// Standard Error: 10_182
			.saturating_add(Weight::from_ref_time(500_491 as u64).saturating_mul(n as u64))
			// Standard Error: 22_631
			.saturating_add(Weight::from_ref_time(982_928 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(3602), added: 4097, mode: MaxEncodedLen)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(61_674_835 as u64)
			// Standard Error: 10_947
			.saturating_add(Weight::from_ref_time(518_575 as u64).saturating_mul(n as u64))
			// Standard Error: 24_330
			.saturating_add(Weight::from_ref_time(967_986 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(281), added: 2756, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(36_945_605 as u64)
			// Standard Error: 74_612
			.saturating_add(Weight::from_ref_time(303_511 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(13_575_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(28_520_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(36_352_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(48_169_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Proof: ParachainStaking LastRewardReduction (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Proof: ParachainStaking InflationConfig (max_values: Some(1), max_size: Some(96), added: 591, mode: MaxEncodedLen)
	// Storage: ParachainStaking CandidatePool (r:76 w:0)
	// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1790), added: 4265, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksAuthored (r:75 w:0)
	// Proof: ParachainStaking BlocksAuthored (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking BlocksRewarded (r:2700 w:2700)
	// Proof: ParachainStaking BlocksRewarded (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: ParachainStaking Rewards (r:2700 w:2700)
	// Proof: ParachainStaking Rewards (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(666_150_000 as u64)
			// Standard Error: 4_437_362
			.saturating_add(Weight::from_ref_time(138_178_327 as u64).saturating_mul(n as u64))
			// Standard Error: 9_526_919
			.saturating_add(Weight::from_ref_time(267_024_505 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(153 as u64))
			.saturating_add(RocksDbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(146 as u64))
			.saturating_add(RocksDbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}
