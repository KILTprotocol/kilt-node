// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2023 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-01, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/parachain-staking/src/default_weights.rs
// --template=.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_network_rewards() -> Weight;
	fn force_new_round() -> Weight;
	fn set_inflation(n: u32, m: u32, ) -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn set_max_candidate_stake() -> Weight;
	fn increment_delegator_rewards() -> Weight;
	fn increment_collator_rewards() -> Weight;
	fn claim_rewards() -> Weight;
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(7_295_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(20_334_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(53_479_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(15_272_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(880_206_000 as u64)
			// Standard Error: 5_316_702
			.saturating_add(Weight::from_ref_time(170_934_184 as u64).saturating_mul(n as u64))
			// Standard Error: 11_414_842
			.saturating_add(Weight::from_ref_time(326_552_012 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(152 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(145 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(71_790_000 as u64)
			// Standard Error: 27_483
			.saturating_add(Weight::from_ref_time(3_582_143 as u64).saturating_mul(n as u64))
			// Standard Error: 60_832
			.saturating_add(Weight::from_ref_time(349_083 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(56_977_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(167_630_000 as u64)
			// Standard Error: 33_915
			.saturating_add(Weight::from_ref_time(1_267_282 as u64).saturating_mul(n as u64))
			// Standard Error: 75_237
			.saturating_add(Weight::from_ref_time(32_352_601 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(29 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(74_868_992 as u64)
			// Standard Error: 15_510
			.saturating_add(Weight::from_ref_time(844_907 as u64).saturating_mul(n as u64))
			// Standard Error: 32_208
			.saturating_add(Weight::from_ref_time(1_664_228 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(102_892_381 as u64)
			// Standard Error: 15_634
			.saturating_add(Weight::from_ref_time(884_087 as u64).saturating_mul(n as u64))
			// Standard Error: 25_354
			.saturating_add(Weight::from_ref_time(1_951_960 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(21 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_163_088 as u64)
			// Standard Error: 11_849
			.saturating_add(Weight::from_ref_time(470_670 as u64).saturating_mul(n as u64))
			// Standard Error: 19_216
			.saturating_add(Weight::from_ref_time(1_150_199 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(101_532_000 as u64)
			// Standard Error: 33_213
			.saturating_add(Weight::from_ref_time(1_131_850 as u64).saturating_mul(n as u64))
			// Standard Error: 72_738
			.saturating_add(Weight::from_ref_time(32_258_326 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(71_965_734 as u64)
			// Standard Error: 13_893
			.saturating_add(Weight::from_ref_time(925_357 as u64).saturating_mul(n as u64))
			// Standard Error: 28_840
			.saturating_add(Weight::from_ref_time(1_887_704 as u64).saturating_mul(m as u64))
			// Standard Error: 106_831
			.saturating_add(Weight::from_ref_time(1_865_718 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_739_612 as u64)
			// Standard Error: 16_793
			.saturating_add(Weight::from_ref_time(864_759 as u64).saturating_mul(n as u64))
			// Standard Error: 34_871
			.saturating_add(Weight::from_ref_time(1_709_617 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(77_485_243 as u64)
			// Standard Error: 14_703
			.saturating_add(Weight::from_ref_time(1_058_123 as u64).saturating_mul(n as u64))
			// Standard Error: 32_678
			.saturating_add(Weight::from_ref_time(2_182_817 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(82_500_737 as u64)
			// Standard Error: 12_571
			.saturating_add(Weight::from_ref_time(971_252 as u64).saturating_mul(n as u64))
			// Standard Error: 27_929
			.saturating_add(Weight::from_ref_time(1_947_599 as u64).saturating_mul(m as u64))
			// Standard Error: 108_324
			.saturating_add(Weight::from_ref_time(1_782_476 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(72_772_464 as u64)
			// Standard Error: 14_214
			.saturating_add(Weight::from_ref_time(909_175 as u64).saturating_mul(n as u64))
			// Standard Error: 31_591
			.saturating_add(Weight::from_ref_time(1_824_513 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(80_275_828 as u64)
			// Standard Error: 14_671
			.saturating_add(Weight::from_ref_time(913_421 as u64).saturating_mul(n as u64))
			// Standard Error: 32_607
			.saturating_add(Weight::from_ref_time(1_764_476 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(53_730_996 as u64)
			// Standard Error: 18_906
			.saturating_add(Weight::from_ref_time(410_777 as u64).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(43_109_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(35_612_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(54_273_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(869_446_000 as u64)
			// Standard Error: 5_211_771
			.saturating_add(Weight::from_ref_time(166_314_407 as u64).saturating_mul(n as u64))
			// Standard Error: 11_189_560
			.saturating_add(Weight::from_ref_time(321_504_163 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(153 as u64))
			.saturating_add(T::DbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(T::DbWeight::get().writes(146 as u64))
			.saturating_add(T::DbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		Weight::from_ref_time(7_295_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		Weight::from_ref_time(20_334_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		Weight::from_ref_time(53_479_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		Weight::from_ref_time(15_272_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_inflation(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(880_206_000 as u64)
			// Standard Error: 5_316_702
			.saturating_add(Weight::from_ref_time(170_934_184 as u64).saturating_mul(n as u64))
			// Standard Error: 11_414_842
			.saturating_add(Weight::from_ref_time(326_552_012 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(152 as u64))
			.saturating_add(RocksDbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(145 as u64))
			.saturating_add(RocksDbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	/// The range of component `n` is `[16, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(71_790_000 as u64)
			// Standard Error: 27_483
			.saturating_add(Weight::from_ref_time(3_582_143 as u64).saturating_mul(n as u64))
			// Standard Error: 60_832
			.saturating_add(Weight::from_ref_time(349_083 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		Weight::from_ref_time(56_977_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// The range of component `n` is `[17, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(167_630_000 as u64)
			// Standard Error: 33_915
			.saturating_add(Weight::from_ref_time(1_267_282 as u64).saturating_mul(n as u64))
			// Standard Error: 75_237
			.saturating_add(Weight::from_ref_time(32_352_601 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(29 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
			.saturating_add(RocksDbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(74_868_992 as u64)
			// Standard Error: 15_510
			.saturating_add(Weight::from_ref_time(844_907 as u64).saturating_mul(n as u64))
			// Standard Error: 32_208
			.saturating_add(Weight::from_ref_time(1_664_228 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(102_892_381 as u64)
			// Standard Error: 15_634
			.saturating_add(Weight::from_ref_time(884_087 as u64).saturating_mul(n as u64))
			// Standard Error: 25_354
			.saturating_add(Weight::from_ref_time(1_951_960 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(21 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_163_088 as u64)
			// Standard Error: 11_849
			.saturating_add(Weight::from_ref_time(470_670 as u64).saturating_mul(n as u64))
			// Standard Error: 19_216
			.saturating_add(Weight::from_ref_time(1_150_199 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:1)
	// Storage: ParachainStaking BlocksRewarded (r:36 w:36)
	// Storage: ParachainStaking Rewards (r:36 w:36)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:36 w:36)
	// Storage: ParachainStaking DelegatorState (r:35 w:35)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// The range of component `n` is `[17, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(101_532_000 as u64)
			// Standard Error: 33_213
			.saturating_add(Weight::from_ref_time(1_131_850 as u64).saturating_mul(n as u64))
			// Standard Error: 72_738
			.saturating_add(Weight::from_ref_time(32_258_326 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
			.saturating_add(RocksDbWeight::get().writes((4 as u64).saturating_mul(m as u64)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(71_965_734 as u64)
			// Standard Error: 13_893
			.saturating_add(Weight::from_ref_time(925_357 as u64).saturating_mul(n as u64))
			// Standard Error: 28_840
			.saturating_add(Weight::from_ref_time(1_887_704 as u64).saturating_mul(m as u64))
			// Standard Error: 106_831
			.saturating_add(Weight::from_ref_time(1_865_718 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 74]`.
	/// The range of component `m` is `[0, 35]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(62_739_612 as u64)
			// Standard Error: 16_793
			.saturating_add(Weight::from_ref_time(864_759 as u64).saturating_mul(n as u64))
			// Standard Error: 34_871
			.saturating_add(Weight::from_ref_time(1_709_617 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:0 w:1)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(77_485_243 as u64)
			// Standard Error: 14_703
			.saturating_add(Weight::from_ref_time(1_058_123 as u64).saturating_mul(n as u64))
			// Standard Error: 32_678
			.saturating_add(Weight::from_ref_time(2_182_817 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(82_500_737 as u64)
			// Standard Error: 12_571
			.saturating_add(Weight::from_ref_time(971_252 as u64).saturating_mul(n as u64))
			// Standard Error: 27_929
			.saturating_add(Weight::from_ref_time(1_947_599 as u64).saturating_mul(m as u64))
			// Standard Error: 108_324
			.saturating_add(Weight::from_ref_time(1_782_476 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(72_772_464 as u64)
			// Standard Error: 14_214
			.saturating_add(Weight::from_ref_time(909_175 as u64).saturating_mul(n as u64))
			// Standard Error: 31_591
			.saturating_add(Weight::from_ref_time(1_824_513 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// The range of component `n` is `[1, 75]`.
	/// The range of component `m` is `[1, 34]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(80_275_828 as u64)
			// Standard Error: 14_671
			.saturating_add(Weight::from_ref_time(913_421 as u64).saturating_mul(n as u64))
			// Standard Error: 32_607
			.saturating_add(Weight::from_ref_time(1_764_476 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		Weight::from_ref_time(53_730_996 as u64)
			// Standard Error: 18_906
			.saturating_add(Weight::from_ref_time(410_777 as u64).saturating_mul(u as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		Weight::from_ref_time(43_109_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_delegator_rewards() -> Weight {
		Weight::from_ref_time(40_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:1 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:1 w:1)
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking InflationConfig (r:1 w:0)
	fn increment_collator_rewards() -> Weight {
		Weight::from_ref_time(35_612_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking Rewards (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn claim_rewards() -> Weight {
		Weight::from_ref_time(54_273_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:3 w:0)
	// Storage: ParachainStaking BlocksAuthored (r:2 w:0)
	// Storage: ParachainStaking BlocksRewarded (r:72 w:72)
	// Storage: ParachainStaking Rewards (r:72 w:72)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CounterForCandidatePool (r:1 w:0)
	/// The range of component `n` is `[0, 75]`.
	/// The range of component `m` is `[0, 35]`.
	fn execute_scheduled_reward_change(n: u32, m: u32, ) -> Weight {
		Weight::from_ref_time(869_446_000 as u64)
			// Standard Error: 5_211_771
			.saturating_add(Weight::from_ref_time(166_314_407 as u64).saturating_mul(n as u64))
			// Standard Error: 11_189_560
			.saturating_add(Weight::from_ref_time(321_504_163 as u64).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(153 as u64))
			.saturating_add(RocksDbWeight::get().reads((27 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().reads((51 as u64).saturating_mul(m as u64)))
			.saturating_add(RocksDbWeight::get().writes(146 as u64))
			.saturating_add(RocksDbWeight::get().writes((25 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes((51 as u64).saturating_mul(m as u64)))
	}
}
