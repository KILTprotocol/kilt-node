// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! //! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-31, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE:
//! {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE:
//! 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --execution=native
// --wasm-execution
// compiled
// --heap-pages=4096
// -s
// 10
// -p
// parachain_staking
// -e
// *
// --template
// .maintain/weight-template.hbs
// --output
// ./pallets/parachain-staking/src/default_weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn join_candidates(n: u32, m: u32) -> Weight;
	fn init_leave_candidates(n: u32, m: u32) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn candidate_stake_less(n: u32, m: u32) -> Weight;
	fn join_delegators(n: u32, m: u32) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn delegator_stake_less(n: u32, m: u32) -> Weight;
	fn revoke_delegation(n: u32, m: u32) -> Weight;
	fn leave_delegators(n: u32, m: u32) -> Weight;
	fn withdraw_unstaked(u: u32) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended
/// hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_inflation() -> Weight {
		(14_046_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 262_000
			.saturating_add((11_789_000_u64).saturating_mul(n as Weight))
			// Standard Error: 615_000
			.saturating_add((19_866_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(10_620_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 448_000
			.saturating_add((4_126_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_274_000
			.saturating_add((10_907_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn init_leave_candidates(n: u32, m: u32) -> Weight {
		(23_060_000_u64)
			// Standard Error: 318_000
			.saturating_add((2_649_000_u64).saturating_mul(n as Weight))
			// Standard Error: 715_000
			.saturating_add((10_193_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32) -> Weight {
		(19_292_000_u64)
			// Standard Error: 240_000
			.saturating_add((2_599_000_u64).saturating_mul(n as Weight))
			// Standard Error: 539_000
			.saturating_add((10_398_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 223_000
			.saturating_add((1_991_000_u64).saturating_mul(n as Weight))
			// Standard Error: 500_000
			.saturating_add((16_003_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_485_000
			.saturating_add((2_863_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 350_000
			.saturating_add((3_898_000_u64).saturating_mul(n as Weight))
			// Standard Error: 987_000
			.saturating_add((10_607_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_581_000
			.saturating_add((4_412_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 459_000
			.saturating_add((4_250_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_305_000
			.saturating_add((11_487_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 439_000
			.saturating_add((4_086_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_397_000
			.saturating_add((11_221_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(15_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 329_000
			.saturating_add((3_801_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_043_000
			.saturating_add((10_351_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_466_000
			.saturating_add((3_655_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(15_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 442_000
			.saturating_add((4_279_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_406_000
			.saturating_add((11_713_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 431_000
			.saturating_add((4_177_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_369_000
			.saturating_add((11_389_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 441_000
			.saturating_add((4_236_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_403_000
			.saturating_add((11_805_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(17_044_000_u64)
			// Standard Error: 38_000
			.saturating_add((11_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_inflation() -> Weight {
		(14_046_000_u64).saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 262_000
			.saturating_add((11_789_000_u64).saturating_mul(n as Weight))
			// Standard Error: 615_000
			.saturating_add((19_866_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(10_620_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 448_000
			.saturating_add((4_126_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_274_000
			.saturating_add((10_907_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(16_u64))
	}
	fn init_leave_candidates(n: u32, m: u32) -> Weight {
		(23_060_000_u64)
			// Standard Error: 318_000
			.saturating_add((2_649_000_u64).saturating_mul(n as Weight))
			// Standard Error: 715_000
			.saturating_add((10_193_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(19_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32) -> Weight {
		(19_292_000_u64)
			// Standard Error: 240_000
			.saturating_add((2_599_000_u64).saturating_mul(n as Weight))
			// Standard Error: 539_000
			.saturating_add((10_398_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(19_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 223_000
			.saturating_add((1_991_000_u64).saturating_mul(n as Weight))
			// Standard Error: 500_000
			.saturating_add((16_003_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_485_000
			.saturating_add((2_863_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 350_000
			.saturating_add((3_898_000_u64).saturating_mul(n as Weight))
			// Standard Error: 987_000
			.saturating_add((10_607_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_581_000
			.saturating_add((4_412_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 459_000
			.saturating_add((4_250_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_305_000
			.saturating_add((11_487_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 439_000
			.saturating_add((4_086_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_397_000
			.saturating_add((11_221_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(15_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 329_000
			.saturating_add((3_801_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_043_000
			.saturating_add((10_351_000_u64).saturating_mul(m as Weight))
			// Standard Error: 2_466_000
			.saturating_add((3_655_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(15_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 442_000
			.saturating_add((4_279_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_406_000
			.saturating_add((11_713_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 431_000
			.saturating_add((4_177_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_369_000
			.saturating_add((11_389_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 441_000
			.saturating_add((4_236_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_403_000
			.saturating_add((11_805_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(17_044_000_u64)
			// Standard Error: 38_000
			.saturating_add((11_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
