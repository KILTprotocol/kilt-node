// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-17, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=pallets/parachain-staking/src/default_weights.rs
// --template=.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_new_year() -> Weight;
	fn on_initialize_network_rewards() -> Weight;
	fn force_new_round() -> Weight;
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn revoke_delegation(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn set_max_candidate_stake() -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking Round (r:1 w:0)
	fn on_initialize_no_action() -> Weight {
		(3_906_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn on_initialize_round_update() -> Weight {
		(17_054_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	fn on_initialize_new_year() -> Weight {
		(32_659_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	// Storage: ParachainStaking LastRewardReduction (r:1 w:1)
	// Storage: ParachainStaking InflationConfig (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn on_initialize_network_rewards() -> Weight {
		(68_323_000_u64)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	fn force_new_round() -> Weight {
		(2_462_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: ParachainStaking InflationConfig (r:0 w:1)
	fn set_inflation() -> Weight {
		(15_354_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 12_000
			.saturating_add((10_548_000_u64).saturating_mul(n as Weight))
			// Standard Error: 33_000
			.saturating_add((12_228_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: ParachainStaking Round (r:1 w:1)
	fn set_blocks_per_round() -> Weight {
		(18_095_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:26 w:26)
	// Storage: ParachainStaking DelegatorState (r:25 w:25)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CandidateCount (r:1 w:1)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((3_047_000_u64).saturating_mul(n as Weight))
			// Standard Error: 46_000
			.saturating_add((26_615_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(25_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:0)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking CandidateCount (r:1 w:1)
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(1_089_000_u64)
			// Standard Error: 15_000
			.saturating_add((2_204_000_u64).saturating_mul(n as Weight))
			// Standard Error: 57_000
			.saturating_add((5_148_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: ParachainStaking CandidatePool (r:17 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(40_004_000_u64)
			// Standard Error: 14_000
			.saturating_add((2_399_000_u64).saturating_mul(n as Weight))
			// Standard Error: 38_000
			.saturating_add((7_888_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 13_000
			.saturating_add((2_068_000_u64).saturating_mul(n as Weight))
			// Standard Error: 36_000
			.saturating_add((5_433_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: ParachainStaking Unstaking (r:26 w:26)
	// Storage: ParachainStaking DelegatorState (r:25 w:25)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Session DisabledValidators (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	// Storage: ParachainStaking CandidateCount (r:1 w:1)
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((3_228_000_u64).saturating_mul(n as Weight))
			// Standard Error: 40_000
			.saturating_add((26_948_000_u64).saturating_mul(m as Weight))
			// Standard Error: 178_000
			.saturating_add((345_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((2_888_000_u64).saturating_mul(n as Weight))
			// Standard Error: 60_000
			.saturating_add((7_666_000_u64).saturating_mul(m as Weight))
			// Standard Error: 228_000
			.saturating_add((2_255_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 15_000
			.saturating_add((2_544_000_u64).saturating_mul(n as Weight))
			// Standard Error: 56_000
			.saturating_add((6_925_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:2 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking LastDelegation (r:1 w:1)
	// Storage: ParachainStaking Round (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_926_000_u64).saturating_mul(n as Weight))
			// Standard Error: 75_000
			.saturating_add((8_496_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_842_000_u64).saturating_mul(n as Weight))
			// Standard Error: 78_000
			.saturating_add((8_265_000_u64).saturating_mul(m as Weight))
			// Standard Error: 314_000
			.saturating_add((2_924_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_755_000_u64).saturating_mul(n as Weight))
			// Standard Error: 71_000
			.saturating_add((7_556_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_616_000_u64).saturating_mul(n as Weight))
			// Standard Error: 72_000
			.saturating_add((7_427_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: ParachainStaking DelegatorState (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: ParachainStaking TopCandidates (r:1 w:1)
	// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_632_000_u64).saturating_mul(n as Weight))
			// Standard Error: 72_000
			.saturating_add((7_360_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: ParachainStaking Unstaking (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unlock_unstaked(u: u32, ) -> Weight {
		(40_574_000_u64)
			// Standard Error: 16_000
			.saturating_add((277_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	fn set_max_candidate_stake() -> Weight {
		(14_019_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_no_action() -> Weight {
		(3_906_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(17_054_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(32_659_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn on_initialize_network_rewards() -> Weight {
		(68_323_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn force_new_round() -> Weight {
		(2_462_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(15_354_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 12_000
			.saturating_add((10_548_000_u64).saturating_mul(n as Weight))
			// Standard Error: 33_000
			.saturating_add((12_228_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(18_095_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((3_047_000_u64).saturating_mul(n as Weight))
			// Standard Error: 46_000
			.saturating_add((26_615_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(25_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(1_089_000_u64)
			// Standard Error: 15_000
			.saturating_add((2_204_000_u64).saturating_mul(n as Weight))
			// Standard Error: 57_000
			.saturating_add((5_148_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(40_004_000_u64)
			// Standard Error: 14_000
			.saturating_add((2_399_000_u64).saturating_mul(n as Weight))
			// Standard Error: 38_000
			.saturating_add((7_888_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 13_000
			.saturating_add((2_068_000_u64).saturating_mul(n as Weight))
			// Standard Error: 36_000
			.saturating_add((5_433_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((3_228_000_u64).saturating_mul(n as Weight))
			// Standard Error: 40_000
			.saturating_add((26_948_000_u64).saturating_mul(m as Weight))
			// Standard Error: 178_000
			.saturating_add((345_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 16_000
			.saturating_add((2_888_000_u64).saturating_mul(n as Weight))
			// Standard Error: 60_000
			.saturating_add((7_666_000_u64).saturating_mul(m as Weight))
			// Standard Error: 228_000
			.saturating_add((2_255_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 15_000
			.saturating_add((2_544_000_u64).saturating_mul(n as Weight))
			// Standard Error: 56_000
			.saturating_add((6_925_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_926_000_u64).saturating_mul(n as Weight))
			// Standard Error: 75_000
			.saturating_add((8_496_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_842_000_u64).saturating_mul(n as Weight))
			// Standard Error: 78_000
			.saturating_add((8_265_000_u64).saturating_mul(m as Weight))
			// Standard Error: 314_000
			.saturating_add((2_924_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_755_000_u64).saturating_mul(n as Weight))
			// Standard Error: 71_000
			.saturating_add((7_556_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_616_000_u64).saturating_mul(n as Weight))
			// Standard Error: 72_000
			.saturating_add((7_427_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 17_000
			.saturating_add((2_632_000_u64).saturating_mul(n as Weight))
			// Standard Error: 72_000
			.saturating_add((7_360_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(40_574_000_u64)
			// Standard Error: 16_000
			.saturating_add((277_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(14_019_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
