// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! //! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-27, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE:
//! {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain-staking
// --steps=10
// --repeat=4
// --output
// ../../pallets/parachain-staking/src/default_weights.rs
// --template
// ../../.maintain/weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn join_candidates(n: u32, m: u32) -> Weight;
	fn leave_candidates(n: u32, m: u32) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn candidate_stake_less(n: u32, m: u32) -> Weight;
	fn join_delegators(n: u32, m: u32) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn delegator_stake_less(n: u32, m: u32) -> Weight;
	fn revoke_delegation(n: u32, m: u32) -> Weight;
	fn leave_delegators(n: u32, m: u32) -> Weight;
	fn withdraw_unstaked(u: u32) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended
/// hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_inflation() -> Weight {
		(37_861_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, _m: u32) -> Weight {
		(1_896_394_000_u64)
			// Standard Error: 6_323_000
			.saturating_add((13_667_000_u64).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(21_139_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 1_347_000
			.saturating_add((9_181_000_u64).saturating_mul(n as Weight))
			// Standard Error: 3_826_000
			.saturating_add((20_012_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn leave_candidates(n: u32, m: u32) -> Weight {
		(72_167_000_u64)
			// Standard Error: 865_000
			.saturating_add((5_958_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_457_000
			.saturating_add((13_597_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 526_000
			.saturating_add((6_796_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_481_000
			.saturating_add((17_010_000_u64).saturating_mul(m as Weight))
			// Standard Error: 3_873_000
			.saturating_add((3_957_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(82_861_000_u64)
			// Standard Error: 850_000
			.saturating_add((4_147_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_414_000
			.saturating_add((16_616_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 511_000
			.saturating_add((6_106_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_626_000
			.saturating_add((15_557_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(15_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 2_499_000
			.saturating_add((6_964_000_u64).saturating_mul(n as Weight))
			// Standard Error: 7_908_000
			.saturating_add((5_682_000_u64).saturating_mul(m as Weight))
			// Standard Error: 18_691_000
			.saturating_add((104_076_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(15_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(11_098_000_u64)
			// Standard Error: 579_000
			.saturating_add((5_575_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_842_000
			.saturating_add((14_305_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 512_000
			.saturating_add((5_730_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_627_000
			.saturating_add((15_169_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 508_000
			.saturating_add((5_831_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_614_000
			.saturating_add((14_666_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(38_057_000_u64)
			// Standard Error: 42_000
			.saturating_add((59_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_inflation() -> Weight {
		(37_861_000_u64).saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, _m: u32) -> Weight {
		(1_896_394_000_u64)
			// Standard Error: 6_323_000
			.saturating_add((13_667_000_u64).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(21_139_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 1_347_000
			.saturating_add((9_181_000_u64).saturating_mul(n as Weight))
			// Standard Error: 3_826_000
			.saturating_add((20_012_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(16_u64))
	}
	fn leave_candidates(n: u32, m: u32) -> Weight {
		(72_167_000_u64)
			// Standard Error: 865_000
			.saturating_add((5_958_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_457_000
			.saturating_add((13_597_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 526_000
			.saturating_add((6_796_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_481_000
			.saturating_add((17_010_000_u64).saturating_mul(m as Weight))
			// Standard Error: 3_873_000
			.saturating_add((3_957_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(82_861_000_u64)
			// Standard Error: 850_000
			.saturating_add((4_147_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_414_000
			.saturating_add((16_616_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 511_000
			.saturating_add((6_106_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_626_000
			.saturating_add((15_557_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(15_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 2_499_000
			.saturating_add((6_964_000_u64).saturating_mul(n as Weight))
			// Standard Error: 7_908_000
			.saturating_add((5_682_000_u64).saturating_mul(m as Weight))
			// Standard Error: 18_691_000
			.saturating_add((104_076_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(15_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(11_098_000_u64)
			// Standard Error: 579_000
			.saturating_add((5_575_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_842_000
			.saturating_add((14_305_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 512_000
			.saturating_add((5_730_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_627_000
			.saturating_add((15_169_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 508_000
			.saturating_add((5_831_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_614_000
			.saturating_add((14_666_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(38_057_000_u64)
			// Standard Error: 42_000
			.saturating_add((59_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
