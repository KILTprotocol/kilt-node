// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-15, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/kilt-parachain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=parachain-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/parachain-staking/src/default_weights.rs
// --template=.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_new_year() -> Weight;
	fn force_new_round() -> Weight;
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn revoke_delegation(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn unlock_unstaked(u: u32, ) -> Weight;
	fn set_max_candidate_stake() -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_no_action() -> Weight {
		(4_360_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(19_942_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(37_372_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(2_551_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(18_464_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((17_193_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((13_012_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(20_736_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(117_992_000_u64)
			// Standard Error: 16_000
			.saturating_add((3_081_000_u64).saturating_mul(n as Weight))
			// Standard Error: 46_000
			.saturating_add((28_323_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(25_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(89_738_000_u64)
			// Standard Error: 58_000
			.saturating_add((3_929_000_u64).saturating_mul(n as Weight))
			// Standard Error: 213_000
			.saturating_add((9_210_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(157_032_000_u64)
			// Standard Error: 16_000
			.saturating_add((2_425_000_u64).saturating_mul(n as Weight))
			// Standard Error: 43_000
			.saturating_add((7_773_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(143_872_000_u64)
			// Standard Error: 14_000
			.saturating_add((2_485_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((8_098_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 15_000
			.saturating_add((3_149_000_u64).saturating_mul(n as Weight))
			// Standard Error: 42_000
			.saturating_add((28_716_000_u64).saturating_mul(m as Weight))
			// Standard Error: 184_000
			.saturating_add((574_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 64_000
			.saturating_add((4_826_000_u64).saturating_mul(n as Weight))
			// Standard Error: 237_000
			.saturating_add((11_601_000_u64).saturating_mul(m as Weight))
			// Standard Error: 903_000
			.saturating_add((6_372_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 66_000
			.saturating_add((4_495_000_u64).saturating_mul(n as Weight))
			// Standard Error: 244_000
			.saturating_add((11_267_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(37_021_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_809_000_u64).saturating_mul(n as Weight))
			// Standard Error: 276_000
			.saturating_add((12_562_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 66_000
			.saturating_add((4_595_000_u64).saturating_mul(n as Weight))
			// Standard Error: 275_000
			.saturating_add((12_083_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_099_000
			.saturating_add((8_327_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(19_922_000_u64)
			// Standard Error: 69_000
			.saturating_add((4_343_000_u64).saturating_mul(n as Weight))
			// Standard Error: 286_000
			.saturating_add((11_307_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(37_487_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_182_000_u64).saturating_mul(n as Weight))
			// Standard Error: 279_000
			.saturating_add((10_978_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(33_610_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_222_000_u64).saturating_mul(n as Weight))
			// Standard Error: 279_000
			.saturating_add((10_950_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(45_625_000_u64)
			// Standard Error: 23_000
			.saturating_add((450_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(16_585_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_no_action() -> Weight {
		(4_360_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(19_942_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(37_372_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn force_new_round() -> Weight {
		(2_551_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_inflation() -> Weight {
		(18_464_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 14_000
			.saturating_add((17_193_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((13_012_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(20_736_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(117_992_000_u64)
			// Standard Error: 16_000
			.saturating_add((3_081_000_u64).saturating_mul(n as Weight))
			// Standard Error: 46_000
			.saturating_add((28_323_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(25_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(89_738_000_u64)
			// Standard Error: 58_000
			.saturating_add((3_929_000_u64).saturating_mul(n as Weight))
			// Standard Error: 213_000
			.saturating_add((9_210_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(157_032_000_u64)
			// Standard Error: 16_000
			.saturating_add((2_425_000_u64).saturating_mul(n as Weight))
			// Standard Error: 43_000
			.saturating_add((7_773_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(143_872_000_u64)
			// Standard Error: 14_000
			.saturating_add((2_485_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((8_098_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 15_000
			.saturating_add((3_149_000_u64).saturating_mul(n as Weight))
			// Standard Error: 42_000
			.saturating_add((28_716_000_u64).saturating_mul(m as Weight))
			// Standard Error: 184_000
			.saturating_add((574_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 64_000
			.saturating_add((4_826_000_u64).saturating_mul(n as Weight))
			// Standard Error: 237_000
			.saturating_add((11_601_000_u64).saturating_mul(m as Weight))
			// Standard Error: 903_000
			.saturating_add((6_372_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 66_000
			.saturating_add((4_495_000_u64).saturating_mul(n as Weight))
			// Standard Error: 244_000
			.saturating_add((11_267_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(37_021_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_809_000_u64).saturating_mul(n as Weight))
			// Standard Error: 276_000
			.saturating_add((12_562_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 66_000
			.saturating_add((4_595_000_u64).saturating_mul(n as Weight))
			// Standard Error: 275_000
			.saturating_add((12_083_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_099_000
			.saturating_add((8_327_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(19_922_000_u64)
			// Standard Error: 69_000
			.saturating_add((4_343_000_u64).saturating_mul(n as Weight))
			// Standard Error: 286_000
			.saturating_add((11_307_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(37_487_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_182_000_u64).saturating_mul(n as Weight))
			// Standard Error: 279_000
			.saturating_add((10_978_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(33_610_000_u64)
			// Standard Error: 67_000
			.saturating_add((4_222_000_u64).saturating_mul(n as Weight))
			// Standard Error: 279_000
			.saturating_add((10_950_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn unlock_unstaked(u: u32, ) -> Weight {
		(45_625_000_u64)
			// Standard Error: 23_000
			.saturating_add((450_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_max_candidate_stake() -> Weight {
		(16_585_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
