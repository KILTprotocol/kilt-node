// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-18, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("spiritnet-dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=spiritnet-dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain_staking
// --steps=50
// --repeat=20
// --output
// ./pallets/parachain-staking/src/default_weights.rs
// --template
// ../../.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn on_initialize_no_action() -> Weight;
	fn on_initialize_round_update() -> Weight;
	fn on_initialize_new_year() -> Weight;
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight;
	fn join_candidates(n: u32, m: u32, ) -> Weight;
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight;
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight;
	fn join_delegators(n: u32, m: u32, ) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight;
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight;
	fn revoke_delegation(n: u32, m: u32, ) -> Weight;
	fn leave_delegators(n: u32, m: u32, ) -> Weight;
	fn withdraw_unstaked(u: u32, ) -> Weight;
	fn increase_max_candidate_stake_by() -> Weight;
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize_no_action() -> Weight {
		(6_222_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(26_970_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(51_386_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_inflation() -> Weight {
		(23_805_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 22_000
			.saturating_add((23_698_000_u64).saturating_mul(n as Weight))
			// Standard Error: 63_000
			.saturating_add((15_045_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(28_483_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(206_960_000_u64)
			// Standard Error: 24_000
			.saturating_add((2_782_000_u64).saturating_mul(n as Weight))
			// Standard Error: 66_000
			.saturating_add((36_705_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(180_152_000_u64)
			// Standard Error: 85_000
			.saturating_add((3_880_000_u64).saturating_mul(n as Weight))
			// Standard Error: 313_000
			.saturating_add((8_652_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(310_999_000_u64)
			// Standard Error: 13_000
			.saturating_add((1_484_000_u64).saturating_mul(n as Weight))
			// Standard Error: 35_000
			.saturating_add((5_919_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(315_337_000_u64)
			// Standard Error: 24_000
			.saturating_add((1_502_000_u64).saturating_mul(n as Weight))
			// Standard Error: 64_000
			.saturating_add((5_537_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_056_000_u64).saturating_mul(n as Weight))
			// Standard Error: 51_000
			.saturating_add((33_423_000_u64).saturating_mul(m as Weight))
			// Standard Error: 191_000
			.saturating_add((475_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(100_708_000_u64)
			// Standard Error: 82_000
			.saturating_add((3_932_000_u64).saturating_mul(n as Weight))
			// Standard Error: 303_000
			.saturating_add((8_752_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_006_000
			.saturating_add((6_645_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(120_936_000_u64)
			// Standard Error: 88_000
			.saturating_add((3_890_000_u64).saturating_mul(n as Weight))
			// Standard Error: 322_000
			.saturating_add((8_576_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(177_289_000_u64)
			// Standard Error: 89_000
			.saturating_add((4_074_000_u64).saturating_mul(n as Weight))
			// Standard Error: 366_000
			.saturating_add((9_881_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(93_433_000_u64)
			// Standard Error: 82_000
			.saturating_add((3_903_000_u64).saturating_mul(n as Weight))
			// Standard Error: 342_000
			.saturating_add((9_293_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_171_000
			.saturating_add((7_833_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(130_631_000_u64)
			// Standard Error: 87_000
			.saturating_add((3_886_000_u64).saturating_mul(n as Weight))
			// Standard Error: 361_000
			.saturating_add((9_106_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(154_568_000_u64)
			// Standard Error: 97_000
			.saturating_add((4_424_000_u64).saturating_mul(n as Weight))
			// Standard Error: 400_000
			.saturating_add((8_372_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(140_178_000_u64)
			// Standard Error: 89_000
			.saturating_add((3_916_000_u64).saturating_mul(n as Weight))
			// Standard Error: 369_000
			.saturating_add((9_181_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	fn withdraw_unstaked(u: u32, ) -> Weight {
		(57_318_000_u64)
			// Standard Error: 23_000
			.saturating_add((142_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(26_419_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 304_000
			.saturating_add((63_183_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_108_000
			.saturating_add((31_970_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize_no_action() -> Weight {
		(6_222_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn on_initialize_round_update() -> Weight {
		(26_970_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn on_initialize_new_year() -> Weight {
		(51_386_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_inflation() -> Weight {
		(23_805_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 22_000
			.saturating_add((23_698_000_u64).saturating_mul(n as Weight))
			// Standard Error: 63_000
			.saturating_add((15_045_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn set_blocks_per_round() -> Weight {
		(28_483_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		(206_960_000_u64)
			// Standard Error: 24_000
			.saturating_add((2_782_000_u64).saturating_mul(n as Weight))
			// Standard Error: 66_000
			.saturating_add((36_705_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		(180_152_000_u64)
			// Standard Error: 85_000
			.saturating_add((3_880_000_u64).saturating_mul(n as Weight))
			// Standard Error: 313_000
			.saturating_add((8_652_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		(310_999_000_u64)
			// Standard Error: 13_000
			.saturating_add((1_484_000_u64).saturating_mul(n as Weight))
			// Standard Error: 35_000
			.saturating_add((5_919_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		(315_337_000_u64)
			// Standard Error: 24_000
			.saturating_add((1_502_000_u64).saturating_mul(n as Weight))
			// Standard Error: 64_000
			.saturating_add((5_537_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn execute_leave_candidates(n: u32, m: u32, u: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 18_000
			.saturating_add((2_056_000_u64).saturating_mul(n as Weight))
			// Standard Error: 51_000
			.saturating_add((33_423_000_u64).saturating_mul(m as Weight))
			// Standard Error: 191_000
			.saturating_add((475_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m as Weight)))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(100_708_000_u64)
			// Standard Error: 82_000
			.saturating_add((3_932_000_u64).saturating_mul(n as Weight))
			// Standard Error: 303_000
			.saturating_add((8_752_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_006_000
			.saturating_add((6_645_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		(120_936_000_u64)
			// Standard Error: 88_000
			.saturating_add((3_890_000_u64).saturating_mul(n as Weight))
			// Standard Error: 322_000
			.saturating_add((8_576_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		(177_289_000_u64)
			// Standard Error: 89_000
			.saturating_add((4_074_000_u64).saturating_mul(n as Weight))
			// Standard Error: 366_000
			.saturating_add((9_881_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		(93_433_000_u64)
			// Standard Error: 82_000
			.saturating_add((3_903_000_u64).saturating_mul(n as Weight))
			// Standard Error: 342_000
			.saturating_add((9_293_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_171_000
			.saturating_add((7_833_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		(130_631_000_u64)
			// Standard Error: 87_000
			.saturating_add((3_886_000_u64).saturating_mul(n as Weight))
			// Standard Error: 361_000
			.saturating_add((9_106_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		(154_568_000_u64)
			// Standard Error: 97_000
			.saturating_add((4_424_000_u64).saturating_mul(n as Weight))
			// Standard Error: 400_000
			.saturating_add((8_372_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		(140_178_000_u64)
			// Standard Error: 89_000
			.saturating_add((3_916_000_u64).saturating_mul(n as Weight))
			// Standard Error: 369_000
			.saturating_add((9_181_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	fn withdraw_unstaked(u: u32, ) -> Weight {
		(57_318_000_u64)
			// Standard Error: 23_000
			.saturating_add((142_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn increase_max_candidate_stake_by() -> Weight {
		(26_419_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn decrease_max_candidate_stake_by(n: u32, m: u32, ) -> Weight {
		(0_u64)
			// Standard Error: 304_000
			.saturating_add((63_183_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_108_000
			.saturating_add((31_970_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(n as Weight)))
	}
}
