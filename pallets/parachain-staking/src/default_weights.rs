// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! //! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-28, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE:
//! {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=parachain-staking
// --steps=50
// --repeat=20
// --output
// ../../pallets/parachain-staking/src/default_weights.rs
// --template
// ../../.maintain/weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_inflation() -> Weight;
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight;
	fn set_blocks_per_round() -> Weight;
	fn join_candidates(n: u32, m: u32) -> Weight;
	fn leave_candidates(n: u32, m: u32) -> Weight;
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn candidate_stake_less(n: u32, m: u32) -> Weight;
	fn join_delegators(n: u32, m: u32) -> Weight;
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight;
	fn delegator_stake_less(n: u32, m: u32) -> Weight;
	fn revoke_delegation(n: u32, m: u32) -> Weight;
	fn leave_delegators(n: u32, m: u32) -> Weight;
	fn withdraw_unstaked(u: u32) -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended
/// hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_inflation() -> Weight {
		(28_624_000_u64).saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 121_000
			.saturating_add((43_104_000_u64).saturating_mul(n as Weight))
			// Standard Error: 340_000
			.saturating_add((45_959_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(38_682_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 153_000
			.saturating_add((11_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 558_000
			.saturating_add((31_184_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn leave_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 169_000
			.saturating_add((12_005_000_u64).saturating_mul(n as Weight))
			// Standard Error: 616_000
			.saturating_add((30_664_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 150_000
			.saturating_add((11_431_000_u64).saturating_mul(n as Weight))
			// Standard Error: 556_000
			.saturating_add((29_927_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_843_000
			.saturating_add((14_266_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 162_000
			.saturating_add((11_663_000_u64).saturating_mul(n as Weight))
			// Standard Error: 590_000
			.saturating_add((31_131_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 164_000
			.saturating_add((11_652_000_u64).saturating_mul(n as Weight))
			// Standard Error: 675_000
			.saturating_add((32_934_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(16_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 159_000
			.saturating_add((11_206_000_u64).saturating_mul(n as Weight))
			// Standard Error: 665_000
			.saturating_add((31_510_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_981_000
			.saturating_add((13_040_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 162_000
			.saturating_add((11_358_000_u64).saturating_mul(n as Weight))
			// Standard Error: 667_000
			.saturating_add((31_852_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 165_000
			.saturating_add((11_753_000_u64).saturating_mul(n as Weight))
			// Standard Error: 681_000
			.saturating_add((34_906_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 160_000
			.saturating_add((11_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 659_000
			.saturating_add((35_217_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(64_403_000_u64)
			// Standard Error: 13_000
			.saturating_add((201_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_inflation() -> Weight {
		(28_624_000_u64).saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn set_max_selected_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 121_000
			.saturating_add((43_104_000_u64).saturating_mul(n as Weight))
			// Standard Error: 340_000
			.saturating_add((45_959_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n as Weight)))
	}
	fn set_blocks_per_round() -> Weight {
		(38_682_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn join_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 153_000
			.saturating_add((11_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 558_000
			.saturating_add((31_184_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(16_u64))
	}
	fn leave_candidates(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 169_000
			.saturating_add((12_005_000_u64).saturating_mul(n as Weight))
			// Standard Error: 616_000
			.saturating_add((30_664_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	fn candidate_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 150_000
			.saturating_add((11_431_000_u64).saturating_mul(n as Weight))
			// Standard Error: 556_000
			.saturating_add((29_927_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_843_000
			.saturating_add((14_266_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn candidate_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 162_000
			.saturating_add((11_663_000_u64).saturating_mul(n as Weight))
			// Standard Error: 590_000
			.saturating_add((31_131_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
	}
	fn join_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 164_000
			.saturating_add((11_652_000_u64).saturating_mul(n as Weight))
			// Standard Error: 675_000
			.saturating_add((32_934_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(16_u64))
	}
	fn delegator_stake_more(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 159_000
			.saturating_add((11_206_000_u64).saturating_mul(n as Weight))
			// Standard Error: 665_000
			.saturating_add((31_510_000_u64).saturating_mul(m as Weight))
			// Standard Error: 1_981_000
			.saturating_add((13_040_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn delegator_stake_less(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 162_000
			.saturating_add((11_358_000_u64).saturating_mul(n as Weight))
			// Standard Error: 667_000
			.saturating_add((31_852_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn revoke_delegation(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 165_000
			.saturating_add((11_753_000_u64).saturating_mul(n as Weight))
			// Standard Error: 681_000
			.saturating_add((34_906_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn leave_delegators(n: u32, m: u32) -> Weight {
		(0_u64)
			// Standard Error: 160_000
			.saturating_add((11_767_000_u64).saturating_mul(n as Weight))
			// Standard Error: 659_000
			.saturating_add((35_217_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	fn withdraw_unstaked(u: u32) -> Weight {
		(64_403_000_u64)
			// Standard Error: 13_000
			.saturating_add((201_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
