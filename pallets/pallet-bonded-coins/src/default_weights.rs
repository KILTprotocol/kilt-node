// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_bonded_coins
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-11-14
//! STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/kilt-parachain
// benchmark
// pallet
// --template=.maintain/weight-template.hbs
// --header=HEADER-GPL
// --heap-pages=4096
// --chain=dev
// --pallet=pallet-bonded-coins
// --extrinsic=*
// --output=./pallets/pallet-bonded-coins/src/default_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bonded_coins.
pub trait WeightInfo {
	fn create_pool_polynomial(c: u32, ) -> Weight;
	fn create_pool_square_root(c: u32, ) -> Weight;
	fn create_pool_lmsr(c: u32, ) -> Weight;
	fn reset_team() -> Weight;
	fn reset_manager() -> Weight;
	fn set_lock() -> Weight;
	fn unlock() -> Weight;
	fn mint_into_polynomial(c: u32, ) -> Weight;
	fn mint_into_square_root(c: u32, ) -> Weight;
	fn mint_into_lmsr(c: u32, ) -> Weight;
	fn burn_into_polynomial(c: u32, ) -> Weight;
	fn burn_into_square_root(c: u32, ) -> Weight;
	fn burn_into_lmsr(c: u32, ) -> Weight;
	fn start_destroy(c: u32, ) -> Weight;
	fn force_start_destroy(c: u32, ) -> Weight;
	fn finish_destroy(c: u32, ) -> Weight;
	fn start_refund(c: u32, ) -> Weight;
	fn force_start_refund(c: u32, ) -> Weight;
	fn refund_account(c: u32, ) -> Weight;
}

/// Weights for pallet_bonded_coins using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 972_383 nanoseconds.
		Weight::from_parts(890_138_970, 3676)
			// Standard Error: 148_237
			.saturating_add(Weight::from_parts(139_407_230, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 971_077 nanoseconds.
		Weight::from_parts(871_656_562, 3676)
			// Standard Error: 113_571
			.saturating_add(Weight::from_parts(139_662_791, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 968_375 nanoseconds.
		Weight::from_parts(867_466_948, 3676)
			// Standard Error: 116_249
			.saturating_add(Weight::from_parts(139_836_712, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619`
		//  Estimated: `3830`
		// Minimum execution time: 233_932 nanoseconds.
		Weight::from_parts(236_466_000, 3830)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 138_674 nanoseconds.
		Weight::from_parts(139_617_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 136_868 nanoseconds.
		Weight::from_parts(138_628_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3830`
		// Minimum execution time: 134_994 nanoseconds.
		Weight::from_parts(136_078_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `855 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 628_762 nanoseconds.
		Weight::from_parts(608_351_405, 6208)
			// Standard Error: 47_025
			.saturating_add(Weight::from_parts(32_911_729, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 663_728 nanoseconds.
		Weight::from_parts(639_889_739, 6208)
			// Standard Error: 51_003
			.saturating_add(Weight::from_parts(32_847_297, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 632_505 nanoseconds.
		Weight::from_parts(605_811_044, 6208)
			// Standard Error: 68_768
			.saturating_add(Weight::from_parts(45_571_290, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `952 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_219_501 nanoseconds.
		Weight::from_parts(1_231_031_276, 8817)
			// Standard Error: 97_453
			.saturating_add(Weight::from_parts(30_883_086, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_280_432 nanoseconds.
		Weight::from_parts(1_269_726_586, 8817)
			// Standard Error: 81_512
			.saturating_add(Weight::from_parts(31_048_333, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_239_744 nanoseconds.
		Weight::from_parts(1_227_113_068, 8817)
			// Standard Error: 122_714
			.saturating_add(Weight::from_parts(63_197_028, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 289_514 nanoseconds.
		Weight::from_parts(237_013_036, 3830)
			// Standard Error: 81_274
			.saturating_add(Weight::from_parts(79_952_518, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 264_075 nanoseconds.
		Weight::from_parts(219_016_367, 3830)
			// Standard Error: 102_148
			.saturating_add(Weight::from_parts(79_147_583, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 723_132 nanoseconds.
		Weight::from_parts(655_543_968, 3830)
			// Standard Error: 157_030
			.saturating_add(Weight::from_parts(102_388_883, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1005 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 250_787 nanoseconds.
		Weight::from_parts(264_418_963, 3830)
			// Standard Error: 10_398
			.saturating_add(Weight::from_parts(128_444, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 251_032 nanoseconds.
		Weight::from_parts(265_248_643, 3830)
			// Standard Error: 14_079
			.saturating_add(Weight::from_parts(80_561, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn refund_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_363_146 nanoseconds.
		Weight::from_parts(1_343_165_422, 8817)
			// Standard Error: 90_432
			.saturating_add(Weight::from_parts(31_315_327, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 972_383 nanoseconds.
		Weight::from_parts(890_138_970, 3676)
			// Standard Error: 148_237
			.saturating_add(Weight::from_parts(139_407_230, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 971_077 nanoseconds.
		Weight::from_parts(871_656_562, 3676)
			// Standard Error: 113_571
			.saturating_add(Weight::from_parts(139_662_791, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 968_375 nanoseconds.
		Weight::from_parts(867_466_948, 3676)
			// Standard Error: 116_249
			.saturating_add(Weight::from_parts(139_836_712, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619`
		//  Estimated: `3830`
		// Minimum execution time: 233_932 nanoseconds.
		Weight::from_parts(236_466_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 138_674 nanoseconds.
		Weight::from_parts(139_617_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 136_868 nanoseconds.
		Weight::from_parts(138_628_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3830`
		// Minimum execution time: 134_994 nanoseconds.
		Weight::from_parts(136_078_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `855 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 628_762 nanoseconds.
		Weight::from_parts(608_351_405, 6208)
			// Standard Error: 47_025
			.saturating_add(Weight::from_parts(32_911_729, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 663_728 nanoseconds.
		Weight::from_parts(639_889_739, 6208)
			// Standard Error: 51_003
			.saturating_add(Weight::from_parts(32_847_297, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 632_505 nanoseconds.
		Weight::from_parts(605_811_044, 6208)
			// Standard Error: 68_768
			.saturating_add(Weight::from_parts(45_571_290, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `952 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_219_501 nanoseconds.
		Weight::from_parts(1_231_031_276, 8817)
			// Standard Error: 97_453
			.saturating_add(Weight::from_parts(30_883_086, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_280_432 nanoseconds.
		Weight::from_parts(1_269_726_586, 8817)
			// Standard Error: 81_512
			.saturating_add(Weight::from_parts(31_048_333, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_239_744 nanoseconds.
		Weight::from_parts(1_227_113_068, 8817)
			// Standard Error: 122_714
			.saturating_add(Weight::from_parts(63_197_028, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 289_514 nanoseconds.
		Weight::from_parts(237_013_036, 3830)
			// Standard Error: 81_274
			.saturating_add(Weight::from_parts(79_952_518, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 264_075 nanoseconds.
		Weight::from_parts(219_016_367, 3830)
			// Standard Error: 102_148
			.saturating_add(Weight::from_parts(79_147_583, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 723_132 nanoseconds.
		Weight::from_parts(655_543_968, 3830)
			// Standard Error: 157_030
			.saturating_add(Weight::from_parts(102_388_883, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1005 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 250_787 nanoseconds.
		Weight::from_parts(264_418_963, 3830)
			// Standard Error: 10_398
			.saturating_add(Weight::from_parts(128_444, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 251_032 nanoseconds.
		Weight::from_parts(265_248_643, 3830)
			// Standard Error: 14_079
			.saturating_add(Weight::from_parts(80_561, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn refund_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_363_146 nanoseconds.
		Weight::from_parts(1_343_165_422, 8817)
			// Standard Error: 90_432
			.saturating_add(Weight::from_parts(31_315_327, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
}
