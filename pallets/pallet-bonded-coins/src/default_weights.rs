// KILT Blockchain – https://botlabs.org
// Copyright (C) 2019-2024 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for pallet_bonded_coins
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-11-14
//! STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `rust-2`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/kilt-parachain
// benchmark
// pallet
// --template=.maintain/weight-template.hbs
// --header=HEADER-GPL
// --heap-pages=4096
// --chain=dev
// --pallet=pallet-bonded-coins
// --extrinsic=*
// --output=./pallets/pallet-bonded-coins/src/default_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_imports)]
#![allow(clippy::as_conversions)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bonded_coins.
pub trait WeightInfo {
	fn create_pool_polynomial(c: u32, ) -> Weight;
	fn create_pool_square_root(c: u32, ) -> Weight;
	fn create_pool_lmsr(c: u32, ) -> Weight;
	fn reset_team() -> Weight;
	fn reset_manager() -> Weight;
	fn set_lock() -> Weight;
	fn unlock() -> Weight;
	fn mint_into_polynomial(c: u32, ) -> Weight;
	fn mint_into_square_root(c: u32, ) -> Weight;
	fn mint_into_lmsr(c: u32, ) -> Weight;
	fn burn_into_polynomial(c: u32, ) -> Weight;
	fn burn_into_square_root(c: u32, ) -> Weight;
	fn burn_into_lmsr(c: u32, ) -> Weight;
	fn start_destroy(c: u32, ) -> Weight;
	fn force_start_destroy(c: u32, ) -> Weight;
	fn finish_destroy(c: u32, ) -> Weight;
	fn start_refund(c: u32, ) -> Weight;
	fn force_start_refund(c: u32, ) -> Weight;
}

/// Weights for pallet_bonded_coins using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_006_977 nanoseconds.
		Weight::from_parts(911_113_611, 3676)
			// Standard Error: 121_946
			.saturating_add(Weight::from_parts(141_175_610, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_005_357 nanoseconds.
		Weight::from_parts(886_179_736, 3676)
			// Standard Error: 52_177
			.saturating_add(Weight::from_parts(141_395_007, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_002_143 nanoseconds.
		Weight::from_parts(119_651_019, 3676)
			// Standard Error: 9_342_180
			.saturating_add(Weight::from_parts(196_363_053, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619`
		//  Estimated: `3830`
		// Minimum execution time: 237_962 nanoseconds.
		Weight::from_parts(239_585_000, 3830)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 140_252 nanoseconds.
		Weight::from_parts(141_632_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 139_894 nanoseconds.
		Weight::from_parts(142_495_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3830`
		// Minimum execution time: 140_081 nanoseconds.
		Weight::from_parts(141_408_000, 3830)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `855 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 647_871 nanoseconds.
		Weight::from_parts(616_828_879, 6208)
			// Standard Error: 34_099
			.saturating_add(Weight::from_parts(31_788_263, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 643_727 nanoseconds.
		Weight::from_parts(617_784_332, 6208)
			// Standard Error: 41_519
			.saturating_add(Weight::from_parts(31_692_394, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 648_913 nanoseconds.
		Weight::from_parts(626_352_115, 6208)
			// Standard Error: 50_112
			.saturating_add(Weight::from_parts(32_324_083, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `952 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_275_742 nanoseconds.
		Weight::from_parts(1_254_393_513, 8817)
			// Standard Error: 39_398
			.saturating_add(Weight::from_parts(31_749_841, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_325_717 nanoseconds.
		Weight::from_parts(1_298_000_589, 8817)
			// Standard Error: 31_693
			.saturating_add(Weight::from_parts(31_704_257, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_276_927 nanoseconds.
		Weight::from_parts(1_263_163_456, 8817)
			// Standard Error: 47_654
			.saturating_add(Weight::from_parts(61_687_272, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 295_375 nanoseconds.
		Weight::from_parts(249_613_968, 3830)
			// Standard Error: 57_343
			.saturating_add(Weight::from_parts(80_657_827, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 262_409 nanoseconds.
		Weight::from_parts(216_019_575, 3830)
			// Standard Error: 63_830
			.saturating_add(Weight::from_parts(80_675_281, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 742_815 nanoseconds.
		Weight::from_parts(665_717_692, 3830)
			// Standard Error: 109_461
			.saturating_add(Weight::from_parts(104_012_461, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0 ,2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1005 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 249_596 nanoseconds.
		Weight::from_parts(281_021_778, 3830)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 263_491 nanoseconds.
		Weight::from_parts(270_271_540, 3830)
			// Standard Error: 26_797
			.saturating_add(Weight::from_parts(163_070, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_006_977 nanoseconds.
		Weight::from_parts(911_113_611, 3676)
			// Standard Error: 121_946
			.saturating_add(Weight::from_parts(141_175_610, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_005_357 nanoseconds.
		Weight::from_parts(886_179_736, 3676)
			// Standard Error: 52_177
			.saturating_add(Weight::from_parts(141_395_007, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::NextAssetId` (r:1 w:1)
	/// Proof: `BondedCoins::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:51)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:50)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCoins::Pools` (r:0 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn create_pool_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `534`
		//  Estimated: `3676 + c * (2685 ±0)`
		// Minimum execution time: 1_002_143 nanoseconds.
		Weight::from_parts(119_651_019, 3676)
			// Standard Error: 9_342_180
			.saturating_add(Weight::from_parts(196_363_053, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	fn reset_team() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619`
		//  Estimated: `3830`
		// Minimum execution time: 237_962 nanoseconds.
		Weight::from_parts(239_585_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn reset_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 140_252 nanoseconds.
		Weight::from_parts(141_632_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn set_lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339`
		//  Estimated: `3830`
		// Minimum execution time: 139_894 nanoseconds.
		Weight::from_parts(142_495_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3830`
		// Minimum execution time: 140_081 nanoseconds.
		Weight::from_parts(141_408_000, 3830)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `855 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 647_871 nanoseconds.
		Weight::from_parts(616_828_879, 6208)
			// Standard Error: 34_099
			.saturating_add(Weight::from_parts(31_788_263, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `839 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 643_727 nanoseconds.
		Weight::from_parts(617_784_332, 6208)
			// Standard Error: 41_519
			.saturating_add(Weight::from_parts(31_692_394, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:1)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:2 w:1)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn mint_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + c * (221 ±0)`
		//  Estimated: `6208 + c * (2685 ±0)`
		// Minimum execution time: 648_913 nanoseconds.
		Weight::from_parts(626_352_115, 6208)
			// Standard Error: 50_112
			.saturating_add(Weight::from_parts(32_324_083, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_polynomial(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `952 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_275_742 nanoseconds.
		Weight::from_parts(1_254_393_513, 8817)
			// Standard Error: 39_398
			.saturating_add(Weight::from_parts(31_749_841, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_square_root(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `936 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_325_717 nanoseconds.
		Weight::from_parts(1_298_000_589, 8817)
			// Standard Error: 31_693
			.saturating_add(Weight::from_parts(31_704_257, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:0)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:51 w:2)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:1 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:3 w:3)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn burn_into_lmsr(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `920 + c * (221 ±0)`
		//  Estimated: `8817 + c * (2685 ±0)`
		// Minimum execution time: 1_276_927 nanoseconds.
		Weight::from_parts(1_263_163_456, 8817)
			// Standard Error: 47_654
			.saturating_add(Weight::from_parts(61_687_272, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `373 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 295_375 nanoseconds.
		Weight::from_parts(249_613_968, 3830)
			// Standard Error: 57_343
			.saturating_add(Weight::from_parts(80_657_827, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `341 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 262_409 nanoseconds.
		Weight::from_parts(216_019_575, 3830)
			// Standard Error: 63_830
			.saturating_add(Weight::from_parts(80_675_281, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:50 w:50)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Metadata` (r:50 w:0)
	/// Proof: `BondedCurrencies::Metadata` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(211), added: 2686, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn finish_destroy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `504 + c * (221 ±0)`
		//  Estimated: `3830 + c * (2685 ±0)`
		// Minimum execution time: 742_815 nanoseconds.
		Weight::from_parts(665_717_692, 3830)
			// Standard Error: 109_461
			.saturating_add(Weight::from_parts(104_012_461, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2685).saturating_mul(c.into()))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn start_refund(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1005 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 249_596 nanoseconds.
		Weight::from_parts(281_021_778, 3830)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BondedCoins::Pools` (r:1 w:1)
	/// Proof: `BondedCoins::Pools` (`max_values`: None, `max_size`: Some(365), added: 2840, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Account` (r:1 w:0)
	/// Proof: `BondedCurrencies::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `BondedCurrencies::Asset` (r:1 w:0)
	/// Proof: `BondedCurrencies::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 50]`.
	fn force_start_refund(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940 + c * (11 ±0)`
		//  Estimated: `3830`
		// Minimum execution time: 263_491 nanoseconds.
		Weight::from_parts(270_271_540, 3830)
			// Standard Error: 26_797
			.saturating_add(Weight::from_parts(163_070, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
