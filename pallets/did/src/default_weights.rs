// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! //! Autogenerated weights for did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-18, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE:
//! {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Interpreted, CHAIN: Some("dev"), DB
//! CACHE: 128

// Executed Command:
// target/release/mashnet-node
// benchmark
// --chain=dev
// --steps=1
// --repeat=20
// --pallet=did
// --extrinsic
// *
// --execution=wasm
// --heap-pages=4096
// --output=./pallets/did/src/weights.rs
// --template=./.maintain/weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for did.
pub trait WeightInfo {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32) -> Weight;
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32) -> Weight;
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, u: u32) -> Weight;
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, u: u32) -> Weight;
	fn submit_did_deletion_operation() -> Weight;
}

/// Weights for did using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32) -> Weight {
		(299_511_000_u64)
			// Standard Error: 1_074_000
			.saturating_add((47_621_000_u64).saturating_mul(n as Weight))
			// Standard Error: 50_000
			.saturating_add((195_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32) -> Weight {
		(431_888_000_u64)
			// Standard Error: 1_056_000
			.saturating_add((39_225_000_u64).saturating_mul(n as Weight))
			// Standard Error: 49_000
			.saturating_add((34_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, u: u32) -> Weight {
		(222_387_000_u64)
			// Standard Error: 694_000
			.saturating_add((65_251_000_u64).saturating_mul(n as Weight))
			// Standard Error: 694_000
			.saturating_add((93_190_000_u64).saturating_mul(m as Weight))
			// Standard Error: 32_000
			.saturating_add((1_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 708_000
			.saturating_add((86_157_000_u64).saturating_mul(n as Weight))
			// Standard Error: 708_000
			.saturating_add((95_056_000_u64).saturating_mul(m as Weight))
			// Standard Error: 33_000
			.saturating_add((136_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_deletion_operation() -> Weight {
		(163_467_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32) -> Weight {
		(299_511_000_u64)
			// Standard Error: 1_074_000
			.saturating_add((47_621_000_u64).saturating_mul(n as Weight))
			// Standard Error: 50_000
			.saturating_add((195_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32) -> Weight {
		(431_888_000_u64)
			// Standard Error: 1_056_000
			.saturating_add((39_225_000_u64).saturating_mul(n as Weight))
			// Standard Error: 49_000
			.saturating_add((34_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, u: u32) -> Weight {
		(222_387_000_u64)
			// Standard Error: 694_000
			.saturating_add((65_251_000_u64).saturating_mul(n as Weight))
			// Standard Error: 694_000
			.saturating_add((93_190_000_u64).saturating_mul(m as Weight))
			// Standard Error: 32_000
			.saturating_add((1_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, u: u32) -> Weight {
		(0_u64)
			// Standard Error: 708_000
			.saturating_add((86_157_000_u64).saturating_mul(n as Weight))
			// Standard Error: 708_000
			.saturating_add((95_056_000_u64).saturating_mul(m as Weight))
			// Standard Error: 33_000
			.saturating_add((136_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_deletion_operation() -> Weight {
		(163_467_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
