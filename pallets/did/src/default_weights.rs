// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for did
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-22, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/kilt-parachain
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=Compiled
// --heap-pages=4096
// --extrinsic=*
// --pallet=did
// --steps=1
// --repeat=20
// --output
// pallets/did/src/default_weights.rs
// --template
// .maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for did.
pub trait WeightInfo {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32, ) -> Weight;
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32, ) -> Weight;
	fn submit_did_create_operation_ecdsa_keys(n: u32, u: u32, ) -> Weight;
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, u: u32, ) -> Weight;
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, u: u32, ) -> Weight;
	fn submit_did_update_operation_ecdsa_keys(n: u32, m: u32, u: u32, ) -> Weight;
	fn submit_did_delete_operation() -> Weight;
	fn submit_did_call_ed25519_key() -> Weight;
	fn submit_did_call_sr25519_key() -> Weight;
	fn submit_did_call_ecdsa_key() -> Weight;
}

/// Weights for did using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32, ) -> Weight {
		(77_831_000_u64)
			// Standard Error: 42_000
			.saturating_add((1_626_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_000
			.saturating_add((6_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32, ) -> Weight {
		(75_106_000_u64)
			// Standard Error: 41_000
			.saturating_add((1_959_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_000
			.saturating_add((23_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_ecdsa_keys(n: u32, u: u32, ) -> Weight {
		(181_586_000_u64)
			// Standard Error: 51_000
			.saturating_add((1_768_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_000
			.saturating_add((3_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(71_793_000_u64)
			// Standard Error: 39_000
			.saturating_add((3_444_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((2_574_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(73_079_000_u64)
			// Standard Error: 59_000
			.saturating_add((3_770_000_u64).saturating_mul(n as Weight))
			// Standard Error: 59_000
			.saturating_add((2_991_000_u64).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ecdsa_keys(n: u32, m: u32, u: u32, ) -> Weight {
		(170_458_000_u64)
			// Standard Error: 67_000
			.saturating_add((3_849_000_u64).saturating_mul(n as Weight))
			// Standard Error: 67_000
			.saturating_add((3_102_000_u64).saturating_mul(m as Weight))
			// Standard Error: 3_000
			.saturating_add((1_000_u64).saturating_mul(u as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_delete_operation() -> Weight {
		(69_009_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ed25519_key() -> Weight {
		(71_504_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_sr25519_key() -> Weight {
		(75_271_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ecdsa_key() -> Weight {
		(177_543_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn submit_did_create_operation_ed25519_keys(n: u32, u: u32, ) -> Weight {
		(77_831_000_u64)
			// Standard Error: 42_000
			.saturating_add((1_626_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_000
			.saturating_add((6_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_sr25519_keys(n: u32, u: u32, ) -> Weight {
		(75_106_000_u64)
			// Standard Error: 41_000
			.saturating_add((1_959_000_u64).saturating_mul(n as Weight))
			// Standard Error: 1_000
			.saturating_add((23_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_create_operation_ecdsa_keys(n: u32, u: u32, ) -> Weight {
		(181_586_000_u64)
			// Standard Error: 51_000
			.saturating_add((1_768_000_u64).saturating_mul(n as Weight))
			// Standard Error: 2_000
			.saturating_add((3_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ed25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(71_793_000_u64)
			// Standard Error: 39_000
			.saturating_add((3_444_000_u64).saturating_mul(n as Weight))
			// Standard Error: 39_000
			.saturating_add((2_574_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_sr25519_keys(n: u32, m: u32, _u: u32, ) -> Weight {
		(73_079_000_u64)
			// Standard Error: 59_000
			.saturating_add((3_770_000_u64).saturating_mul(n as Weight))
			// Standard Error: 59_000
			.saturating_add((2_991_000_u64).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_update_operation_ecdsa_keys(n: u32, m: u32, u: u32, ) -> Weight {
		(170_458_000_u64)
			// Standard Error: 67_000
			.saturating_add((3_849_000_u64).saturating_mul(n as Weight))
			// Standard Error: 67_000
			.saturating_add((3_102_000_u64).saturating_mul(m as Weight))
			// Standard Error: 3_000
			.saturating_add((1_000_u64).saturating_mul(u as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_delete_operation() -> Weight {
		(69_009_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ed25519_key() -> Weight {
		(71_504_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_call_sr25519_key() -> Weight {
		(75_271_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn submit_did_call_ecdsa_key() -> Weight {
		(177_543_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
