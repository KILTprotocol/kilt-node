// KILT Blockchain â€“ https://botlabs.org
// Copyright (C) 2019-2021 BOTLabs GmbH

// The KILT Blockchain is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The KILT Blockchain is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// If you feel like getting in touch with us, you can do so at info@botlabs.org

//! Autogenerated weights for delegation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-11, STEPS: {{cmd.steps}}\, REPEAT: {{cmd.repeat}}\, LOW RANGE: {{cmd.lowest_range_values}}\, HIGH RANGE: {{cmd.highest_range_values}}\
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// /home/willi/mashnet-node/target/release/kilt-parachain
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=delegation
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=../../pallets/delegation/src/default_weights.rs
// --template=../../.maintain/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for delegation.
pub trait WeightInfo {
	fn create_hierarchy() -> Weight;
	fn add_delegation() -> Weight;
	fn revoke_delegation_root_child(r: u32, c: u32, ) -> Weight;
	fn revoke_delegation_leaf(r: u32, c: u32, ) -> Weight;
	fn remove_delegation_root_child(r: u32 ) -> Weight;
	fn remove_delegation_leaf(r: u32 ) -> Weight;
}

/// Weights for delegation using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create_hierarchy() -> Weight {
		(49_402_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn add_delegation() -> Weight {
		(131_777_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn revoke_delegation_root_child(r: u32, _c: u32, ) -> Weight {
		(32_769_000_u64)
			// Standard Error: 373_000
			.saturating_add((29_614_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn revoke_delegation_leaf(r: u32, c: u32, ) -> Weight {
		(54_214_000_u64)
			// Standard Error: 196_000
			.saturating_add((484_000_u64).saturating_mul(r as Weight))
			// Standard Error: 196_000
			.saturating_add((8_692_000_u64).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// TODO: Needs to be updated once benchmarks are working again
	fn remove_delegation_root_child(r: u32) -> Weight {
		(32_769_000_u64)
			// Standard Error: 373_000
			.saturating_add((29_614_000_u64).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	// TODO: Needs to be updated once benchmarks are working again
	fn remove_delegation_leaf(r: u32) -> Weight {
		(54_214_000_u64)
			// Standard Error: 196_000
			.saturating_add((484_000_u64).saturating_mul(r as Weight))
			// Standard Error: 196_000
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_hierarchy() -> Weight {
		(49_402_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn add_delegation() -> Weight {
		(131_777_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn revoke_delegation_root_child(r: u32, _c: u32, ) -> Weight {
		(32_769_000_u64)
			// Standard Error: 373_000
			.saturating_add((29_614_000_u64).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	fn revoke_delegation_leaf(r: u32, c: u32, ) -> Weight {
		(54_214_000_u64)
			// Standard Error: 196_000
			.saturating_add((484_000_u64).saturating_mul(r as Weight))
			// Standard Error: 196_000
			.saturating_add((8_692_000_u64).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// TODO: Needs to be updated once benchmarks are working again
	fn remove_delegation_root_child(r: u32) -> Weight {
		(32_769_000_u64)
			// Standard Error: 373_000
			.saturating_add((29_614_000_u64).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(r as Weight)))
	}
	// TODO: Needs to be updated once benchmarks are working again
	fn remove_delegation_leaf(r: u32) -> Weight {
		(54_214_000_u64)
			// Standard Error: 196_000
			.saturating_add((484_000_u64).saturating_mul(r as Weight))
			// Standard Error: 196_000
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
